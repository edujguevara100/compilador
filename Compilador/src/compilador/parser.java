
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 05 16:35:55 CST 2020
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 05 16:35:55 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\047\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\014\000\002\003\004" +
    "\000\002\020\004\000\002\020\006\000\002\020\002\000" +
    "\002\021\006\000\002\021\004\000\002\013\011\000\002" +
    "\013\003\000\002\004\006\000\002\004\004\000\002\053" +
    "\005\000\002\053\007\000\002\053\002\000\002\022\006" +
    "\000\002\022\004\000\002\023\004\000\002\023\002\000" +
    "\002\005\006\000\002\005\004\000\002\006\011\000\002" +
    "\006\004\000\002\007\013\000\002\007\006\000\002\007" +
    "\004\000\002\010\020\000\002\010\004\000\002\011\011" +
    "\000\002\011\004\000\002\012\013\000\002\012\004\000" +
    "\002\024\012\000\002\024\006\000\002\014\007\000\002" +
    "\014\004\000\002\025\003\000\002\025\003\000\002\050" +
    "\005\000\002\050\004\000\002\015\005\000\002\015\003" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\004\000\002\027\005\000\002\016\005\000\002" +
    "\016\003\000\002\030\005\000\002\030\003\000\002\031" +
    "\005\000\002\031\003\000\002\032\006\000\002\032\003" +
    "\000\002\032\004\000\002\032\003\000\002\033\003\000" +
    "\002\033\002\000\002\034\005\000\002\034\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\002\000\002\036\005\000\002\041\005\000\002" +
    "\041\003\000\002\037\005\000\002\042\005\000\002\042" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\007\000\002\045\003\000\002\045\002\000\002\046" +
    "\005\000\002\046\003\000\002\051\005\000\002\051\005" +
    "\000\002\051\002\000\002\052\005\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\003\006\037\ufffe\001\002\000\004\002" +
    "\000\001\002\000\004\002\340\001\002\000\004\002\ufff5" +
    "\001\002\000\004\037\011\001\002\000\004\037\uffff\001" +
    "\002\000\010\003\012\010\013\036\014\001\002\000\004" +
    "\037\ufffc\001\002\000\004\015\334\001\002\000\004\041" +
    "\015\001\002\000\004\042\016\001\002\000\006\036\021" +
    "\043\ufff9\001\002\000\004\034\331\001\002\000\004\043" +
    "\023\001\002\000\004\041\022\001\002\000\006\034\ufff7" +
    "\043\ufffb\001\002\000\004\015\024\001\002\000\024\007" +
    "\027\011\045\012\043\035\uffb7\036\035\040\032\041\034" +
    "\045\040\055\026\001\002\000\036\007\027\011\045\012" +
    "\043\020\uffb7\021\uffb7\022\uffb7\024\uffb7\027\uffb7\035\uffb7" +
    "\036\035\040\032\041\034\045\040\055\026\001\002\000" +
    "\006\003\326\041\325\001\002\000\006\003\316\042\317" +
    "\001\002\000\036\007\027\011\045\012\043\020\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\027\uffb7\035\uffb7\036\035\040\032" +
    "\041\034\045\040\055\026\001\002\000\036\007\027\011" +
    "\045\012\043\020\uffb7\021\uffb7\022\uffb7\024\uffb7\027\uffb7" +
    "\035\uffb7\036\035\040\032\041\034\045\040\055\026\001" +
    "\002\000\006\003\305\042\306\001\002\000\004\035\300" +
    "\001\002\000\010\003\267\031\270\042\271\001\002\000" +
    "\010\003\246\026\250\041\ufff0\001\002\000\036\007\027" +
    "\011\045\012\043\020\uffb7\021\uffb7\022\uffb7\024\uffb7\027" +
    "\uffb7\035\uffb7\036\035\040\032\041\034\045\040\055\026" +
    "\001\002\000\036\007\027\011\045\012\043\020\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\027\uffb7\035\uffb7\036\035\040\032" +
    "\041\034\045\040\055\026\001\002\000\006\003\235\042" +
    "\236\001\002\000\040\007\027\011\045\012\043\020\uffb7" +
    "\021\uffb7\022\uffb7\024\uffb7\027\uffb7\035\uffb7\036\035\040" +
    "\032\041\034\044\173\045\040\055\026\001\002\000\036" +
    "\007\027\011\045\012\043\020\uffb7\021\uffb7\022\uffb7\024" +
    "\uffb7\027\uffb7\035\uffb7\036\035\040\032\041\034\045\040" +
    "\055\026\001\002\000\006\003\145\042\146\001\002\000" +
    "\036\007\027\011\045\012\043\020\uffb7\021\uffb7\022\uffb7" +
    "\024\uffb7\027\uffb7\035\uffb7\036\035\040\032\041\034\045" +
    "\040\055\026\001\002\000\006\003\050\042\051\001\002" +
    "\000\036\007\027\011\045\012\043\020\uffb7\021\uffb7\022" +
    "\uffb7\024\uffb7\027\uffb7\035\uffb7\036\035\040\032\041\034" +
    "\045\040\055\026\001\002\000\016\020\uffbd\021\uffbd\022" +
    "\uffbd\024\uffbd\027\uffbd\035\uffbd\001\002\000\036\007\uffe3" +
    "\011\uffe3\012\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\027" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\045\uffe3\055\uffe3" +
    "\001\002\000\004\036\052\001\002\000\004\041\053\001" +
    "\002\000\004\030\054\001\002\000\010\041\055\042\061" +
    "\046\062\001\002\000\022\025\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\042\103\043\uffa0\053\101\054\uffa0\001\002\000\016" +
    "\025\uffd3\032\uffd3\033\uffd3\034\uffd3\043\uffd3\054\uffd3\001" +
    "\002\000\016\025\uffd5\032\067\033\uffd5\034\uffd5\043\uffd5" +
    "\054\uffd5\001\002\000\006\033\065\034\071\001\002\000" +
    "\010\041\055\042\061\046\062\001\002\000\016\025\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\043\uffd2\054\uffd2\001\002\000" +
    "\006\033\065\043\064\001\002\000\016\025\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\043\uffd0\054\uffd0\001\002\000\010\041" +
    "\055\042\061\046\062\001\002\000\016\025\uffd6\032\067" +
    "\033\uffd6\034\uffd6\043\uffd6\054\uffd6\001\002\000\010\041" +
    "\055\042\061\046\062\001\002\000\016\025\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\043\uffd4\054\uffd4\001\002\000\004\041" +
    "\072\001\002\000\004\033\073\001\002\000\004\033\074" +
    "\001\002\000\004\043\075\001\002\000\004\015\076\001" +
    "\002\000\024\007\027\011\045\012\043\022\uffb7\036\035" +
    "\040\032\041\034\045\040\055\026\001\002\000\004\022" +
    "\100\001\002\000\036\007\uffe4\011\uffe4\012\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\027\uffe4\035\uffe4\036\uffe4\040" +
    "\uffe4\041\uffe4\045\uffe4\055\uffe4\001\002\000\016\026\114" +
    "\041\055\042\061\046\062\047\115\050\106\001\002\000" +
    "\016\025\uffd1\032\uffd1\033\uffd1\034\uffd1\043\uffd1\054\uffd1" +
    "\001\002\000\020\026\114\041\055\042\061\043\uffa5\046" +
    "\062\047\115\050\106\001\002\000\012\025\uffa9\034\uffa9" +
    "\043\uffa9\054\uffa9\001\002\000\006\034\uffa3\043\uffa3\001" +
    "\002\000\012\025\uffaa\034\uffaa\043\uffaa\054\uffaa\001\002" +
    "\000\004\043\136\001\002\000\014\025\uffa8\033\065\034" +
    "\uffa8\043\uffa8\054\uffa8\001\002\000\012\025\uffad\034\uffad" +
    "\043\uffad\054\uffad\001\002\000\012\025\uffac\034\uffac\043" +
    "\uffac\054\uffac\001\002\000\006\034\134\043\uffa6\001\002" +
    "\000\012\026\121\046\125\047\122\050\117\001\002\000" +
    "\012\025\uffab\034\uffab\043\uffab\054\uffab\001\002\000\006" +
    "\027\131\034\132\001\002\000\006\027\uffaf\034\uffaf\001" +
    "\002\000\006\027\uffb4\034\uffb4\001\002\000\010\046\125" +
    "\047\122\050\117\001\002\000\006\027\uffb0\034\uffb0\001" +
    "\002\000\006\027\126\034\127\001\002\000\006\027\uffb1" +
    "\034\uffb1\001\002\000\006\027\uffae\034\uffae\001\002\000" +
    "\014\025\uffb6\027\uffb6\034\uffb6\043\uffb6\054\uffb6\001\002" +
    "\000\010\046\125\047\122\050\117\001\002\000\006\027" +
    "\uffb5\034\uffb5\001\002\000\012\025\uffb3\034\uffb3\043\uffb3" +
    "\054\uffb3\001\002\000\004\026\121\001\002\000\006\027" +
    "\uffb2\034\uffb2\001\002\000\016\026\114\041\055\042\061" +
    "\046\062\047\115\050\106\001\002\000\006\034\uffa4\043" +
    "\uffa4\001\002\000\024\004\uffa1\005\uffa1\006\uffa1\025\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\043\uffa1\054\uffa1\001\002\000" +
    "\006\034\142\054\uff9e\001\002\000\004\054\141\001\002" +
    "\000\024\004\uffa2\005\uffa2\006\uffa2\025\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\043\uffa2\054\uffa2\001\002\000\016\026\114" +
    "\041\055\042\061\046\062\047\115\050\106\001\002\000" +
    "\004\054\uff9f\001\002\000\016\020\uffbb\021\uffbb\022\uffbb" +
    "\024\uffbb\027\uffbb\035\uffbb\001\002\000\036\007\uffdf\011" +
    "\uffdf\012\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\027\uffdf" +
    "\035\uffdf\036\uffdf\040\uffdf\041\uffdf\045\uffdf\055\uffdf\001" +
    "\002\000\004\041\147\001\002\000\004\034\150\001\002" +
    "\000\004\036\151\001\002\000\004\043\152\001\002\000" +
    "\004\015\153\001\002\000\006\013\154\014\155\001\002" +
    "\000\004\053\163\001\002\000\004\026\160\001\002\000" +
    "\004\017\157\001\002\000\036\007\uffe0\011\uffe0\012\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\024\uffe0\027\uffe0\035\uffe0\036" +
    "\uffe0\040\uffe0\041\uffe0\045\uffe0\055\uffe0\001\002\000\024" +
    "\007\027\011\045\012\043\027\uffb7\036\035\040\032\041" +
    "\034\045\040\055\026\001\002\000\004\027\162\001\002" +
    "\000\004\017\uffdd\001\002\000\016\026\114\041\055\042" +
    "\061\046\062\047\115\050\106\001\002\000\004\054\165" +
    "\001\002\000\004\026\166\001\002\000\024\007\027\011" +
    "\045\012\043\027\uffb7\036\035\040\032\041\034\045\040" +
    "\055\026\001\002\000\004\027\170\001\002\000\006\013" +
    "\154\014\155\001\002\000\004\017\uffde\001\002\000\016" +
    "\020\uffb9\021\uffb9\022\uffb9\024\uffb9\027\uffb9\035\uffb9\001" +
    "\002\000\010\003\177\015\200\040\201\001\002\000\016" +
    "\020\uffbf\021\uffbf\022\uffbf\024\uffbf\027\uffbf\035\uffbf\001" +
    "\002\000\036\007\027\011\045\012\043\020\uffb7\021\uffb7" +
    "\022\uffb7\024\uffb7\027\uffb7\035\uffb7\036\035\040\032\041" +
    "\034\045\040\055\026\001\002\000\016\020\uffbe\021\uffbe" +
    "\022\uffbe\024\uffbe\027\uffbe\035\uffbe\001\002\000\036\007" +
    "\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5" +
    "\027\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\045\uffe5\055" +
    "\uffe5\001\002\000\024\007\027\011\045\012\043\021\uffb7" +
    "\036\035\040\032\041\034\045\040\055\026\001\002\000" +
    "\004\042\202\001\002\000\014\041\207\042\uffc4\046\203" +
    "\050\204\052\212\001\002\000\012\004\uffc6\005\uffc6\006" +
    "\uffc6\043\uffc6\001\002\000\012\004\uffc8\005\uffc8\006\uffc8" +
    "\043\uffc8\001\002\000\004\042\230\001\002\000\012\004" +
    "\uffca\005\uffca\006\uffca\043\uffca\001\002\000\016\004\uffa0" +
    "\005\uffa0\006\uffa0\042\103\043\uffa0\053\101\001\002\000" +
    "\012\004\225\005\uffcc\006\uffcc\043\uffcc\001\002\000\010" +
    "\005\223\006\uffce\043\uffce\001\002\000\004\042\uffc5\001" +
    "\002\000\006\006\214\043\215\001\002\000\014\041\207" +
    "\042\uffc4\046\203\050\204\052\212\001\002\000\004\015" +
    "\216\001\002\000\024\007\027\011\045\012\043\021\uffb7" +
    "\036\035\040\032\041\034\045\040\055\026\001\002\000" +
    "\004\021\220\001\002\000\004\044\173\001\002\000\036" +
    "\007\uffe7\011\uffe7\012\uffe7\020\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\027\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\045\uffe7" +
    "\055\uffe7\001\002\000\010\005\223\006\uffcf\043\uffcf\001" +
    "\002\000\014\041\207\042\uffc4\046\203\050\204\052\212" +
    "\001\002\000\012\004\225\005\uffcd\006\uffcd\043\uffcd\001" +
    "\002\000\014\041\207\042\uffc4\046\203\050\204\052\212" +
    "\001\002\000\012\004\uffcb\005\uffcb\006\uffcb\043\uffcb\001" +
    "\002\000\012\004\uffc7\005\uffc7\006\uffc7\043\uffc7\001\002" +
    "\000\014\041\207\042\uffc4\046\203\050\204\052\212\001" +
    "\002\000\006\006\214\043\232\001\002\000\012\004\uffc9" +
    "\005\uffc9\006\uffc9\043\uffc9\001\002\000\004\021\234\001" +
    "\002\000\036\007\uffe6\011\uffe6\012\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\024\uffe6\027\uffe6\035\uffe6\036\uffe6\040\uffe6\041" +
    "\uffe6\045\uffe6\055\uffe6\001\002\000\036\007\uffdb\011\uffdb" +
    "\012\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\027\uffdb\035" +
    "\uffdb\036\uffdb\040\uffdb\041\uffdb\045\uffdb\055\uffdb\001\002" +
    "\000\020\026\114\041\055\042\061\046\062\047\115\050" +
    "\106\051\240\001\002\000\004\043\uffda\001\002\000\004" +
    "\043\uffd9\001\002\000\004\043\242\001\002\000\004\025" +
    "\243\001\002\000\036\007\uffdc\011\uffdc\012\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\024\uffdc\027\uffdc\035\uffdc\036\uffdc\040" +
    "\uffdc\041\uffdc\045\uffdc\055\uffdc\001\002\000\016\020\uffbc" +
    "\021\uffbc\022\uffbc\024\uffbc\027\uffbc\035\uffbc\001\002\000" +
    "\016\020\uffc0\021\uffc0\022\uffc0\024\uffc0\027\uffc0\035\uffc0" +
    "\001\002\000\036\007\ufff3\011\ufff3\012\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\024\ufff3\027\ufff3\035\ufff3\036\ufff3\040\ufff3" +
    "\041\ufff3\045\ufff3\055\ufff3\001\002\000\004\041\256\001" +
    "\002\000\004\046\251\001\002\000\006\027\253\034\252" +
    "\001\002\000\004\046\254\001\002\000\004\041\ufff2\001" +
    "\002\000\004\027\255\001\002\000\004\041\ufff1\001\002" +
    "\000\010\025\uffec\031\264\034\uffec\001\002\000\006\025" +
    "\261\034\260\001\002\000\004\041\262\001\002\000\036" +
    "\007\ufff4\011\ufff4\012\ufff4\020\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\027\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4\045\ufff4" +
    "\055\ufff4\001\002\000\010\025\uffec\031\264\034\uffec\001" +
    "\002\000\006\025\uffef\034\uffef\001\002\000\016\026\114" +
    "\041\055\042\061\046\062\047\115\050\106\001\002\000" +
    "\006\025\uffed\034\uffed\001\002\000\006\025\uffee\034\uffee" +
    "\001\002\000\036\007\uffea\011\uffea\012\uffea\020\uffea\021" +
    "\uffea\022\uffea\024\uffea\027\uffea\035\uffea\036\uffea\040\uffea" +
    "\041\uffea\045\uffea\055\uffea\001\002\000\016\026\114\041" +
    "\055\042\061\046\062\047\115\050\106\001\002\000\020" +
    "\026\114\041\055\042\061\043\uffa5\046\062\047\115\050" +
    "\106\001\002\000\004\043\273\001\002\000\004\025\274" +
    "\001\002\000\036\007\uffa7\011\uffa7\012\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\024\uffa7\027\uffa7\035\uffa7\036\uffa7\040\uffa7" +
    "\041\uffa7\045\uffa7\055\uffa7\001\002\000\004\025\276\001" +
    "\002\000\036\007\uffeb\011\uffeb\012\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\024\uffeb\027\uffeb\035\uffeb\036\uffeb\040\uffeb\041" +
    "\uffeb\045\uffeb\055\uffeb\001\002\000\004\023\304\001\002" +
    "\000\020\003\302\026\114\041\055\042\061\046\062\047" +
    "\115\050\106\001\002\000\004\025\303\001\002\000\006" +
    "\016\uffc2\023\uffc2\001\002\000\006\016\uffc3\023\uffc3\001" +
    "\002\000\004\037\ufffd\001\002\000\040\007\uffe8\011\uffe8" +
    "\012\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\027\uffe8\035" +
    "\uffe8\036\uffe8\040\uffe8\041\uffe8\044\uffe8\045\uffe8\055\uffe8" +
    "\001\002\000\014\041\207\042\uffc4\046\203\050\204\052" +
    "\212\001\002\000\006\006\214\043\310\001\002\000\004" +
    "\015\311\001\002\000\024\007\027\011\045\012\043\020" +
    "\uffb7\036\035\040\032\041\034\045\040\055\026\001\002" +
    "\000\004\020\313\001\002\000\040\007\uffe9\011\uffe9\012" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\027\uffe9\035\uffe9" +
    "\036\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\055\uffe9\001" +
    "\002\000\016\020\uffc1\021\uffc1\022\uffc1\024\uffc1\027\uffc1" +
    "\035\uffc1\001\002\000\016\020\uffba\021\uffba\022\uffba\024" +
    "\uffba\027\uffba\035\uffba\001\002\000\036\007\uffe1\011\uffe1" +
    "\012\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\027\uffe1\035" +
    "\uffe1\036\uffe1\040\uffe1\041\uffe1\045\uffe1\055\uffe1\001\002" +
    "\000\014\041\207\042\uffc4\046\203\050\204\052\212\001" +
    "\002\000\006\006\214\043\321\001\002\000\004\015\322" +
    "\001\002\000\024\007\027\011\045\012\043\024\uffb7\036" +
    "\035\040\032\041\034\045\040\055\026\001\002\000\004" +
    "\024\324\001\002\000\036\007\uffe2\011\uffe2\012\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\024\uffe2\027\uffe2\035\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\045\uffe2\055\uffe2\001\002\000\004\025" +
    "\327\001\002\000\036\007\uffd7\011\uffd7\012\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\024\uffd7\027\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\045\uffd7\055\uffd7\001\002\000\036\007\uffd8" +
    "\011\uffd8\012\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\027" +
    "\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\045\uffd8\055\uffd8" +
    "\001\002\000\016\020\uffb8\021\uffb8\022\uffb8\024\uffb8\027" +
    "\uffb8\035\uffb8\001\002\000\004\036\332\001\002\000\004" +
    "\041\333\001\002\000\006\034\ufff8\043\ufffa\001\002\000" +
    "\024\007\027\011\045\012\043\035\uffb7\036\035\040\032" +
    "\041\034\045\040\055\026\001\002\000\004\035\300\001" +
    "\002\000\004\016\337\001\002\000\004\002\ufff6\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\010\002\006\013\003\047\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\017\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\030\005\035\006\040\010" +
    "\045\011\036\012\043\014\027\017\032\044\041\050\024" +
    "\001\001\000\026\004\030\005\035\006\040\010\045\011" +
    "\036\012\043\014\027\017\327\044\041\050\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\030\005" +
    "\035\006\040\010\045\011\036\012\043\014\027\017\314" +
    "\044\041\050\024\001\001\000\026\004\030\005\035\006" +
    "\040\010\045\011\036\012\043\014\027\017\313\044\041" +
    "\050\024\001\001\000\002\001\001\000\004\034\276\001" +
    "\001\000\002\001\001\000\004\053\246\001\001\000\026" +
    "\004\030\005\035\006\040\010\045\011\036\012\043\014" +
    "\027\017\244\044\041\050\024\001\001\000\026\004\030" +
    "\005\035\006\040\010\045\011\036\012\043\014\027\017" +
    "\243\044\041\050\024\001\001\000\002\001\001\000\030" +
    "\004\030\005\035\006\040\007\174\010\045\011\036\012" +
    "\043\014\027\017\173\044\041\050\024\001\001\000\026" +
    "\004\030\005\035\006\040\010\045\011\036\012\043\014" +
    "\027\017\171\044\041\050\024\001\001\000\002\001\001" +
    "\000\026\004\030\005\035\006\040\010\045\011\036\012" +
    "\043\014\027\017\143\044\041\050\024\001\001\000\002" +
    "\001\001\000\026\004\030\005\035\006\040\010\045\011" +
    "\036\012\043\014\027\017\046\044\041\050\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\057\026\056" +
    "\027\055\001\001\000\004\051\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\062" +
    "\026\056\027\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\065\027\055\001\001" +
    "\000\002\001\001\000\004\027\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\030\005" +
    "\035\006\040\010\045\011\036\012\043\014\027\017\076" +
    "\044\041\050\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\107\026\056\027\055\035\103\036\111" +
    "\037\110\043\136\052\137\001\001\000\002\001\001\000" +
    "\024\015\107\026\056\027\055\035\103\036\111\037\110" +
    "\043\104\045\106\046\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\036\123\040\117\041\122\042\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\117\041\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\132\001\001\000" +
    "\002\001\001\000\020\015\107\026\056\027\055\035\103" +
    "\036\111\037\110\043\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\107\026\056\027\055\035\103\036" +
    "\111\037\110\043\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\030" +
    "\005\035\006\040\010\045\011\036\012\043\014\027\017" +
    "\160\044\041\050\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\107\026\056\027\055\035\103\036" +
    "\111\037\110\043\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\030\005\035\006\040\010\045\011" +
    "\036\012\043\014\027\017\166\044\041\050\024\001\001" +
    "\000\002\001\001\000\004\024\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\030\005\035\006\040\010\045\011\036\012" +
    "\043\014\027\017\175\044\041\050\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\030\005\035\006" +
    "\040\010\045\011\036\012\043\014\027\017\232\044\041" +
    "\050\024\001\001\000\002\001\001\000\014\016\212\030" +
    "\210\031\207\032\205\033\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\030\221\031" +
    "\207\032\205\033\204\001\001\000\002\001\001\000\026" +
    "\004\030\005\035\006\040\010\045\011\036\012\043\014" +
    "\027\017\216\044\041\050\024\001\001\000\002\001\001" +
    "\000\004\007\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\223\032\205\033\204\001\001\000\002" +
    "\001\001\000\006\032\225\033\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\230\030\210\031\207" +
    "\032\205\033\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\107\025\240\026\056\027\055\035\103\036" +
    "\111\037\110\043\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\262" +
    "\001\001\000\002\001\001\000\020\015\107\026\056\027" +
    "\055\035\103\036\111\037\110\043\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\107\026\056\027\055\035\103\036\111\037\110\043\274" +
    "\001\001\000\024\015\107\026\056\027\055\035\103\036" +
    "\111\037\110\043\104\045\271\046\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\107" +
    "\026\056\027\055\035\103\036\111\037\110\043\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\306\030" +
    "\210\031\207\032\205\033\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\030\005\035\006\040\010" +
    "\045\011\036\012\043\014\027\017\311\044\041\050\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\317" +
    "\030\210\031\207\032\205\033\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\030\005\035\006\040" +
    "\010\045\011\036\012\043\014\027\017\322\044\041\050" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\030\005\035\006\040\010\045\011\036\012" +
    "\043\014\027\017\334\044\041\050\024\001\001\000\004" +
    "\034\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String error = "";
    public String errorNR = "";
    public Symbol found;
    public Node raiz;
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	//System.out.println("Se encontro: " + found.value);
    }

    public void report_fatal_error(String errorBody, Object info){ 
        errorNR = "Hay Errores no Recuperables\n";
        //found = (Symbol)info;
	//System.out.println("Linea: " + found.left + " columna: "+ found.right);
	//System.out.println("No se esperaba el Token");
    }

    public void Func_Error(){
        switch(found.sym){
            case sym.TYPE: 
                parser.error += "Error en la declaracion de la funcion\n";
                break;
            case sym.ID:
                parser.error += "Error de Sintaxis se esperaba: type\n";
                break;
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.CIERRAPAR: 
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDFU: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void If_Error(){
        switch(found.sym){
            case sym.CIERRAPAR:
            case sym.ID:
            case sym.BOOL:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: begin o end if\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Else_Error(){
        parser.error += "Error en el Else\n";
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    
    public void Loop_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: loop\n";
                break;
            case sym.CIERRAPAR:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDI: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: end loop\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }

    public void For_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: for\n";
                break;
            case sym.TYPE:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.ID: 
                parser.error += "Error de Sintaxis se esperaba: type o ,\n";
                break;
            case sym.HASTA: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.COMA: 
                parser.error += "Error de Sintaxis se esperaba: ->\n";
                break;
            case sym.OPSR: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.CIERRAPAR: 
                parser.error += "Error de Sintaxis se esperaba: +\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDF: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: end for\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }

    public void Options_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: options\n";
                break;
            case sym.ID: 
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.COMA: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.TYPE: 
                parser.error += "Error de Sintaxis se esperaba: ,\n";
                break;
            case sym.CIERRAPAR: 
                parser.error += "Error de Sintaxis se esperaba: type\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDO: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: end options\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Print_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: print\n";
                break;
            case sym.CIERRAPAR:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.FINLINE: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ; o (\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Read_Error(){
        if (found.sym == sym.FINLINE){
            parser.error += "Error de Sintaxis se esperaba: id\n";
        }else{
            parser.error += "Error de Sintaxis se esperaba: ;\n";
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    /*public void Llamado_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.CIERRAPAR:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.FINLINE: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }*/
    public void Return_Error(){
        switch(found.sym){
            case sym.FINLINE: 
                parser.error += "Error de Sintaxis se esperaba: return\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Asignacion_Error(){
        switch(found.sym){
            case sym.ASIG: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.FINLINE:
                parser.error += "Error de Sintaxis se esperaba: =\n";
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Declaracion_Error(){
        switch(found.sym){
            case sym.ID:
                parser.error += "Error de Sintaxis se esperaba: ','\n";
                break;
            case sym.COMA:
            case sym.FINLINE:
                parser.error += "Error de Sintaxis se esperaba: id o un valor\n";
                break;
            case sym.ASIG:
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.INT:
                parser.error += "Error de Sintaxis se esperaba: '='\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Main_Error(){
        switch(found.sym){
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: int_main()\n";
                break;
            default:
                parser.error += "Error en el Main\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTIN ::= VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node params = new Node("LISTA PARAMETROS");
                //params.addNode(v);
                RESULT = v;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTIN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTIN ::= VALORO COMA VALORO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listin = new Node("LISTA POSICIONES");
                listin.addNode(l);
                //params.addNode(new Node("COMA", ","));
                listin.addNode(v);
                RESULT = listin;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTIN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCEDERM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCEDERM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ACCEDERM ::= ABREPAR PARAMS CIERRAPAR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = o;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCEDERM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACCEDERM ::= ABRECOR LISTIN CIERRACOR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = l;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCEDERM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMS1 ::= VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node params = new Node("LISTA PARAMETROS");
                //params.addNode(v);
                RESULT = v;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMS1 ::= PARAMS1 COMA VALORO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node params = new Node("LISTA PARAMETROS");
                params.addNode(p);
                //params.addNode(new Node("COMA", ","));
                params.addNode(v);
                RESULT = params;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMS ::= PARAMS1 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node params = new Node("PARAMETROS ENVIO");
                //params.addNode(o);
                RESULT = o;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LLAMADO ::= ID ABREPAR PARAMS CIERRAPAR FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Node llamado = new Node("LLAMADA FUNCION");
                llamado.addNode(new Node("ID", ((String) i)));
                //llamado.addNode(new Node("ABREPAR", "("));
                llamado.addNode(o);
                //llamado.addNode(new Node("CIERRAPAR", ")"));
                //llamado.addNode(new Node("FINLINE", ";"));
                RESULT = llamado;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALORO ::= OPERACION 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALORO ::= VALOR 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR ::= BOOL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node val = new Node("VALOR");
                Node val = new Node("BOOL", ((String) v));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALOR ::= CHAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node val = new Node("VALOR");
                Node val = new Node("CHAR", ((String) v));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR ::= ARREGLO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALOR ::= MATRIZ 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALOR1 ::= INT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Node("INT", ((String) v));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALOR1 ::= BOOL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node val = new Node("VALOR");
                Node val = new Node("BOOL", ((String) v));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALOR1 ::= CHAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node val = new Node("VALOR");
                Node val = new Node("CHAR", ((String) v));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MATRIZ1 ::= ARREGLO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node mat = new Node("MATRIX");
                //Node mat = new Node("LISTA MATRIX");
                mat.addNode(v);
                RESULT = mat;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MATRIZ1 ::= MATRIZ1 COMA ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node mat = new Node("MATRIX");
                mat.addNode(a);
                //mat.addNode(new Node("COMA", ","));
                mat.addNode(v);
                RESULT = mat;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MATRIZ ::= ABRE MATRIZ1 CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //Node matriz = new Node("MATRIX");
                //matriz.addNode(new Node("ABREPAR", "{"));
                //matriz.addNode(a);
                //matriz.addNode(new Node("CIERRAPAR", "}"));
                RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARREGLO1 ::= VALOR1 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node arr = new Node("LISTA ARRAY");
                //arr.addNode(v);
                RESULT = v;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARREGLO1 ::= ARREGLO1 COMA VALOR1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node arr = new Node("ARRAY");
                arr.addNode(a);
                //arr.addNode(new Node("COMA", ","));
                arr.addNode(v);
                RESULT = arr;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARREGLO ::= ABRE ARREGLO1 CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node arreglo = new Node("ARRAY");
                //arreglo.addNode(new Node("ABRE", "{"));
                arreglo.addNode(a);
                //arreglo.addNode(new Node("CIERRA", "}"));
                RESULT = arreglo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CODE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CODE ::= READCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CODE ::= LLAMADO CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CODE ::= PRINTCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CODE ::= OPTIONSCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CODE ::= LOOPCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CODE ::= FORCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CODE ::= IFCOND ELSECOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(e);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CODE ::= IFCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CODE ::= ASIGNACION CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CODE ::= DECLARACION CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETORNO ::= RETURN error 
            {
              Object RESULT =null;
		 parser.error+="RETORNO\n";parser.Return_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RETORNO ::= RETURN VALORO FINLINE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node retorno = new Node("RETURN");
            //retorno.addNode(new Node("RETURN", "return"));
            retorno.addNode(v);
            //retorno.addNode(new Node("FINLINE", ";"));
            RESULT = retorno;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COND4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COND4 ::= NOT 
            {
              Object RESULT =null;
		
            //Node cond3 = new Node("VALOR OPERACION");
            RESULT = new Node("NOT", "!");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND4",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COND3 ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Node("INT", ((String) i));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND3 ::= ID ACCEDERM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node op2 = new Node("VALOR OPERACION");
            Node cond3 = new Node("ID", ((String) i));
            cond3.addNode(m);
            RESULT = cond3;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND3 ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            //Node cond2 = new Node("VALOR OP BOOL");
            RESULT = new Node("BOOL", ((String) b));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND3 ::= COND4 ABREPAR CONDICION CIERRAPAR 
            {
              Object RESULT =null;
		int c4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node cond3 = new Node("VALOR OP BOOL");
            cond3.addNode(c4);
            cond3.addNode(new Node("ABREPAR", "("));
            cond3.addNode(c);
            cond3.addNode(new Node("CIERRAPAR", ")"));
            RESULT = cond3;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND2 ::= COND3 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = c;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND2 ::= COND2 AND COND3 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node cond2 = new Node("AND", ((String) a));
            cond2.addNode(c1);
            cond2.addNode(c2);
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND1 ::= COND2 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node cond1 = new Node("OPERACION ANDOR");
            //cond1.addNode(c2);
            RESULT = c2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND1 ::= COND1 OR COND2 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node cond1 = new Node("OPERACION OR");
            Node cond1 = new Node("OR", ((String) a));
            cond1.addNode(c1);
            cond1.addNode(c2);
            RESULT = cond1;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICION ::= COND1 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node condicion = new Node("OPERACION OPREL");
                //condicion.addNode(c1);
                RESULT = c1;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDICION ::= CONDICION OPREL COND1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node condicion = new Node("OPERACION OPREL");
                Node condicion = new Node("OPREL", ((String) op));
                condicion.addNode(c);
                condicion.addNode(c1);
                RESULT = condicion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP2 ::= ABREPAR OPERACION CIERRAPAR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node op2 = new Node("VALOR OPERACION");
            op2.addNode(new Node("ABREPAR", "("));
            op2.addNode(o);
            op2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = o;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP2 ::= ID ACCEDERM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node op2 = new Node("VALOR OPERACION");
            Node op2 = new Node("ID", ((String) i));
            op2.addNode(m);
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP2 ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node op2 = new Node("VALOR OPERACION");
            Node op2 = new Node("INT", ((String) i));
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node operacion = new Node("OPERACION MD");
            //operacion.addNode(op2);
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP1 ::= OP1 OPMD OP2 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node operacion = new Node("OPERACION MD");
            Node operacion = new Node("OPMD", ((String) op));
            operacion.addNode(op1);
            operacion.addNode(op2);
            RESULT = operacion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OP1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node operacion = new Node("OPERACION SR");
                //operacion.addNode(op1);
                RESULT = op1;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= OPERACION OPSR OP1 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node operacion = new Node("OPERACION SR");
                Node operacion = new Node("OPSR", ((String) op));
                operacion.addNode(o);
                operacion.addNode(op1);
                RESULT = operacion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // READCOND ::= READ error 
            {
              Object RESULT =null;
		 parser.error+="READ\n";parser.Read_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READCOND",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // READCOND ::= READ ID FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node r = new Node("READ");
                r.addNode(new Node("STRING", ((String) i)));
                RESULT = r;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READCOND",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRINTER ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                //Node prin = new Node("PRINT CONTENT");
                Node prin = new Node("STRING", ((String) s));
                RESULT = prin;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRINTER ::= VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                //Node prin = new Node("PRINT CONTENT");
                //prin.addNode(v);
                RESULT = v;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINTCOND ::= PRINT error 
            {
              Object RESULT =null;
		 parser.error+="PRINT\n";parser.Print_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Node printcond = new Node("PRINT");
                //printcond.addNode(new Node("PRINT", "print"));
                //printcond.addNode(new Node("ABREPAR", "("));
                printcond.addNode(p);
                //printcond.addNode(new Node("CIERRAPAR", ")"));
                //printcond.addNode(new Node("FINLINE", ";"));
                RESULT = printcond;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPTT ::= DEFOPT ABRE CODE CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node optt = new Node("BLOQUE DEFAULT OPTION");
            //optt.addNode(new Node("DEFOPT", "opt_def"));
            //optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            //optt.addNode(new Node("CIERRA", "}"));
            RESULT = optt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPTT ::= OPT ABRECOR VALORO CIERRACOR ABRE CODE CIERRA OPTT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node optt = new Node("BLOQUE OPTION");
            //optt.addNode(new Node("OPTION", "opt"));
            //optt.addNode(new Node("ABRECOR", "["));
            optt.addNode(v);
            //optt.addNode(new Node("CIERRACOR", "]"));
            //optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            //optt.addNode(new Node("CIERRA", "}"));
            optt.addNode(o);
            RESULT = optt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPTIONSCOND ::= OPTIONS error 
            {
              Object RESULT =null;
		 parser.error+="OPTIONS\n";parser.Options_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT ENDO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Node optionscond = new Node("BLOQUE OPTIONS");
                   // optionscond.addNode(new Node("OPTIONS", "options"));
                  //  optionscond.addNode(new Node("ABREPAR", "("));
                    optionscond.addNode(new Node("ID", ((String) i)));
                 //   optionscond.addNode(new Node("COMA", ","));
                    optionscond.addNode(new Node("TYPE", ((String) t)));
                 //   optionscond.addNode(new Node("CIERRAPAR", ")"));
                 //   optionscond.addNode(new Node("BEGIN", "begin"));
                    optionscond.addNode(o);
                 //   optionscond.addNode(new Node("ENDO", "end options"));
                    RESULT = optionscond;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LOOPCOND ::= LOOP error 
            {
              Object RESULT =null;
		 parser.error+="LOOP\n";parser.Loop_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node loopcond = new Node("BLOQUE LOOP");
                //loopcond.addNode(new Node("LOOP", "loop"));
               // loopcond.addNode(new Node("ABREPAR", "("));
                loopcond.addNode(c);
               // loopcond.addNode(new Node("CIERRAPAR", ")"));
              //  loopcond.addNode(new Node("BEGIN", "begin"));
                loopcond.addNode(code);
               // loopcond.addNode(new Node("ENDL", "end loop"));
                RESULT = loopcond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORCOND ::= FOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.error+="FOR\n";parser.For_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE ENDF 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node forcond = new Node("BLOQUE FOR");
                //forcond.addNode(new Node("FOR", "for"));
                //forcond.addNode(new Node("ABREPAR", "("));
                forcond.addNode(new Node("TYPE", ((String) t)));
                forcond.addNode(new Node("ID", ((String) i)));
                forcond.addNode(new Node("HASTA", "->"));
                forcond.addNode(o);
                //forcond.addNode(new Node("COMA", ","));
                forcond.addNode(new Node("ID", ((String) id)));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("OPSR", "+"));
               // forcond.addNode(new Node("CIERRAPAR", ")"));
              //  forcond.addNode(new Node("BEGIN", "begin"));
                forcond.addNode(c);
              //  forcond.addNode(new Node("ENDF", "end for"));
                RESULT = forcond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELSECOND ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.error+="ELSE\n";parser.Else_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELSECOND ::= ELSE BEGIN CODE ENDE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node elsecond = new Node("BLOQUE ELSE");
               // elsecond = new Node("ELSE", "else");
                //elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(c);
               // elsecond.addNode(new Node("ENDE", "end else"));
                RESULT = elsecond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDE ELSECOND 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node elsecond = new Node("BLOQUE ELSE IF");
               // elsecond.addNode(new Node("ELSE", "else"));
               // elsecond.addNode(new Node("IF", "if"));
               // elsecond.addNode(new Node("ABREPAR", "("));
                elsecond.addNode(c);
               // elsecond.addNode(new Node("CIERRAPAR", ")"));
               // elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(code);
                //elsecond.addNode(new Node("ENDE", "end else"));
                elsecond.addNode(e);
                RESULT = elsecond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFCOND ::= IF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.error+="IF\n";parser.If_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node ifcond = new Node("BLOQUE IF");
        //    ifcond.addNode(new Node("IF", "if"));
        //    ifcond.addNode(new Node("ABREPAR", "("));
            ifcond.addNode(c);
        //    ifcond.addNode(new Node("CIERRAPAR", ")"));
        //    ifcond.addNode(new Node("BEGIN", "begin"));
            ifcond.addNode(code);
          //  ifcond.addNode(new Node("ENDI", "end if"));
            RESULT = ifcond;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.error += "ASIGNACION\n";parser.Asignacion_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ID ASIG VALORO FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node asignacion = new Node("ASIGNACION");
                asignacion.addNode(new Node("ID", ((String) i)));
                asignacion.addNode(new Node("ASIG", "="));
                asignacion.addNode(v);
                //asignacion.addNode(new Node("FINLINE", ";"));
                RESULT = asignacion;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL2 ::= ASIG VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl2 = new Node("DECLARACION CON ASIGNACION");
            decl2.addNode(new Node("ASIG", "="));
            decl2.addNode(v);
            RESULT = decl2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECL ::= ID DECL2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECL ::= DECL COMA ID DECL2 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(d);
          //  decl.addNode(new Node("COMA", ","));
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIZE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIZE",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIZE ::= ABRE INT COMA INT CIERRA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            Node size = new Node("SIZE");
            size.addNode(new Node("INT", ((String) i)));
            size.addNode(new Node("INT", ((String) j)));
            RESULT = size;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIZE",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SIZE ::= ABRE INT CIERRA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new Node("INT", ((String) i)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIZE",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= TYPE error 
            {
              Object RESULT =null;
		parser.error += "DECLARACION\n";parser.Declaracion_Error();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TYPE SIZE DECL FINLINE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Node declaracion = new Node("DECLARACION");
                    declaracion.addNode(new Node("TYPE", ((String) t)));
                    declaracion.addNode(d);
                    declaracion.addNode(s);
                   // declaracion.addNode(new Node("FINLINE", ";"));
                    RESULT = declaracion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAINCOND ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.error += "MAIN\n";parser.Main_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAINCOND ::= FUNCION FUNC MAIN BEGIN CODE RETORNO ENDM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node maincond = new Node("MAIN");
                maincond.addNode(f);
               // maincond.addNode(new Node("FUNC", "func"));
                //maincond.addNode(new Node("MAIN", "int_main()"));
              //  maincond.addNode(new Node("BEGIN", "begin"));
                maincond.addNode(code);
                maincond.addNode(retorno);
               // maincond.addNode(new Node("ENDM", "end main"));
                RESULT = maincond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTATYPES ::= TYPE ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTATYPES ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(lista);
                //listatypes.addNode(new Node("COMA", ","));
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAPARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAPARAM ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;
		int listatypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listatypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object listatypes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(listatypes);
                //listaparam.addNode(new Node("COMA", ","));
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAPARAM ::= TYPE ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION2 ::= FUNC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.error += "FUNCION\n";parser.Func_Error();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO ENDFU 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listaparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object listaparam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node funcion2 = new Node("FUNCION");
                //funcion2.addNode(new Node("FUNC", "func"));
                funcion2.addNode(new Node("TYPE", ((String) t)));
                funcion2.addNode(new Node("ID", ((String) i)));
                //funcion2.addNode(new Node("ABREPAR", "("));
                funcion2.addNode(listaparam);
                //funcion2.addNode(new Node("CIERRAPAR", ")"));
                //funcion2.addNode(new Node("BEGIN", "begin"));
                funcion2.addNode(code);
                funcion2.addNode(r);
                //funcion2.addNode(new Node("ENDFU", "end func"));
                RESULT = funcion2;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION ::= FUNCION FUNCION2 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node funcion = new Node("GENERAR FUNCION");
                funcion.addNode(f);
                funcion.addNode(ff);
                RESULT = funcion;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ORIGIN ::= MAINCOND 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.raiz = (Node)m;      
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGIN",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ORIGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

