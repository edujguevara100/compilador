
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 15 17:45:10 CST 2020
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 15 17:45:10 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\034\003\000\002\034" +
    "\002\000\002\002\004\000\002\003\014\000\002\003\004" +
    "\000\002\020\004\000\002\020\006\000\002\020\002\000" +
    "\002\021\006\000\002\021\004\000\002\013\011\000\002" +
    "\013\003\000\002\004\005\000\002\004\005\000\002\022" +
    "\006\000\002\022\004\000\002\023\004\000\002\023\002" +
    "\000\002\005\006\000\002\005\006\000\002\006\011\000" +
    "\002\006\004\000\002\007\013\000\002\007\006\000\002" +
    "\007\004\000\002\010\020\000\002\010\004\000\002\011" +
    "\011\000\002\011\004\000\002\012\013\000\002\012\004" +
    "\000\002\024\012\000\002\024\006\000\002\024\004\000" +
    "\002\014\007\000\002\014\004\000\002\025\003\000\002" +
    "\025\003\000\002\015\005\000\002\015\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\005\000\002\016\005\000\002\016\003\000" +
    "\002\030\005\000\002\030\003\000\002\031\006\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\002\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\033\005\000\002" +
    "\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\006\003\006\036\uffff\001\002\000\004\002" +
    "\246\001\002\000\004\036\011\001\002\000\004\002\ufff5" +
    "\001\002\000\004\036\000\001\002\000\004\036\ufffe\001" +
    "\002\000\010\003\012\007\013\035\014\001\002\000\004" +
    "\036\ufffc\001\002\000\004\014\242\001\002\000\004\040" +
    "\015\001\002\000\004\041\016\001\002\000\006\035\021" +
    "\042\ufff9\001\002\000\004\033\237\001\002\000\004\042" +
    "\023\001\002\000\004\040\022\001\002\000\006\033\ufff7" +
    "\042\ufffb\001\002\000\004\014\024\001\002\000\020\006" +
    "\031\010\027\011\032\035\035\037\034\040\036\044\041" +
    "\001\002\000\004\034\232\001\002\000\020\006\031\010" +
    "\027\011\032\035\035\037\034\040\036\044\041\001\002" +
    "\000\006\003\212\041\213\001\002\000\020\006\031\010" +
    "\027\011\032\035\035\037\034\040\036\044\041\001\002" +
    "\000\006\003\202\041\203\001\002\000\006\003\154\041" +
    "\155\001\002\000\020\006\031\010\027\011\032\035\035" +
    "\037\034\040\036\044\041\001\002\000\006\003\144\041" +
    "\145\001\002\000\004\040\132\001\002\000\004\030\126" +
    "\001\002\000\020\006\031\010\027\011\032\035\035\037" +
    "\034\040\036\044\041\001\002\000\020\006\031\010\027" +
    "\011\032\035\035\037\034\040\036\044\041\001\002\000" +
    "\006\003\102\041\103\001\002\000\020\006\031\010\027" +
    "\011\032\035\035\037\034\040\036\044\041\001\002\000" +
    "\022\006\031\010\027\011\032\035\035\037\034\040\036" +
    "\043\045\044\041\001\002\000\016\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\026\uffc8\034\uffc8\001\002\000\010\003\050" +
    "\014\051\037\052\001\002\000\020\006\031\010\027\011" +
    "\032\035\035\037\034\040\036\044\041\001\002\000\016" +
    "\017\uffc7\020\uffc7\021\uffc7\023\uffc7\026\uffc7\034\uffc7\001" +
    "\002\000\020\006\uffe8\010\uffe8\011\uffe8\035\uffe8\037\uffe8" +
    "\040\uffe8\044\uffe8\001\002\000\020\006\031\010\027\011" +
    "\032\035\035\037\034\040\036\044\041\001\002\000\004" +
    "\041\053\001\002\000\012\040\054\041\uffcb\045\061\047" +
    "\057\001\002\000\010\004\uffcd\005\uffcd\042\uffcd\001\002" +
    "\000\006\005\067\042\072\001\002\000\004\041\065\001" +
    "\002\000\004\041\uffcc\001\002\000\010\004\uffd0\005\uffd0" +
    "\042\uffd0\001\002\000\010\004\uffce\005\uffce\042\uffce\001" +
    "\002\000\010\004\063\005\uffd2\042\uffd2\001\002\000\012" +
    "\040\054\041\uffcb\045\061\047\057\001\002\000\010\004" +
    "\uffd1\005\uffd1\042\uffd1\001\002\000\012\040\054\041\uffcb" +
    "\045\061\047\057\001\002\000\006\005\067\042\070\001" +
    "\002\000\012\040\054\041\uffcb\045\061\047\057\001\002" +
    "\000\010\004\uffcf\005\uffcf\042\uffcf\001\002\000\010\004" +
    "\063\005\uffd3\042\uffd3\001\002\000\004\014\073\001\002" +
    "\000\020\006\031\010\027\011\032\035\035\037\034\040" +
    "\036\044\041\001\002\000\004\020\075\001\002\000\004" +
    "\043\045\001\002\000\020\006\uffea\010\uffea\011\uffea\035" +
    "\uffea\037\uffea\040\uffea\044\uffea\001\002\000\004\020\100" +
    "\001\002\000\020\006\uffe9\010\uffe9\011\uffe9\035\uffe9\037" +
    "\uffe9\040\uffe9\044\uffe9\001\002\000\016\017\uffc6\020\uffc6" +
    "\021\uffc6\023\uffc6\026\uffc6\034\uffc6\001\002\000\020\006" +
    "\uffdd\010\uffdd\011\uffdd\035\uffdd\037\uffdd\040\uffdd\044\uffdd" +
    "\001\002\000\012\040\104\041\113\045\111\046\105\001" +
    "\002\000\016\003\uffd5\024\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\042\uffd5\001\002\000\004\042\uffdb\001\002\000\016\003" +
    "\uffd7\024\uffd7\031\uffd7\032\uffd7\033\uffd7\042\uffd7\001\002" +
    "\000\004\042\122\001\002\000\016\003\uffd9\024\uffd9\031" +
    "\120\032\uffd9\033\uffd9\042\uffd9\001\002\000\016\003\uffd6" +
    "\024\uffd6\031\uffd6\032\uffd6\033\uffd6\042\uffd6\001\002\000" +
    "\006\032\115\042\uffdc\001\002\000\010\040\104\041\113" +
    "\045\111\001\002\000\006\032\115\042\116\001\002\000" +
    "\010\040\104\041\113\045\111\001\002\000\016\003\uffd4" +
    "\024\uffd4\031\uffd4\032\uffd4\033\uffd4\042\uffd4\001\002\000" +
    "\016\003\uffda\024\uffda\031\120\032\uffda\033\uffda\042\uffda" +
    "\001\002\000\010\040\104\041\113\045\111\001\002\000" +
    "\016\003\uffd8\024\uffd8\031\uffd8\032\uffd8\033\uffd8\042\uffd8" +
    "\001\002\000\004\024\123\001\002\000\020\006\uffde\010" +
    "\uffde\011\uffde\035\uffde\037\uffde\040\uffde\044\uffde\001\002" +
    "\000\016\017\uffc3\020\uffc3\021\uffc3\023\uffc3\026\uffc3\034" +
    "\uffc3\001\002\000\016\017\uffc9\020\uffc9\021\uffc9\023\uffc9" +
    "\026\uffc9\034\uffc9\001\002\000\010\040\104\041\113\045" +
    "\111\001\002\000\010\003\130\024\131\032\115\001\002" +
    "\000\020\006\uffed\010\uffed\011\uffed\035\uffed\037\uffed\040" +
    "\uffed\044\uffed\001\002\000\020\006\uffee\010\uffee\011\uffee" +
    "\035\uffee\037\uffee\040\uffee\044\uffee\001\002\000\012\003" +
    "\uffef\024\uffef\030\141\033\uffef\001\002\000\010\003\135" +
    "\024\136\033\134\001\002\000\004\040\137\001\002\000" +
    "\020\006\ufff3\010\ufff3\011\ufff3\035\ufff3\037\ufff3\040\ufff3" +
    "\044\ufff3\001\002\000\020\006\ufff4\010\ufff4\011\ufff4\035" +
    "\ufff4\037\ufff4\040\ufff4\044\ufff4\001\002\000\012\003\uffef" +
    "\024\uffef\030\141\033\uffef\001\002\000\010\003\ufff2\024" +
    "\ufff2\033\ufff2\001\002\000\010\040\104\041\113\045\111" +
    "\001\002\000\012\003\ufff0\024\ufff0\032\115\033\ufff0\001" +
    "\002\000\010\003\ufff1\024\ufff1\033\ufff1\001\002\000\022" +
    "\006\uffeb\010\uffeb\011\uffeb\035\uffeb\037\uffeb\040\uffeb\043" +
    "\uffeb\044\uffeb\001\002\000\012\040\054\041\uffcb\045\061" +
    "\047\057\001\002\000\006\005\067\042\147\001\002\000" +
    "\004\014\150\001\002\000\020\006\031\010\027\011\032" +
    "\035\035\037\034\040\036\044\041\001\002\000\004\017" +
    "\152\001\002\000\022\006\uffec\010\uffec\011\uffec\035\uffec" +
    "\037\uffec\040\uffec\043\uffec\044\uffec\001\002\000\016\017" +
    "\uffc4\020\uffc4\021\uffc4\023\uffc4\026\uffc4\034\uffc4\001\002" +
    "\000\020\006\uffe2\010\uffe2\011\uffe2\035\uffe2\037\uffe2\040" +
    "\uffe2\044\uffe2\001\002\000\004\040\156\001\002\000\004" +
    "\033\157\001\002\000\004\035\160\001\002\000\004\042" +
    "\161\001\002\000\004\014\162\001\002\000\006\012\163" +
    "\013\164\001\002\000\006\003\172\041\173\001\002\000" +
    "\004\025\167\001\002\000\004\016\166\001\002\000\020" +
    "\006\uffe3\010\uffe3\011\uffe3\035\uffe3\037\uffe3\040\uffe3\044" +
    "\uffe3\001\002\000\020\006\031\010\027\011\032\035\035" +
    "\037\034\040\036\044\041\001\002\000\004\026\171\001" +
    "\002\000\004\016\uffe0\001\002\000\004\016\uffdf\001\002" +
    "\000\004\045\174\001\002\000\004\042\175\001\002\000" +
    "\004\025\176\001\002\000\020\006\031\010\027\011\032" +
    "\035\035\037\034\040\036\044\041\001\002\000\004\026" +
    "\200\001\002\000\006\012\163\013\164\001\002\000\004" +
    "\016\uffe1\001\002\000\020\006\uffe4\010\uffe4\011\uffe4\035" +
    "\uffe4\037\uffe4\040\uffe4\044\uffe4\001\002\000\012\040\054" +
    "\041\uffcb\045\061\047\057\001\002\000\006\005\067\042" +
    "\205\001\002\000\004\014\206\001\002\000\020\006\031" +
    "\010\027\011\032\035\035\037\034\040\036\044\041\001" +
    "\002\000\004\023\210\001\002\000\020\006\uffe5\010\uffe5" +
    "\011\uffe5\035\uffe5\037\uffe5\040\uffe5\044\uffe5\001\002\000" +
    "\016\017\uffca\020\uffca\021\uffca\023\uffca\026\uffca\034\uffca" +
    "\001\002\000\020\006\uffe6\010\uffe6\011\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\044\uffe6\001\002\000\004\035\214\001\002" +
    "\000\004\040\215\001\002\000\004\027\216\001\002\000" +
    "\010\040\104\041\113\045\111\001\002\000\006\032\115" +
    "\033\220\001\002\000\004\040\221\001\002\000\004\032" +
    "\222\001\002\000\004\032\223\001\002\000\004\042\224" +
    "\001\002\000\004\014\225\001\002\000\020\006\031\010" +
    "\027\011\032\035\035\037\034\040\036\044\041\001\002" +
    "\000\004\021\227\001\002\000\020\006\uffe7\010\uffe7\011" +
    "\uffe7\035\uffe7\037\uffe7\040\uffe7\044\uffe7\001\002\000\016" +
    "\017\uffc5\020\uffc5\021\uffc5\023\uffc5\026\uffc5\034\uffc5\001" +
    "\002\000\004\022\236\001\002\000\012\003\233\040\104" +
    "\041\113\045\111\001\002\000\006\015\uffc1\022\uffc1\001" +
    "\002\000\006\024\235\032\115\001\002\000\006\015\uffc2" +
    "\022\uffc2\001\002\000\004\036\ufffd\001\002\000\004\035" +
    "\240\001\002\000\004\040\241\001\002\000\006\033\ufff8" +
    "\042\ufffa\001\002\000\020\006\031\010\027\011\032\035" +
    "\035\037\034\040\036\044\041\001\002\000\004\034\232" +
    "\001\002\000\004\015\245\001\002\000\004\002\ufff6\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\010\002\006\013\003\034\004\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\017\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\027\005\036\006\042\010" +
    "\041\011\025\012\032\014\037\017\024\001\001\000\004" +
    "\033\230\001\001\000\022\004\027\005\036\006\042\010" +
    "\041\011\025\012\032\014\037\017\227\001\001\000\002" +
    "\001\001\000\022\004\027\005\036\006\042\010\041\011" +
    "\025\012\032\014\037\017\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\027\005\036\006\042\010" +
    "\041\011\025\012\032\014\037\017\152\001\001\000\002" +
    "\001\001\000\004\022\132\001\001\000\002\001\001\000" +
    "\022\004\027\005\036\006\042\010\041\011\025\012\032" +
    "\014\037\017\124\001\001\000\022\004\027\005\036\006" +
    "\042\010\041\011\025\012\032\014\037\017\123\001\001" +
    "\000\002\001\001\000\022\004\027\005\036\006\042\010" +
    "\041\011\025\012\032\014\037\017\100\001\001\000\024" +
    "\004\027\005\036\006\042\007\045\010\041\011\025\012" +
    "\032\014\037\017\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\027\005\036\006\042\010\041\011" +
    "\025\012\032\014\037\017\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\027\005\036\006\042\010" +
    "\041\011\025\012\032\014\037\017\076\001\001\000\002" +
    "\001\001\000\012\016\054\030\061\031\057\032\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\063\032\055\001\001\000\002" +
    "\001\001\000\012\016\065\030\061\031\057\032\055\001" +
    "\001\000\002\001\001\000\010\030\070\031\057\032\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\027\005\036\006\042\010\041\011\025" +
    "\012\032\014\037\017\073\001\001\000\002\001\001\000" +
    "\004\007\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\111\025\106\026\107\027\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\113\026\107\027\105\001\001\000\002\001" +
    "\001\000\006\026\116\027\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\126\026\107\027\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\137" +
    "\001\001\000\002\001\001\000\010\015\141\026\107\027" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\145\030\061\031\057\032\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\027" +
    "\005\036\006\042\010\041\011\025\012\032\014\037\017" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\027" +
    "\005\036\006\042\010\041\011\025\012\032\014\037\017" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\027\005\036\006\042\010\041\011\025" +
    "\012\032\014\037\017\176\001\001\000\002\001\001\000" +
    "\004\024\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\203\030\061\031\057\032\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\027\005\036" +
    "\006\042\010\041\011\025\012\032\014\037\017\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\216\026\107\027\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\027\005\036\006\042\010\041\011\025\012\032\014" +
    "\037\017\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\233\026" +
    "\107\027\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\027\005\036" +
    "\006\042\010\041\011\025\012\032\014\037\017\242\001" +
    "\001\000\004\033\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String error = "";
    public void report_error(String msj, Object o){
      StringBuffer errorHead = new StringBuffer("Error Sintactico");
      if(o instanceof java_cup.runtime.Symbol){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) o);
        if (s.left >= 0) {
          errorHead.append(" en la linea: "+(s.right+1));
          if (s.right >= 0){
            errorHead.append(", columna: "+(s.left+1));
          }
        }
        errorHead.append(" en el token: "+(s.value));
        errorHead.append(" -> "+msj);
      }
    System.out.println(errorHead);
    }
    
    public void syntax_error(Symbol cur_token){
        System.out.printf("Error en linea:%d, columna:%d, se encontro el token:%s \n",
        cur_token.right+1,
        cur_token.left+1,
        cur_token.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RETORNO ::= RETURN error 
            {
              Object RESULT =null;
		 System.out.println("Error en el RETURN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RETORNO ::= RETURN OPERACION FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CODE ::= PRINTCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CODE ::= OPTIONSCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CODE ::= LOOPCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CODE ::= FORCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CODE ::= IFCOND ELSECOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CODE ::= IFCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CODE ::= ASIGNACION CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CODE ::= DECLARACION CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND3 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND2 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND2 ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND2 ::= COND3 ABREPAR CONDICION CIERRAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND1 ::= COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND1 ::= COND1 ANDOR COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICION ::= CONDICION OPREL COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP2 ::= ABREPAR OPERACION CIERRAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP2 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP2 ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP1 ::= OP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP1 ::= OP1 OPMD OP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= OP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= OPERACION OPSR OP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRINTER ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINTER ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRINTCOND ::= PRINT error 
            {
              Object RESULT =null;
		 System.out.println("Error en el PRINT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPTT ::= OPT error 
            {
              Object RESULT =null;
		 System.out.println("Error en OPT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPTT ::= DEFOPT ABRE CODE CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPTT ::= OPT ABREPAR VALOR CIERRAPAR ABRE CODE CIERRA OPTT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTIONSCOND ::= OPTIONS error 
            {
              Object RESULT =null;
		 System.out.println("Error en OPTIONS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT ENDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LOOPCOND ::= LOOP error 
            {
              Object RESULT =null;
		 System.out.println("Error en el LOOP"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORCOND ::= FOR error 
            {
              Object RESULT =null;
		 System.out.println("Error en el FOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE ENDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSECOND ::= ELSE error 
            {
              Object RESULT =null;
		 System.out.println("Error en el ELSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSECOND ::= ELSE BEGIN CODE ENDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDE ELSECOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IFCOND ::= IF error 
            {
              Object RESULT =null;
		 System.out.println("Error en el IF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= ID ASIG OPERACION error 
            {
              Object RESULT =null;
		 System.out.println("Error en la asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= ID ASIG OPERACION FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECL2 ::= ASIG OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL ::= ID DECL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECL ::= DECL COMA ID DECL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= TYPE DECL error 
            {
              Object RESULT =null;
		 System.out.println("Error en la declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TYPE DECL FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAINCOND ::= error 
            {
              Object RESULT =null;
		 System.out.println("Error en la declaracion del MAIN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAINCOND ::= FUNCION1 FUNC MAIN BEGIN CODE RETORNO ENDM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTATYPES ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTATYPES ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAPARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAPARAM ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAPARAM ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION2 ::= FUNC error 
            {
              Object RESULT =null;
		 System.out.println("Error en la declaracion de la funcion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO ENDFU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION ::= FUNCION1 FUNCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FUNCION1 ::= FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAINCOND EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

