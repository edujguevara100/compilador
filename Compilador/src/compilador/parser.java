
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 15 14:47:56 CST 2020
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 15 14:47:56 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\014\000\002\020\004\000\002\020\006" +
    "\000\002\020\002\000\002\021\006\000\002\021\004\000" +
    "\002\013\011\000\002\004\005\000\002\022\006\000\002" +
    "\022\004\000\002\023\004\000\002\023\002\000\002\005" +
    "\006\000\002\006\011\000\002\007\012\000\002\007\006" +
    "\000\002\010\020\000\002\011\011\000\002\012\013\000" +
    "\002\024\012\000\002\024\006\000\002\014\007\000\002" +
    "\025\003\000\002\025\003\000\002\015\005\000\002\015" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\016\005\000" +
    "\002\016\003\000\002\030\005\000\002\030\003\000\002" +
    "\031\006\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\002\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\002\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\036\uffff\001\002\000\004\002\230\001" +
    "\002\000\004\036\006\001\002\000\006\007\010\035\011" +
    "\001\002\000\004\036\000\001\002\000\004\014\224\001" +
    "\002\000\004\040\012\001\002\000\004\041\013\001\002" +
    "\000\006\035\016\042\ufffb\001\002\000\004\033\221\001" +
    "\002\000\004\042\020\001\002\000\004\040\017\001\002" +
    "\000\006\033\ufff9\042\ufffd\001\002\000\004\014\021\001" +
    "\002\000\022\006\027\010\024\011\026\034\uffce\035\032" +
    "\037\031\040\033\044\036\001\002\000\004\034\215\001" +
    "\002\000\034\006\027\010\024\011\026\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031\040" +
    "\033\044\036\001\002\000\004\041\176\001\002\000\034" +
    "\006\027\010\024\011\026\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\026\uffce\034\uffce\035\032\037\031\040\033\044\036" +
    "\001\002\000\004\041\151\001\002\000\004\041\143\001" +
    "\002\000\034\006\027\010\024\011\026\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031\040" +
    "\033\044\036\001\002\000\004\041\134\001\002\000\004" +
    "\040\123\001\002\000\004\030\120\001\002\000\034\006" +
    "\027\010\024\011\026\017\uffce\020\uffce\021\uffce\023\uffce" +
    "\026\uffce\034\uffce\035\032\037\031\040\033\044\036\001" +
    "\002\000\034\006\027\010\024\011\026\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031\040" +
    "\033\044\036\001\002\000\004\041\075\001\002\000\034" +
    "\006\027\010\024\011\026\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\026\uffce\034\uffce\035\032\037\031\040\033\044\036" +
    "\001\002\000\036\006\027\010\024\011\026\017\uffce\020" +
    "\uffce\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031" +
    "\040\033\043\042\044\036\001\002\000\016\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\026\uffd4\034\uffd4\001\002\000\006" +
    "\014\045\037\046\001\002\000\034\006\027\010\024\011" +
    "\026\017\uffce\020\uffce\021\uffce\023\uffce\026\uffce\034\uffce" +
    "\035\032\037\031\040\033\044\036\001\002\000\016\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\026\uffd3\034\uffd3\001\002" +
    "\000\022\006\027\010\024\011\026\020\uffce\035\032\037" +
    "\031\040\033\044\036\001\002\000\004\041\047\001\002" +
    "\000\012\040\050\041\uffd7\045\054\047\053\001\002\000" +
    "\010\004\uffd9\005\uffd9\042\uffd9\001\002\000\006\005\063" +
    "\042\066\001\002\000\004\041\061\001\002\000\004\041" +
    "\uffd8\001\002\000\010\004\uffda\005\uffda\042\uffda\001\002" +
    "\000\010\004\uffdc\005\uffdc\042\uffdc\001\002\000\010\004" +
    "\057\005\uffde\042\uffde\001\002\000\012\040\050\041\uffd7" +
    "\045\054\047\053\001\002\000\010\004\uffdd\005\uffdd\042" +
    "\uffdd\001\002\000\012\040\050\041\uffd7\045\054\047\053" +
    "\001\002\000\006\005\063\042\064\001\002\000\012\040" +
    "\050\041\uffd7\045\054\047\053\001\002\000\010\004\uffdb" +
    "\005\uffdb\042\uffdb\001\002\000\010\004\057\005\uffdf\042" +
    "\uffdf\001\002\000\004\014\067\001\002\000\022\006\027" +
    "\010\024\011\026\020\uffce\035\032\037\031\040\033\044" +
    "\036\001\002\000\004\020\071\001\002\000\034\006\ufff0" +
    "\010\ufff0\011\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\026" +
    "\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\044\ufff0\001\002" +
    "\000\004\020\073\001\002\000\034\006\uffef\010\uffef\011" +
    "\uffef\017\uffef\020\uffef\021\uffef\023\uffef\026\uffef\034\uffef" +
    "\035\uffef\037\uffef\040\uffef\044\uffef\001\002\000\016\017" +
    "\uffd2\020\uffd2\021\uffd2\023\uffd2\026\uffd2\034\uffd2\001\002" +
    "\000\012\040\076\041\105\045\103\046\077\001\002\000" +
    "\014\024\uffe1\031\uffe1\032\uffe1\033\uffe1\042\uffe1\001\002" +
    "\000\004\042\uffe7\001\002\000\014\024\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\042\uffe3\001\002\000\004\042\114\001\002" +
    "\000\014\024\uffe5\031\112\032\uffe5\033\uffe5\042\uffe5\001" +
    "\002\000\014\024\uffe2\031\uffe2\032\uffe2\033\uffe2\042\uffe2" +
    "\001\002\000\006\032\110\042\uffe8\001\002\000\010\040" +
    "\076\041\105\045\103\001\002\000\006\032\110\042\107" +
    "\001\002\000\014\024\uffe0\031\uffe0\032\uffe0\033\uffe0\042" +
    "\uffe0\001\002\000\010\040\076\041\105\045\103\001\002" +
    "\000\014\024\uffe6\031\112\032\uffe6\033\uffe6\042\uffe6\001" +
    "\002\000\010\040\076\041\105\045\103\001\002\000\014" +
    "\024\uffe4\031\uffe4\032\uffe4\033\uffe4\042\uffe4\001\002\000" +
    "\004\024\115\001\002\000\034\006\uffe9\010\uffe9\011\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\023\uffe9\026\uffe9\034\uffe9\035" +
    "\uffe9\037\uffe9\040\uffe9\044\uffe9\001\002\000\016\017\uffcf" +
    "\020\uffcf\021\uffcf\023\uffcf\026\uffcf\034\uffcf\001\002\000" +
    "\016\017\uffd5\020\uffd5\021\uffd5\023\uffd5\026\uffd5\034\uffd5" +
    "\001\002\000\010\040\076\041\105\045\103\001\002\000" +
    "\006\024\122\032\110\001\002\000\034\006\ufff2\010\ufff2" +
    "\011\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\026\ufff2\034" +
    "\ufff2\035\ufff2\037\ufff2\040\ufff2\044\ufff2\001\002\000\010" +
    "\024\ufff3\030\131\033\ufff3\001\002\000\006\024\126\033" +
    "\125\001\002\000\004\040\127\001\002\000\034\006\ufff7" +
    "\010\ufff7\011\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\026" +
    "\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\044\ufff7\001\002" +
    "\000\010\024\ufff3\030\131\033\ufff3\001\002\000\006\024" +
    "\ufff6\033\ufff6\001\002\000\010\040\076\041\105\045\103" +
    "\001\002\000\010\024\ufff4\032\110\033\ufff4\001\002\000" +
    "\006\024\ufff5\033\ufff5\001\002\000\012\040\050\041\uffd7" +
    "\045\054\047\053\001\002\000\006\005\063\042\136\001" +
    "\002\000\004\014\137\001\002\000\022\006\027\010\024" +
    "\011\026\017\uffce\035\032\037\031\040\033\044\036\001" +
    "\002\000\004\017\141\001\002\000\036\006\ufff1\010\ufff1" +
    "\011\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1\026\ufff1\034" +
    "\ufff1\035\ufff1\037\ufff1\040\ufff1\043\ufff1\044\ufff1\001\002" +
    "\000\016\017\uffd0\020\uffd0\021\uffd0\023\uffd0\026\uffd0\034" +
    "\uffd0\001\002\000\012\040\050\041\uffd7\045\054\047\053" +
    "\001\002\000\006\005\063\042\145\001\002\000\004\014" +
    "\146\001\002\000\022\006\027\010\024\011\026\023\uffce" +
    "\035\032\037\031\040\033\044\036\001\002\000\004\023" +
    "\150\001\002\000\034\006\uffed\010\uffed\011\uffed\017\uffed" +
    "\020\uffed\021\uffed\023\uffed\026\uffed\034\uffed\035\uffed\037" +
    "\uffed\040\uffed\044\uffed\001\002\000\004\040\152\001\002" +
    "\000\004\033\153\001\002\000\004\035\154\001\002\000" +
    "\004\042\155\001\002\000\004\014\156\001\002\000\006" +
    "\012\157\013\160\001\002\000\004\041\166\001\002\000" +
    "\004\025\163\001\002\000\004\016\162\001\002\000\034" +
    "\006\uffec\010\uffec\011\uffec\017\uffec\020\uffec\021\uffec\023" +
    "\uffec\026\uffec\034\uffec\035\uffec\037\uffec\040\uffec\044\uffec" +
    "\001\002\000\022\006\027\010\024\011\026\026\uffce\035" +
    "\032\037\031\040\033\044\036\001\002\000\004\026\165" +
    "\001\002\000\004\016\uffea\001\002\000\004\045\167\001" +
    "\002\000\004\042\170\001\002\000\004\025\171\001\002" +
    "\000\022\006\027\010\024\011\026\026\uffce\035\032\037" +
    "\031\040\033\044\036\001\002\000\004\026\173\001\002" +
    "\000\006\012\157\013\160\001\002\000\004\016\uffeb\001" +
    "\002\000\016\017\uffd6\020\uffd6\021\uffd6\023\uffd6\026\uffd6" +
    "\034\uffd6\001\002\000\004\035\177\001\002\000\004\040" +
    "\200\001\002\000\004\027\201\001\002\000\010\040\076" +
    "\041\105\045\103\001\002\000\006\032\110\033\203\001" +
    "\002\000\004\040\204\001\002\000\004\032\205\001\002" +
    "\000\004\032\206\001\002\000\004\042\207\001\002\000" +
    "\004\014\210\001\002\000\022\006\027\010\024\011\026" +
    "\021\uffce\035\032\037\031\040\033\044\036\001\002\000" +
    "\004\021\212\001\002\000\034\006\uffee\010\uffee\011\uffee" +
    "\017\uffee\020\uffee\021\uffee\023\uffee\026\uffee\034\uffee\035" +
    "\uffee\037\uffee\040\uffee\044\uffee\001\002\000\016\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\026\uffd1\034\uffd1\001\002\000" +
    "\004\022\220\001\002\000\010\040\076\041\105\045\103" +
    "\001\002\000\006\024\217\032\110\001\002\000\006\015" +
    "\uffcd\022\uffcd\001\002\000\004\036\ufffe\001\002\000\004" +
    "\035\222\001\002\000\004\040\223\001\002\000\006\033" +
    "\ufffa\042\ufffc\001\002\000\022\006\027\010\024\011\026" +
    "\034\uffce\035\032\037\031\040\033\044\036\001\002\000" +
    "\004\034\215\001\002\000\004\015\227\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\002\004\013\003\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\014\021\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\021\001\001\000\004\033" +
    "\213\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\212\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\141\001\001\000\002\001" +
    "\001\000\004\022\123\001\001\000\002\001\001\000\022" +
    "\004\024\005\033\006\037\010\036\011\022\012\027\014" +
    "\034\017\116\001\001\000\022\004\024\005\033\006\037" +
    "\010\036\011\022\012\027\014\034\017\115\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\073\001\001\000\024\004" +
    "\024\005\033\006\037\007\042\010\036\011\022\012\027" +
    "\014\034\017\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\043\001\001\000\002\001\001\000" +
    "\022\004\024\005\033\006\037\010\036\011\022\012\027" +
    "\014\034\017\071\001\001\000\002\001\001\000\012\016" +
    "\050\030\055\031\054\032\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\057\032\051\001\001\000\002\001\001\000\012\016" +
    "\061\030\055\031\054\032\051\001\001\000\002\001\001" +
    "\000\010\030\064\031\054\032\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\005\033\006\037\010\036\011\022\012\027\014\034\017" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\103\025\100\026\101\027\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\105\026\101\027\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\110\027\077\001\001\000\002" +
    "\001\001\000\004\027\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\120\026\101\027\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\127\001\001\000\002\001\001\000\010\015\131" +
    "\026\101\027\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\134\030\055\031\054\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\005" +
    "\033\006\037\010\036\011\022\012\027\014\034\017\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\143\030\055\031\054\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\005" +
    "\033\006\037\010\036\011\022\012\027\014\034\017\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\024\005\033\006\037\010\036\011\022\012" +
    "\027\014\034\017\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\171\001\001\000\002\001\001\000" +
    "\004\024\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\201\026\101\027\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\024\005\033" +
    "\006\037\010\036\011\022\012\027\014\034\017\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\215\026\101\027\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\024\005\033\006\037\010\036\011\022\012\027" +
    "\014\034\017\224\001\001\000\004\033\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String error = "";
    public void syntax_error(Symbol s){
        error += "Error de sintaxis no se esperaba: "+ s.value +", en la linea: "+(s.left+1)+", columna: "+(s.right+1)+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("El programa contiene errores sintacticos no puede seguir");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNO ::= RETURN OPERACION FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CODE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CODE ::= PRINTCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CODE ::= OPTIONSCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CODE ::= LOOPCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CODE ::= FORCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CODE ::= IFCOND ELSECOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CODE ::= IFCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CODE ::= ASIGNACION CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CODE ::= DECLARACION CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND3 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND2 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND2 ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND2 ::= COND3 ABREPAR CONDICION CIERRAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND1 ::= COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND1 ::= COND1 ANDOR COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= CONDICION OPREL COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP2 ::= ABREPAR OPERACION CIERRAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP2 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP2 ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP1 ::= OP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP1 ::= OP1 OPMD OP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= OP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= OPERACION OPSR OP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PRINTER ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PRINTER ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPTT ::= DEFOPT ABRE CODE CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPTT ::= OPT ABREPAR VALOR CIERRAPAR ABRE CODE CIERRA OPTT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT ENDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE ENDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELSECOND ::= ELSE BEGIN CODE ENDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= ID ASIG OPERACION FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL2 ::= ASIG OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL ::= ID DECL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL ::= DECL COMA ID DECL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= TYPE DECL FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAINCOND ::= FUNCION FUNC MAIN BEGIN CODE RETORNO ENDM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTATYPES ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTATYPES ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAPARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTAPARAM ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTAPARAM ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO ENDFU 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FUNCION ::= FUNCION FUNCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAINCOND EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

