
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 16 22:45:22 CST 2020
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 16 22:45:22 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\014\000\002\020\004\000\002\020\006" +
    "\000\002\020\002\000\002\021\006\000\002\021\004\000" +
    "\002\013\011\000\002\004\005\000\002\022\006\000\002" +
    "\022\004\000\002\023\004\000\002\023\002\000\002\005" +
    "\006\000\002\006\011\000\002\007\013\000\002\007\006" +
    "\000\002\010\020\000\002\011\011\000\002\012\013\000" +
    "\002\024\012\000\002\024\006\000\002\014\007\000\002" +
    "\025\003\000\002\025\003\000\002\015\005\000\002\015" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\016\005\000" +
    "\002\016\003\000\002\030\005\000\002\030\003\000\002" +
    "\031\006\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\002\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\002\000\002\033\005\000\002\035\005\000\002\040" +
    "\005\000\002\040\003\000\002\036\005\000\002\041\005" +
    "\000\002\041\003\000\002\037\003\000\002\037\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\036\uffff\001\002\000\004\002\255\001" +
    "\002\000\004\036\006\001\002\000\006\007\010\035\011" +
    "\001\002\000\004\036\000\001\002\000\004\014\251\001" +
    "\002\000\004\040\012\001\002\000\004\041\013\001\002" +
    "\000\006\035\016\042\ufffb\001\002\000\004\033\246\001" +
    "\002\000\004\042\020\001\002\000\004\040\017\001\002" +
    "\000\006\033\ufff9\042\ufffd\001\002\000\004\014\021\001" +
    "\002\000\022\006\027\010\024\011\026\034\uffce\035\032" +
    "\037\031\040\033\044\036\001\002\000\004\034\242\001" +
    "\002\000\034\006\027\010\024\011\026\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031\040" +
    "\033\044\036\001\002\000\004\041\223\001\002\000\034" +
    "\006\027\010\024\011\026\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\026\uffce\034\uffce\035\032\037\031\040\033\044\036" +
    "\001\002\000\004\041\176\001\002\000\004\041\170\001" +
    "\002\000\034\006\027\010\024\011\026\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031\040" +
    "\033\044\036\001\002\000\004\041\161\001\002\000\004" +
    "\040\150\001\002\000\004\030\145\001\002\000\034\006" +
    "\027\010\024\011\026\017\uffce\020\uffce\021\uffce\023\uffce" +
    "\026\uffce\034\uffce\035\032\037\031\040\033\044\036\001" +
    "\002\000\034\006\027\010\024\011\026\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031\040" +
    "\033\044\036\001\002\000\004\041\076\001\002\000\034" +
    "\006\027\010\024\011\026\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\026\uffce\034\uffce\035\032\037\031\040\033\044\036" +
    "\001\002\000\036\006\027\010\024\011\026\017\uffce\020" +
    "\uffce\021\uffce\023\uffce\026\uffce\034\uffce\035\032\037\031" +
    "\040\033\043\042\044\036\001\002\000\016\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\026\uffd4\034\uffd4\001\002\000\006" +
    "\014\045\037\046\001\002\000\034\006\027\010\024\011" +
    "\026\017\uffce\020\uffce\021\uffce\023\uffce\026\uffce\034\uffce" +
    "\035\032\037\031\040\033\044\036\001\002\000\016\017" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\026\uffd3\034\uffd3\001\002" +
    "\000\022\006\027\010\024\011\026\020\uffce\035\032\037" +
    "\031\040\033\044\036\001\002\000\004\041\047\001\002" +
    "\000\012\040\050\041\uffd7\047\056\051\053\001\002\000" +
    "\010\004\uffd9\005\uffd9\042\uffd9\001\002\000\006\005\063" +
    "\042\066\001\002\000\004\041\061\001\002\000\004\041" +
    "\uffd8\001\002\000\010\004\uffdc\005\uffdc\042\uffdc\001\002" +
    "\000\010\004\057\005\uffde\042\uffde\001\002\000\010\004" +
    "\uffda\005\uffda\042\uffda\001\002\000\012\040\050\041\uffd7" +
    "\047\056\051\053\001\002\000\010\004\uffdd\005\uffdd\042" +
    "\uffdd\001\002\000\012\040\050\041\uffd7\047\056\051\053" +
    "\001\002\000\006\005\063\042\064\001\002\000\012\040" +
    "\050\041\uffd7\047\056\051\053\001\002\000\010\004\uffdb" +
    "\005\uffdb\042\uffdb\001\002\000\010\004\057\005\uffdf\042" +
    "\uffdf\001\002\000\004\014\067\001\002\000\022\006\027" +
    "\010\024\011\026\020\uffce\035\032\037\031\040\033\044" +
    "\036\001\002\000\004\020\071\001\002\000\004\043\042" +
    "\001\002\000\034\006\ufff0\010\ufff0\011\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\026\ufff0\034\ufff0\035\ufff0\037\ufff0" +
    "\040\ufff0\044\ufff0\001\002\000\004\020\074\001\002\000" +
    "\034\006\uffef\010\uffef\011\uffef\017\uffef\020\uffef\021\uffef" +
    "\023\uffef\026\uffef\034\uffef\035\uffef\037\uffef\040\uffef\044" +
    "\uffef\001\002\000\016\017\uffd2\020\uffd2\021\uffd2\023\uffd2" +
    "\026\uffd2\034\uffd2\001\002\000\016\040\112\041\107\045" +
    "\100\046\115\047\101\050\106\001\002\000\012\024\uffc1" +
    "\033\uffc1\042\uffc1\053\uffc1\001\002\000\016\024\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\042\uffe2\053\uffe2\001\002\000\012" +
    "\024\uffc5\033\uffc5\042\uffc5\053\uffc5\001\002\000\016\024" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\042\uffe3\053\uffe3\001\002" +
    "\000\004\042\uffe8\001\002\000\016\024\uffe5\031\132\032" +
    "\uffe5\033\uffe5\042\uffe5\053\uffe5\001\002\000\014\024\uffc0" +
    "\032\130\033\uffc0\042\uffc0\053\uffc0\001\002\000\004\042" +
    "\uffe7\001\002\000\014\040\112\041\124\045\100\046\115" +
    "\047\101\001\002\000\012\024\uffc2\033\uffc2\042\uffc2\053" +
    "\uffc2\001\002\000\004\042\116\001\002\000\016\024\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\042\uffe1\053\uffe1\001\002\000" +
    "\012\024\uffc4\033\uffc4\042\uffc4\053\uffc4\001\002\000\012" +
    "\024\uffc3\033\uffc3\042\uffc3\053\uffc3\001\002\000\012\024" +
    "\uffc6\033\uffc6\042\uffc6\053\uffc6\001\002\000\004\024\117" +
    "\001\002\000\034\006\uffe9\010\uffe9\011\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\023\uffe9\026\uffe9\034\uffe9\035\uffe9\037\uffe9" +
    "\040\uffe9\044\uffe9\001\002\000\006\033\140\042\141\001" +
    "\002\000\006\033\134\042\135\001\002\000\006\032\130" +
    "\042\127\001\002\000\006\033\uffca\042\uffca\001\002\000" +
    "\014\040\112\041\126\045\100\046\115\047\101\001\002" +
    "\000\006\033\uffc7\042\uffc7\001\002\000\010\040\112\041" +
    "\126\045\100\001\002\000\016\024\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\042\uffe0\053\uffe0\001\002\000\010\040\112\041" +
    "\126\045\100\001\002\000\016\024\uffe6\031\132\032\uffe6" +
    "\033\uffe6\042\uffe6\053\uffe6\001\002\000\010\040\112\041" +
    "\126\045\100\001\002\000\016\024\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\042\uffe4\053\uffe4\001\002\000\004\041\136\001" +
    "\002\000\012\024\uffc9\033\uffc9\042\uffc9\053\uffc9\001\002" +
    "\000\006\046\115\047\101\001\002\000\006\033\uffc8\042" +
    "\uffc8\001\002\000\006\046\115\047\101\001\002\000\012" +
    "\024\uffcc\033\uffcc\042\uffcc\053\uffcc\001\002\000\006\033" +
    "\uffcb\042\uffcb\001\002\000\016\017\uffcf\020\uffcf\021\uffcf" +
    "\023\uffcf\026\uffcf\034\uffcf\001\002\000\016\017\uffd5\020" +
    "\uffd5\021\uffd5\023\uffd5\026\uffd5\034\uffd5\001\002\000\014" +
    "\040\112\041\107\045\100\046\115\047\101\001\002\000" +
    "\004\024\147\001\002\000\034\006\ufff2\010\ufff2\011\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\023\ufff2\026\ufff2\034\ufff2\035" +
    "\ufff2\037\ufff2\040\ufff2\044\ufff2\001\002\000\010\024\ufff3" +
    "\030\156\033\ufff3\001\002\000\006\024\153\033\152\001" +
    "\002\000\004\040\154\001\002\000\034\006\ufff7\010\ufff7" +
    "\011\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7\026\ufff7\034" +
    "\ufff7\035\ufff7\037\ufff7\040\ufff7\044\ufff7\001\002\000\010" +
    "\024\ufff3\030\156\033\ufff3\001\002\000\006\024\ufff6\033" +
    "\ufff6\001\002\000\014\040\112\041\107\045\100\046\115" +
    "\047\101\001\002\000\006\024\ufff4\033\ufff4\001\002\000" +
    "\006\024\ufff5\033\ufff5\001\002\000\012\040\050\041\uffd7" +
    "\047\056\051\053\001\002\000\006\005\063\042\163\001" +
    "\002\000\004\014\164\001\002\000\022\006\027\010\024" +
    "\011\026\017\uffce\035\032\037\031\040\033\044\036\001" +
    "\002\000\004\017\166\001\002\000\036\006\ufff1\010\ufff1" +
    "\011\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1\026\ufff1\034" +
    "\ufff1\035\ufff1\037\ufff1\040\ufff1\043\ufff1\044\ufff1\001\002" +
    "\000\016\017\uffd0\020\uffd0\021\uffd0\023\uffd0\026\uffd0\034" +
    "\uffd0\001\002\000\012\040\050\041\uffd7\047\056\051\053" +
    "\001\002\000\006\005\063\042\172\001\002\000\004\014" +
    "\173\001\002\000\022\006\027\010\024\011\026\023\uffce" +
    "\035\032\037\031\040\033\044\036\001\002\000\004\023" +
    "\175\001\002\000\034\006\uffed\010\uffed\011\uffed\017\uffed" +
    "\020\uffed\021\uffed\023\uffed\026\uffed\034\uffed\035\uffed\037" +
    "\uffed\040\uffed\044\uffed\001\002\000\004\040\177\001\002" +
    "\000\004\033\200\001\002\000\004\035\201\001\002\000" +
    "\004\042\202\001\002\000\004\014\203\001\002\000\006" +
    "\012\204\013\205\001\002\000\004\052\213\001\002\000" +
    "\004\025\210\001\002\000\004\016\207\001\002\000\034" +
    "\006\uffec\010\uffec\011\uffec\017\uffec\020\uffec\021\uffec\023" +
    "\uffec\026\uffec\034\uffec\035\uffec\037\uffec\040\uffec\044\uffec" +
    "\001\002\000\022\006\027\010\024\011\026\026\uffce\035" +
    "\032\037\031\040\033\044\036\001\002\000\004\026\212" +
    "\001\002\000\004\016\uffea\001\002\000\014\040\112\041" +
    "\107\045\100\046\115\047\101\001\002\000\004\053\215" +
    "\001\002\000\004\025\216\001\002\000\022\006\027\010" +
    "\024\011\026\026\uffce\035\032\037\031\040\033\044\036" +
    "\001\002\000\004\026\220\001\002\000\006\012\204\013" +
    "\205\001\002\000\004\016\uffeb\001\002\000\016\017\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\026\uffd6\034\uffd6\001\002\000" +
    "\004\035\224\001\002\000\004\040\225\001\002\000\004" +
    "\027\226\001\002\000\010\040\112\041\126\045\100\001" +
    "\002\000\006\032\130\033\230\001\002\000\004\040\231" +
    "\001\002\000\004\032\232\001\002\000\004\032\233\001" +
    "\002\000\004\042\234\001\002\000\004\014\235\001\002" +
    "\000\022\006\027\010\024\011\026\021\uffce\035\032\037" +
    "\031\040\033\044\036\001\002\000\004\021\237\001\002" +
    "\000\034\006\uffee\010\uffee\011\uffee\017\uffee\020\uffee\021" +
    "\uffee\023\uffee\026\uffee\034\uffee\035\uffee\037\uffee\040\uffee" +
    "\044\uffee\001\002\000\016\017\uffd1\020\uffd1\021\uffd1\023" +
    "\uffd1\026\uffd1\034\uffd1\001\002\000\004\022\245\001\002" +
    "\000\014\040\112\041\107\045\100\046\115\047\101\001" +
    "\002\000\004\024\244\001\002\000\006\015\uffcd\022\uffcd" +
    "\001\002\000\004\036\ufffe\001\002\000\004\035\247\001" +
    "\002\000\004\040\250\001\002\000\006\033\ufffa\042\ufffc" +
    "\001\002\000\022\006\027\010\024\011\026\034\uffce\035" +
    "\032\037\031\040\033\044\036\001\002\000\004\034\242" +
    "\001\002\000\004\015\254\001\002\000\004\002\ufff8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\002\004\013\003\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\014\021\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\021\001\001\000\004\033" +
    "\240\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\237\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\166\001\001\000\002\001" +
    "\001\000\004\022\150\001\001\000\002\001\001\000\022" +
    "\004\024\005\033\006\037\010\036\011\022\012\027\014" +
    "\034\017\143\001\001\000\022\004\024\005\033\006\037" +
    "\010\036\011\022\012\027\014\034\017\142\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\074\001\001\000\024\004" +
    "\024\005\033\006\037\007\042\010\036\011\022\012\027" +
    "\014\034\017\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\043\001\001\000\002\001\001\000" +
    "\022\004\024\005\033\006\037\010\036\011\022\012\027" +
    "\014\034\017\072\001\001\000\002\001\001\000\012\016" +
    "\050\030\054\031\053\032\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\057\032\051\001\001\000\002\001\001\000\012\016" +
    "\061\030\054\031\053\032\051\001\001\000\002\001\001" +
    "\000\010\030\064\031\053\032\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\005\033\006\037\010\036\011\022\012\027\014\034\017" +
    "\067\001\001\000\002\001\001\000\004\007\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\104\025\110\026\103\027\101" +
    "\034\076\035\113\036\112\037\107\042\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\121\026\103\027\101" +
    "\035\124\037\122\040\117\041\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\121\026\103\027" +
    "\101\037\122\040\117\001\001\000\002\001\001\000\010" +
    "\015\121\026\103\027\101\001\001\000\002\001\001\000" +
    "\006\026\130\027\101\001\001\000\002\001\001\000\004" +
    "\027\132\001\001\000\002\001\001\000\004\035\136\001" +
    "\001\000\002\001\001\000\006\037\122\040\117\001\001" +
    "\000\002\001\001\000\004\037\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\104\026\103\027\101\034\076\035\113\036" +
    "\112\037\107\042\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\154\001\001" +
    "\000\002\001\001\000\022\015\104\026\103\027\101\034" +
    "\076\035\113\036\112\037\107\042\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\161\030\054\031" +
    "\053\032\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\024\005\033\006\037\010\036\011\022\012" +
    "\027\014\034\017\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\170\030\054\031" +
    "\053\032\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\024\005\033\006\037\010\036\011\022\012" +
    "\027\014\034\017\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\024\005\033\006\037" +
    "\010\036\011\022\012\027\014\034\017\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\015\104\026\103" +
    "\027\101\034\076\035\113\036\112\037\107\042\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\005\033\006\037\010\036\011\022\012\027\014\034\017" +
    "\216\001\001\000\002\001\001\000\004\024\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\226\026\103" +
    "\027\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\024\005\033\006\037\010\036\011" +
    "\022\012\027\014\034\017\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\104\026\103\027\101\034\076\035\113\036\112" +
    "\037\107\042\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\024\005\033\006\037\010" +
    "\036\011\022\012\027\014\034\017\251\001\001\000\004" +
    "\033\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String error = "";
    public Node raiz;
    public void syntax_error(Symbol s){
        error += "Error de sintaxis no se esperaba: "+ s.value +", en la linea: "+(s.left+1)+", columna: "+(s.right+1)+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("El programa contiene errores sintacticos no puede seguir");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORO ::= OPERACION 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORO ::= VALOR 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR ::= VALOR1 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR ::= ARREGLO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR ::= MATRIZ 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR1 ::= BOOL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node val = new Node("VALOR1");
                val.addNode(new Node("BOOL", ((String) v)));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR1 ::= CHAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node val = new Node("VALOR1");
                val.addNode(new Node("CHAR", ((String) v)));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MATRIZ1 ::= ARREGLO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node mat = new Node("MATRIZ1");
                mat.addNode(v);
                RESULT = mat;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MATRIZ1 ::= MATRIZ1 COMA ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node mat = new Node("MATRIZ1");
                mat.addNode(a);
                mat.addNode(new Node("COMA", ","));
                mat.addNode(v);
                RESULT = mat;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MATRIZ ::= ABREPAR MATRIZ1 CIERRAPAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node matriz = new Node("MATRIZ");
                matriz.addNode(new Node("ABREPAR", "("));
                matriz.addNode(a);
                matriz.addNode(new Node("CIERRAPAR", ")"));
                RESULT = matriz;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARREGLO1 ::= VALOR1 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node arr = new Node("ARREGLO1");
                arr.addNode(v);
                RESULT = arr;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARREGLO1 ::= ARREGLO1 COMA VALOR1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node arr = new Node("ARREGLO1");
                arr.addNode(a);
                arr.addNode(new Node("COMA", ","));
                arr.addNode(v);
                RESULT = arr;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARREGLO ::= ABREPAR ARREGLO1 CIERRAPAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node arreglo = new Node("ARREGLO");
                arreglo.addNode(new Node("ABREPAR", "("));
                arreglo.addNode(a);
                arreglo.addNode(new Node("CIERRAPAR", ")"));
                RESULT = arreglo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNO ::= RETURN VALORO FINLINE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node retorno = new Node("RETORNO");
            retorno.addNode(new Node("RETURN", "return"));
            retorno.addNode(v);
            retorno.addNode(new Node("FINLINE", ";"));
            RESULT = retorno;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CODE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CODE ::= PRINTCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CODE ::= OPTIONSCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CODE ::= LOOPCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CODE ::= FORCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CODE ::= IFCOND ELSECOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(e);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CODE ::= IFCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CODE ::= ASIGNACION CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CODE ::= DECLARACION CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COND3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COND3 ::= NOT 
            {
              Object RESULT =null;
		
            Node cond3 = new Node("NEGACION");
            cond3.addNode(new Node("NOT", "!"));
            RESULT = cond3;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COND2 ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            Node cond2 = new Node("COND2");
            cond2.addNode(new Node("ID", ((String) i)));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COND2 ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            Node cond2 = new Node("COND2");
            cond2.addNode(new Node("BOOL", ((String) b)));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COND2 ::= COND3 ABREPAR CONDICION CIERRAPAR 
            {
              Object RESULT =null;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node cond2 = new Node("COND2");
            cond2.addNode(c3);
            cond2.addNode(new Node("ABREPAR", "("));
            cond2.addNode(c);
            cond2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COND1 ::= COND2 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node cond1 = new Node("COND1");
            cond1.addNode(c2);
            RESULT = cond1;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COND1 ::= COND1 ANDOR COND2 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node cond1 = new Node("COND1");
            cond1.addNode(c1);
            cond1.addNode(new Node("ANDOR", ((String) a)));
            cond1.addNode(c2);
            RESULT = cond1;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= COND1 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node condicion = new Node("CONDICION BOOLEANA");
                condicion.addNode(c1);
                RESULT = condicion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= CONDICION OPREL COND1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node condicion = new Node("CONDICION BOOLEANA");
                condicion.addNode(c);
                condicion.addNode(new Node("OPREL", ((String) op)));
                condicion.addNode(c1);
                RESULT = condicion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP2 ::= ABREPAR OPERACION CIERRAPAR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node op2 = new Node("OP2");
            op2.addNode(new Node("ABREPAR", "("));
            op2.addNode(o);
            op2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP2 ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node op2 = new Node("OP2");
            op2.addNode(new Node("ID", ((String) i)));
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP2 ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node op2 = new Node("OP2");
            op2.addNode(new Node("INT", ((String) i)));
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node operacion = new Node("OP2");
            operacion.addNode(op2);
            RESULT = operacion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP1 ::= OP1 OPMD OP2 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node operacion = new Node("OP1");
            operacion.addNode(op1);
            operacion.addNode(new Node("OPSR", ((String) op)));
            operacion.addNode(op2);
            RESULT = operacion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= OP1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node operacion = new Node("OPERACION");
                operacion.addNode(op1);
                RESULT = operacion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= OPERACION OPSR OP1 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node operacion = new Node("OPERACION");
                operacion.addNode(o);
                operacion.addNode(new Node("OPSR", ((String) op)));
                operacion.addNode(op1);
                RESULT = operacion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PRINTER ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                Node prin = new Node("PRINTER");
                prin.addNode(new Node("STRING", ((String) s)));
                RESULT = prin;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PRINTER ::= VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                Node prin = new Node("PRINTER");
                prin.addNode(v);
                RESULT = prin;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Node printcond = new Node("PRINT INSTRUCTION");
                printcond.addNode(new Node("PRINT", "print"));
                printcond.addNode(new Node("ABREPAR", "("));
                printcond.addNode(p);
                printcond.addNode(new Node("CIERRAPAR", ")"));
                printcond.addNode(new Node("FINLINE", ";"));
                RESULT = printcond;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPTT ::= DEFOPT ABRE CODE CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node optt = new Node("DEFAULT OPTION BLOCK");
            optt.addNode(new Node("DEFOPT", "opt_def"));
            optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            optt.addNode(new Node("CIERRA", "}"));
            RESULT = optt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPTT ::= OPT ABRECOR VALORO CIERRACOR ABRE CODE CIERRA OPTT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node optt = new Node("OPTION BLOCK");
            optt.addNode(new Node("OPTION", "opt"));
            optt.addNode(new Node("ABRECOR", "["));
            optt.addNode(v);
            optt.addNode(new Node("CIERRACOR", "]"));
            optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            optt.addNode(new Node("CIERRA", "}"));
            optt.addNode(o);
            RESULT = optt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT ENDO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Node optionscond = new Node("OPTIONS BLOCK");
                    optionscond.addNode(new Node("OPTIONS", "options"));
                    optionscond.addNode(new Node("ABREPAR", "("));
                    optionscond.addNode(new Node("ID", ((String) i)));
                    optionscond.addNode(new Node("COMA", ","));
                    optionscond.addNode(new Node("TYPE", ((String) t)));
                    optionscond.addNode(new Node("CIERRAPAR", ")"));
                    optionscond.addNode(new Node("BEGIN", "begin"));
                    optionscond.addNode(o);
                    optionscond.addNode(new Node("ENDO", "end options"));
                    RESULT = optionscond;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node loopcond = new Node("LOOP BLOCK");
                loopcond.addNode(new Node("LOOP", "loop"));
                loopcond.addNode(new Node("ABREPAR", "("));
                loopcond.addNode(c);
                loopcond.addNode(new Node("CIERRAPAR", ")"));
                loopcond.addNode(new Node("BEGIN", "begin"));
                loopcond.addNode(code);
                loopcond.addNode(new Node("ENDL", "end loop"));
                RESULT = loopcond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE ENDF 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node forcond = new Node("FOR BLOCK");
                forcond.addNode(new Node("FOR", "for"));
                forcond.addNode(new Node("ABREPAR", "("));
                forcond.addNode(new Node("TYPE", ((String) t)));
                forcond.addNode(new Node("ID", ((String) i)));
                forcond.addNode(new Node("HASTA", "->"));
                forcond.addNode(o);
                forcond.addNode(new Node("COMA", ","));
                forcond.addNode(new Node("ID", ((String) id)));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("CIERRAPAR", ")"));
                forcond.addNode(new Node("BEGIN", "begin"));
                forcond.addNode(c);
                forcond.addNode(new Node("ENDF", "end for"));
                RESULT = forcond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELSECOND ::= ELSE BEGIN CODE ENDE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node elsecond = new Node("ELSE BLOCK");
                elsecond = new Node("ELSE", "else");
                elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(c);
                elsecond.addNode(new Node("ENDE", "end else"));
                RESULT = elsecond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDE ELSECOND 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node elsecond = new Node("ELSE IF BLOCK");
                elsecond.addNode(new Node("ELSE", "else"));
                elsecond.addNode(new Node("IF", "if"));
                elsecond.addNode(new Node("ABREPAR", "("));
                elsecond.addNode(c);
                elsecond.addNode(new Node("CIERRAPAR", ")"));
                elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(code);
                elsecond.addNode(new Node("ENDE", "end else"));
                elsecond.addNode(e);
                RESULT = elsecond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node ifcond = new Node("IF BLOCK");
            ifcond.addNode(new Node("IF", "if"));
            ifcond.addNode(new Node("ABREPAR", "("));
            ifcond.addNode(c);
            ifcond.addNode(new Node("CIERRAPAR", ")"));
            ifcond.addNode(new Node("BEGIN", "begin"));
            ifcond.addNode(code);
            ifcond.addNode(new Node("ENDI", "end if"));
            RESULT = ifcond;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ASIGNACION ::= ID ASIG VALORO FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node asignacion = new Node("ASIGNACION");
                asignacion.addNode(new Node("ID", ((String) i)));
                asignacion.addNode(new Node("ASIG", "="));
                asignacion.addNode(v);
                asignacion.addNode(new Node("FINLINE", ";"));
                RESULT = asignacion;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL2 ::= ASIG VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl2 = new Node("DECL2");
            decl2.addNode(new Node("ASIG", "="));
            decl2.addNode(v);
            RESULT = decl2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL ::= ID DECL2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl = new Node("DECL");
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL ::= DECL COMA ID DECL2 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl = new Node("DECL");
            decl.addNode(d);
            decl.addNode(new Node("COMA", ","));
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= TYPE DECL FINLINE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Node declaracion = new Node("DECLARACION");
                    declaracion.addNode(new Node("TYPE", ((String) t)));
                    declaracion.addNode(d);
                    declaracion.addNode(new Node("FINLINE", ";"));
                    RESULT = declaracion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAINCOND ::= FUNCION FUNC MAIN BEGIN CODE RETORNO ENDM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node maincond = new Node("MAIN");
                maincond.addNode(f);
                maincond.addNode(new Node("FUNC", "func"));
                maincond.addNode(new Node("MAIN", "int_main()"));
                maincond.addNode(new Node("BEGIN", "begin"));
                maincond.addNode(code);
                maincond.addNode(retorno);
                maincond.addNode(new Node("ENDM", "end main"));
                RESULT = maincond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTATYPES ::= TYPE ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listatypes = new Node("LISTATYPES");
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTATYPES ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listatypes = new Node("LISTATYPES");
                listatypes.addNode(lista);
                listatypes.addNode(new Node("COMA", ","));
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAPARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTAPARAM ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;
		int listatypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listatypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object listatypes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listaparam = new Node("LISTAPARAM");
                listaparam.addNode(listatypes);
                listaparam.addNode(new Node("COMA", ","));
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTAPARAM ::= TYPE ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listaparam = new Node("LISTAPARAM");
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO ENDFU 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listaparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object listaparam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node funcion2 = new Node("FUNCION");
                funcion2.addNode(new Node("FUNC", "func"));
                funcion2.addNode(new Node("TYPE", ((String) t)));
                funcion2.addNode(new Node("ID", ((String) i)));
                funcion2.addNode(new Node("ABREPAR", "("));
                funcion2.addNode(listaparam);
                funcion2.addNode(new Node("CIERRAPAR", ")"));
                funcion2.addNode(new Node("BEGIN", "begin"));
                funcion2.addNode(code);
                funcion2.addNode(retorno);
                funcion2.addNode(new Node("ENDFU", "end func"));
                RESULT = funcion2;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FUNCION ::= FUNCION FUNCION2 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node funcion = new Node("GEN FUNCION");
                funcion.addNode(f);
                funcion.addNode(ff);
                RESULT = funcion;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAINCOND EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

