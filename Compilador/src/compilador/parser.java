
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 15 11:11:58 CST 2020
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 15 11:11:58 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\014\000\002\003\014\000\002\003\014" +
    "\000\002\003\014\000\002\003\014\000\002\003\014\000" +
    "\002\003\014\000\002\003\014\000\002\003\014\000\002" +
    "\020\004\000\002\020\006\000\002\020\002\000\002\021" +
    "\006\000\002\021\004\000\002\013\011\000\002\004\005" +
    "\000\002\022\006\000\002\022\004\000\002\023\004\000" +
    "\002\023\002\000\002\005\006\000\002\006\011\000\002" +
    "\007\012\000\002\007\006\000\002\010\020\000\002\011" +
    "\011\000\002\012\013\000\002\024\012\000\002\024\006" +
    "\000\002\014\007\000\002\025\003\000\002\025\003\000" +
    "\002\015\005\000\002\015\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\005\000\002\016\005\000\002\016\003\000\002\030\005" +
    "\000\002\030\003\000\002\031\006\000\002\031\003\000" +
    "\002\031\003\000\002\032\003\000\002\032\002\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\002\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\003\uffff\030\uffff\001\002\000\004\002" +
    "\306\001\002\000\006\003\010\030\007\001\002\000\006" +
    "\003\000\030\000\001\002\000\010\003\224\007\225\027" +
    "\226\001\002\000\004\027\011\001\002\000\004\032\012" +
    "\001\002\000\004\033\013\001\002\000\006\027\016\034" +
    "\ufff3\001\002\000\004\025\221\001\002\000\004\034\020" +
    "\001\002\000\004\032\017\001\002\000\010\003\ufff5\025" +
    "\ufff1\034\ufff5\001\002\000\004\014\021\001\002\000\022" +
    "\006\027\010\024\011\026\026\uffc6\027\032\031\031\032" +
    "\033\036\036\001\002\000\004\026\215\001\002\000\030" +
    "\003\uffc6\006\027\010\024\011\026\015\uffc6\020\uffc6\026" +
    "\uffc6\027\032\031\031\032\033\036\036\001\002\000\004" +
    "\033\176\001\002\000\030\003\uffc6\006\027\010\024\011" +
    "\026\015\uffc6\020\uffc6\026\uffc6\027\032\031\031\032\033" +
    "\036\036\001\002\000\004\033\151\001\002\000\004\033" +
    "\143\001\002\000\030\003\uffc6\006\027\010\024\011\026" +
    "\015\uffc6\020\uffc6\026\uffc6\027\032\031\031\032\033\036" +
    "\036\001\002\000\004\033\134\001\002\000\004\032\123" +
    "\001\002\000\004\022\120\001\002\000\030\003\uffc6\006" +
    "\027\010\024\011\026\015\uffc6\020\uffc6\026\uffc6\027\032" +
    "\031\031\032\033\036\036\001\002\000\030\003\uffc6\006" +
    "\027\010\024\011\026\015\uffc6\020\uffc6\026\uffc6\027\032" +
    "\031\031\032\033\036\036\001\002\000\004\033\075\001" +
    "\002\000\030\003\uffc6\006\027\010\024\011\026\015\uffc6" +
    "\020\uffc6\026\uffc6\027\032\031\031\032\033\036\036\001" +
    "\002\000\032\003\uffc6\006\027\010\024\011\026\015\uffc6" +
    "\020\uffc6\026\uffc6\027\032\031\031\032\033\035\042\036" +
    "\036\001\002\000\012\003\uffcc\015\uffcc\020\uffcc\026\uffcc" +
    "\001\002\000\006\014\045\031\046\001\002\000\030\003" +
    "\uffc6\006\027\010\024\011\026\015\uffc6\020\uffc6\026\uffc6" +
    "\027\032\031\031\032\033\036\036\001\002\000\012\003" +
    "\uffcb\015\uffcb\020\uffcb\026\uffcb\001\002\000\022\006\027" +
    "\010\024\011\026\015\uffc6\027\032\031\031\032\033\036" +
    "\036\001\002\000\004\033\047\001\002\000\012\032\050" +
    "\033\uffcf\037\054\041\053\001\002\000\010\004\uffd1\005" +
    "\uffd1\034\uffd1\001\002\000\006\005\063\034\066\001\002" +
    "\000\004\033\061\001\002\000\004\033\uffd0\001\002\000" +
    "\010\004\uffd2\005\uffd2\034\uffd2\001\002\000\010\004\uffd4" +
    "\005\uffd4\034\uffd4\001\002\000\010\004\057\005\uffd6\034" +
    "\uffd6\001\002\000\012\032\050\033\uffcf\037\054\041\053" +
    "\001\002\000\010\004\uffd5\005\uffd5\034\uffd5\001\002\000" +
    "\012\032\050\033\uffcf\037\054\041\053\001\002\000\006" +
    "\005\063\034\064\001\002\000\012\032\050\033\uffcf\037" +
    "\054\041\053\001\002\000\010\004\uffd3\005\uffd3\034\uffd3" +
    "\001\002\000\010\004\057\005\uffd7\034\uffd7\001\002\000" +
    "\004\014\067\001\002\000\022\006\027\010\024\011\026" +
    "\015\uffc6\027\032\031\031\032\033\036\036\001\002\000" +
    "\004\015\071\001\002\000\030\003\uffe8\006\uffe8\010\uffe8" +
    "\011\uffe8\015\uffe8\020\uffe8\026\uffe8\027\uffe8\031\uffe8\032" +
    "\uffe8\036\uffe8\001\002\000\004\015\073\001\002\000\030" +
    "\003\uffe7\006\uffe7\010\uffe7\011\uffe7\015\uffe7\020\uffe7\026" +
    "\uffe7\027\uffe7\031\uffe7\032\uffe7\036\uffe7\001\002\000\012" +
    "\003\uffca\015\uffca\020\uffca\026\uffca\001\002\000\012\032" +
    "\076\033\105\037\103\040\100\001\002\000\014\016\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\034\uffd9\001\002\000\014\016" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\034\uffdb\001\002\000\004" +
    "\034\uffdf\001\002\000\004\034\114\001\002\000\014\016" +
    "\uffdd\023\112\024\uffdd\025\uffdd\034\uffdd\001\002\000\014" +
    "\016\uffda\023\uffda\024\uffda\025\uffda\034\uffda\001\002\000" +
    "\006\024\110\034\uffe0\001\002\000\010\032\076\033\105" +
    "\037\103\001\002\000\006\024\110\034\107\001\002\000" +
    "\014\016\uffd8\023\uffd8\024\uffd8\025\uffd8\034\uffd8\001\002" +
    "\000\010\032\076\033\105\037\103\001\002\000\014\016" +
    "\uffde\023\112\024\uffde\025\uffde\034\uffde\001\002\000\010" +
    "\032\076\033\105\037\103\001\002\000\014\016\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\034\uffdc\001\002\000\004\016\115" +
    "\001\002\000\030\003\uffe1\006\uffe1\010\uffe1\011\uffe1\015" +
    "\uffe1\020\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\036\uffe1" +
    "\001\002\000\012\003\uffc7\015\uffc7\020\uffc7\026\uffc7\001" +
    "\002\000\012\003\uffcd\015\uffcd\020\uffcd\026\uffcd\001\002" +
    "\000\010\032\076\033\105\037\103\001\002\000\006\016" +
    "\122\024\110\001\002\000\030\003\uffea\006\uffea\010\uffea" +
    "\011\uffea\015\uffea\020\uffea\026\uffea\027\uffea\031\uffea\032" +
    "\uffea\036\uffea\001\002\000\010\016\uffeb\022\131\025\uffeb" +
    "\001\002\000\006\016\126\025\125\001\002\000\004\032" +
    "\127\001\002\000\030\003\uffef\006\uffef\010\uffef\011\uffef" +
    "\015\uffef\020\uffef\026\uffef\027\uffef\031\uffef\032\uffef\036" +
    "\uffef\001\002\000\010\016\uffeb\022\131\025\uffeb\001\002" +
    "\000\006\016\uffee\025\uffee\001\002\000\010\032\076\033" +
    "\105\037\103\001\002\000\010\016\uffec\024\110\025\uffec" +
    "\001\002\000\006\016\uffed\025\uffed\001\002\000\012\032" +
    "\050\033\uffcf\037\054\041\053\001\002\000\006\005\063" +
    "\034\136\001\002\000\004\014\137\001\002\000\022\006" +
    "\027\010\024\011\026\015\uffc6\027\032\031\031\032\033" +
    "\036\036\001\002\000\004\015\141\001\002\000\032\003" +
    "\uffe9\006\uffe9\010\uffe9\011\uffe9\015\uffe9\020\uffe9\026\uffe9" +
    "\027\uffe9\031\uffe9\032\uffe9\035\uffe9\036\uffe9\001\002\000" +
    "\012\003\uffc8\015\uffc8\020\uffc8\026\uffc8\001\002\000\012" +
    "\032\050\033\uffcf\037\054\041\053\001\002\000\006\005" +
    "\063\034\145\001\002\000\004\014\146\001\002\000\022" +
    "\006\027\010\024\011\026\015\uffc6\027\032\031\031\032" +
    "\033\036\036\001\002\000\004\015\150\001\002\000\030" +
    "\003\uffe5\006\uffe5\010\uffe5\011\uffe5\015\uffe5\020\uffe5\026" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\036\uffe5\001\002\000\004" +
    "\032\152\001\002\000\004\025\153\001\002\000\004\027" +
    "\154\001\002\000\004\034\155\001\002\000\004\014\156" +
    "\001\002\000\006\012\157\013\160\001\002\000\004\033" +
    "\166\001\002\000\004\017\163\001\002\000\004\015\162" +
    "\001\002\000\030\003\uffe4\006\uffe4\010\uffe4\011\uffe4\015" +
    "\uffe4\020\uffe4\026\uffe4\027\uffe4\031\uffe4\032\uffe4\036\uffe4" +
    "\001\002\000\022\006\027\010\024\011\026\020\uffc6\027" +
    "\032\031\031\032\033\036\036\001\002\000\004\020\165" +
    "\001\002\000\004\015\uffe2\001\002\000\004\037\167\001" +
    "\002\000\004\034\170\001\002\000\004\017\171\001\002" +
    "\000\022\006\027\010\024\011\026\020\uffc6\027\032\031" +
    "\031\032\033\036\036\001\002\000\004\020\173\001\002" +
    "\000\006\012\157\013\160\001\002\000\004\015\uffe3\001" +
    "\002\000\012\003\uffce\015\uffce\020\uffce\026\uffce\001\002" +
    "\000\004\027\177\001\002\000\004\032\200\001\002\000" +
    "\004\021\201\001\002\000\010\032\076\033\105\037\103" +
    "\001\002\000\006\024\110\025\203\001\002\000\004\032" +
    "\204\001\002\000\004\024\205\001\002\000\004\024\206" +
    "\001\002\000\004\034\207\001\002\000\004\014\210\001" +
    "\002\000\022\006\027\010\024\011\026\015\uffc6\027\032" +
    "\031\031\032\033\036\036\001\002\000\004\015\212\001" +
    "\002\000\030\003\uffe6\006\uffe6\010\uffe6\011\uffe6\015\uffe6" +
    "\020\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6\036\uffe6\001" +
    "\002\000\012\003\uffc9\015\uffc9\020\uffc9\026\uffc9\001\002" +
    "\000\004\015\220\001\002\000\010\032\076\033\105\037" +
    "\103\001\002\000\006\016\217\024\110\001\002\000\006" +
    "\003\uffc5\015\uffc5\001\002\000\006\003\ufffd\030\ufffd\001" +
    "\002\000\004\027\222\001\002\000\004\032\223\001\002" +
    "\000\010\003\ufff4\025\ufff2\034\ufff4\001\002\000\004\032" +
    "\276\001\002\000\004\014\272\001\002\000\006\003\230" +
    "\032\227\001\002\000\006\003\240\033\241\001\002\000" +
    "\004\033\231\001\002\000\006\027\016\034\ufff3\001\002" +
    "\000\004\034\233\001\002\000\004\014\234\001\002\000" +
    "\022\006\027\010\024\011\026\026\uffc6\027\032\031\031" +
    "\032\033\036\036\001\002\000\004\026\215\001\002\000" +
    "\004\015\237\001\002\000\006\003\ufffb\030\ufffb\001\002" +
    "\000\006\027\016\034\ufff3\001\002\000\010\003\ufff3\027" +
    "\016\034\ufff3\001\002\000\006\003\243\034\244\001\002" +
    "\000\004\014\260\001\002\000\006\003\245\014\246\001" +
    "\002\000\022\006\027\010\024\011\026\026\uffc6\027\032" +
    "\031\031\032\033\036\036\001\002\000\024\003\uffc6\006" +
    "\027\010\024\011\026\026\uffc6\027\032\031\031\032\033" +
    "\036\036\001\002\000\006\003\251\026\215\001\002\000" +
    "\006\003\253\015\254\001\002\000\004\015\252\001\002" +
    "\000\006\003\ufff7\030\ufff7\001\002\000\006\003\ufff6\030" +
    "\ufff6\001\002\000\006\003\ufffe\030\ufffe\001\002\000\004" +
    "\026\215\001\002\000\004\015\257\001\002\000\006\003" +
    "\ufff8\030\ufff8\001\002\000\022\006\027\010\024\011\026" +
    "\026\uffc6\027\032\031\031\032\033\036\036\001\002\000" +
    "\004\026\215\001\002\000\004\015\263\001\002\000\006" +
    "\003\ufff9\030\ufff9\001\002\000\004\034\265\001\002\000" +
    "\004\014\266\001\002\000\022\006\027\010\024\011\026" +
    "\026\uffc6\027\032\031\031\032\033\036\036\001\002\000" +
    "\004\026\215\001\002\000\004\015\271\001\002\000\006" +
    "\003\ufffa\030\ufffa\001\002\000\022\006\027\010\024\011" +
    "\026\026\uffc6\027\032\031\031\032\033\036\036\001\002" +
    "\000\004\026\215\001\002\000\004\015\275\001\002\000" +
    "\004\002\ufff0\001\002\000\004\033\277\001\002\000\006" +
    "\027\016\034\ufff3\001\002\000\004\034\301\001\002\000" +
    "\004\014\302\001\002\000\022\006\027\010\024\011\026" +
    "\026\uffc6\027\032\031\031\032\033\036\036\001\002\000" +
    "\004\026\215\001\002\000\004\015\305\001\002\000\006" +
    "\003\ufffc\030\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\002\004\013\003\001\001\000\002\001" +
    "\001\000\004\003\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\014\021\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\021\001\001\000\004\033" +
    "\213\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\212\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\141\001\001\000\002\001" +
    "\001\000\004\022\123\001\001\000\002\001\001\000\022" +
    "\004\024\005\033\006\037\010\036\011\022\012\027\014" +
    "\034\017\116\001\001\000\022\004\024\005\033\006\037" +
    "\010\036\011\022\012\027\014\034\017\115\001\001\000" +
    "\002\001\001\000\022\004\024\005\033\006\037\010\036" +
    "\011\022\012\027\014\034\017\073\001\001\000\024\004" +
    "\024\005\033\006\037\007\042\010\036\011\022\012\027" +
    "\014\034\017\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\043\001\001\000\002\001\001\000" +
    "\022\004\024\005\033\006\037\010\036\011\022\012\027" +
    "\014\034\017\071\001\001\000\002\001\001\000\012\016" +
    "\050\030\055\031\054\032\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\057\032\051\001\001\000\002\001\001\000\012\016" +
    "\061\030\055\031\054\032\051\001\001\000\002\001\001" +
    "\000\010\030\064\031\054\032\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\005\033\006\037\010\036\011\022\012\027\014\034\017" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\103\025\100\026\101\027\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\105\026\101\027\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\110\027\076\001\001\000\002" +
    "\001\001\000\004\027\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\120\026\101\027\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\127\001\001\000\002\001\001\000\010\015\131" +
    "\026\101\027\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\134\030\055\031\054\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\005" +
    "\033\006\037\010\036\011\022\012\027\014\034\017\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\143\030\055\031\054\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\005" +
    "\033\006\037\010\036\011\022\012\027\014\034\017\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\024\005\033\006\037\010\036\011\022\012" +
    "\027\014\034\017\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\024\005\033\006\037\010\036\011\022" +
    "\012\027\014\034\017\171\001\001\000\002\001\001\000" +
    "\004\024\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\201\026\101\027\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\024\005\033" +
    "\006\037\010\036\011\022\012\027\014\034\017\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\215\026\101\027\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\231\021\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\024" +
    "\005\033\006\037\010\036\011\022\012\027\014\034\017" +
    "\234\001\001\000\004\033\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\263\021\013\001\001\000" +
    "\006\020\241\021\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\024\005\033\006" +
    "\037\010\036\011\022\012\027\014\034\017\254\001\001" +
    "\000\022\004\024\005\033\006\037\010\036\011\022\012" +
    "\027\014\034\017\246\001\001\000\004\033\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\005" +
    "\033\006\037\010\036\011\022\012\027\014\034\017\260" +
    "\001\001\000\004\033\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\024\005\033\006\037\010\036\011\022\012\027\014" +
    "\034\017\266\001\001\000\004\033\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\024\005\033\006" +
    "\037\010\036\011\022\012\027\014\034\017\272\001\001" +
    "\000\004\033\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\277\021\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\024\005" +
    "\033\006\037\010\036\011\022\012\027\014\034\017\302" +
    "\001\001\000\004\033\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String error = "";
    private Symbol s;
    public void error(Symbol s){
        this.s = s;
        error += "No se esperaba: " + s.value.toString() + "\n";
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RETORNO ::= RETURN OPERACION FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CODE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CODE ::= PRINTCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CODE ::= OPTIONSCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CODE ::= LOOPCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CODE ::= FORCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CODE ::= IFCOND ELSECOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CODE ::= IFCOND CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CODE ::= ASIGNACION CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CODE ::= DECLARACION CODE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND3 ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COND2 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COND2 ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COND2 ::= COND3 ABREPAR CONDICION CIERRAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COND1 ::= COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COND1 ::= COND1 ANDOR COND2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICION ::= COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONDICION ::= CONDICION OPREL COND1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OP2 ::= ABREPAR OPERACION CIERRAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP2 ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP2 ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP1 ::= OP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP1 ::= OP1 OPMD OP2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= OP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= OPERACION OPSR OP1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINTER ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINTER ::= OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTT ::= DEFOPT ABRE CODE CIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTT ::= OPT ABREPAR VALOR CIERRAPAR ABRE CODE CIERRA OPTT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELSECOND ::= ELSE BEGIN CODE END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= ID ASIG OPERACION FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECL2 ::= ASIG OPERACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL ::= ID DECL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECL ::= DECL COMA ID DECL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= TYPE DECL FINLINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAINCOND ::= FUNCION FUNC MAIN BEGIN CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTATYPES ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTATYPES ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAPARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTAPARAM ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTAPARAM ::= TYPE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE error END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR error CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM error BEGIN CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCION2 ::= FUNC TYPE ID error LISTAPARAM CIERRAPAR BEGIN CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION2 ::= FUNC TYPE error ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION2 ::= FUNC error ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION2 ::= error TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // FUNCION ::= FUNCION FUNCION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAINCOND EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

