
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 29 13:05:09 CST 2020
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 29 13:05:09 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\046\003\000\002\002" +
    "\004\000\002\002\002\000\002\003\014\000\002\003\004" +
    "\000\002\020\004\000\002\020\006\000\002\020\002\000" +
    "\002\021\006\000\002\021\004\000\002\013\011\000\002" +
    "\013\003\000\002\004\005\000\002\004\004\000\002\022" +
    "\006\000\002\022\004\000\002\023\004\000\002\023\002" +
    "\000\002\005\006\000\002\005\004\000\002\006\011\000" +
    "\002\006\004\000\002\007\013\000\002\007\006\000\002" +
    "\007\004\000\002\010\020\000\002\010\004\000\002\011" +
    "\011\000\002\011\004\000\002\012\013\000\002\012\004" +
    "\000\002\024\012\000\002\024\006\000\002\014\007\000" +
    "\002\014\004\000\002\025\003\000\002\025\003\000\002" +
    "\047\005\000\002\047\004\000\002\015\005\000\002\015" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\016\005\000" +
    "\002\016\003\000\002\030\005\000\002\030\003\000\002" +
    "\031\006\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\002\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\005\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\002\000\002\033\005\000\002\033\004\000\002\035\005" +
    "\000\002\040\005\000\002\040\003\000\002\036\005\000" +
    "\002\041\005\000\002\041\003\000\002\037\003\000\002" +
    "\037\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\007" +
    "\000\002\044\003\000\002\044\002\000\002\045\005\000" +
    "\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\006\003\006\036\ufffe\001\002\000\004\002" +
    "\000\001\002\000\004\002\312\001\002\000\004\002\ufff5" +
    "\001\002\000\004\036\011\001\002\000\004\036\uffff\001" +
    "\002\000\010\003\012\007\013\035\014\001\002\000\004" +
    "\036\ufffc\001\002\000\004\014\306\001\002\000\004\040" +
    "\015\001\002\000\004\041\016\001\002\000\006\035\021" +
    "\042\ufff9\001\002\000\004\033\303\001\002\000\004\042" +
    "\023\001\002\000\004\040\022\001\002\000\006\033\ufff7" +
    "\042\ufffb\001\002\000\004\014\024\001\002\000\024\006" +
    "\027\010\045\011\043\034\uffbe\035\035\037\032\040\034" +
    "\044\040\054\026\001\002\000\036\006\027\010\045\011" +
    "\043\017\uffbe\020\uffbe\021\uffbe\023\uffbe\026\uffbe\034\uffbe" +
    "\035\035\037\032\040\034\044\040\054\026\001\002\000" +
    "\006\003\300\040\277\001\002\000\006\003\270\041\271" +
    "\001\002\000\036\006\027\010\045\011\043\017\uffbe\020" +
    "\uffbe\021\uffbe\023\uffbe\026\uffbe\034\uffbe\035\035\037\032" +
    "\040\034\044\040\054\026\001\002\000\036\006\027\010" +
    "\045\011\043\017\uffbe\020\uffbe\021\uffbe\023\uffbe\026\uffbe" +
    "\034\uffbe\035\035\037\032\040\034\044\040\054\026\001" +
    "\002\000\006\003\257\041\260\001\002\000\004\034\252" +
    "\001\002\000\010\003\235\030\236\041\237\001\002\000" +
    "\006\003\224\040\223\001\002\000\036\006\027\010\045" +
    "\011\043\017\uffbe\020\uffbe\021\uffbe\023\uffbe\026\uffbe\034" +
    "\uffbe\035\035\037\032\040\034\044\040\054\026\001\002" +
    "\000\036\006\027\010\045\011\043\017\uffbe\020\uffbe\021" +
    "\uffbe\023\uffbe\026\uffbe\034\uffbe\035\035\037\032\040\034" +
    "\044\040\054\026\001\002\000\006\003\212\041\213\001" +
    "\002\000\040\006\027\010\045\011\043\017\uffbe\020\uffbe" +
    "\021\uffbe\023\uffbe\026\uffbe\034\uffbe\035\035\037\032\040" +
    "\034\043\154\044\040\054\026\001\002\000\036\006\027" +
    "\010\045\011\043\017\uffbe\020\uffbe\021\uffbe\023\uffbe\026" +
    "\uffbe\034\uffbe\035\035\037\032\040\034\044\040\054\026" +
    "\001\002\000\006\003\102\041\103\001\002\000\036\006" +
    "\027\010\045\011\043\017\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\026\uffbe\034\uffbe\035\035\037\032\040\034\044\040\054" +
    "\026\001\002\000\006\003\050\041\051\001\002\000\036" +
    "\006\027\010\045\011\043\017\uffbe\020\uffbe\021\uffbe\023" +
    "\uffbe\026\uffbe\034\uffbe\035\035\037\032\040\034\044\040" +
    "\054\026\001\002\000\016\017\uffc4\020\uffc4\021\uffc4\023" +
    "\uffc4\026\uffc4\034\uffc4\001\002\000\036\006\uffe6\010\uffe6" +
    "\011\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6\026\uffe6\034" +
    "\uffe6\035\uffe6\037\uffe6\040\uffe6\044\uffe6\054\uffe6\001\002" +
    "\000\004\035\052\001\002\000\004\040\053\001\002\000" +
    "\004\027\054\001\002\000\010\040\055\041\061\045\062" +
    "\001\002\000\016\024\uffd4\031\uffd4\032\uffd4\033\uffd4\042" +
    "\uffd4\053\uffd4\001\002\000\016\024\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\042\uffd6\053\uffd6\001\002\000\016\024\uffd8\031" +
    "\067\032\uffd8\033\uffd8\042\uffd8\053\uffd8\001\002\000\006" +
    "\032\064\033\071\001\002\000\010\040\055\041\061\045" +
    "\062\001\002\000\016\024\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\042\uffd5\053\uffd5\001\002\000\006\032\064\042\065\001" +
    "\002\000\010\040\055\041\061\045\062\001\002\000\016" +
    "\024\uffd3\031\uffd3\032\uffd3\033\uffd3\042\uffd3\053\uffd3\001" +
    "\002\000\016\024\uffd9\031\067\032\uffd9\033\uffd9\042\uffd9" +
    "\053\uffd9\001\002\000\010\040\055\041\061\045\062\001" +
    "\002\000\016\024\uffd7\031\uffd7\032\uffd7\033\uffd7\042\uffd7" +
    "\053\uffd7\001\002\000\004\040\072\001\002\000\004\032" +
    "\073\001\002\000\004\032\074\001\002\000\004\042\075" +
    "\001\002\000\004\014\076\001\002\000\024\006\027\010" +
    "\045\011\043\021\uffbe\035\035\037\032\040\034\044\040" +
    "\054\026\001\002\000\004\021\100\001\002\000\036\006" +
    "\uffe7\010\uffe7\011\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7" +
    "\026\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7\044\uffe7\054" +
    "\uffe7\001\002\000\016\017\uffc2\020\uffc2\021\uffc2\023\uffc2" +
    "\026\uffc2\034\uffc2\001\002\000\036\006\uffe2\010\uffe2\011" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\026\uffe2\034\uffe2" +
    "\035\uffe2\037\uffe2\040\uffe2\044\uffe2\054\uffe2\001\002\000" +
    "\004\040\104\001\002\000\004\033\105\001\002\000\004" +
    "\035\106\001\002\000\004\042\107\001\002\000\004\014" +
    "\110\001\002\000\006\012\111\013\112\001\002\000\004" +
    "\052\120\001\002\000\004\025\115\001\002\000\004\016" +
    "\114\001\002\000\036\006\uffe3\010\uffe3\011\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\023\uffe3\026\uffe3\034\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\044\uffe3\054\uffe3\001\002\000\024\006\027" +
    "\010\045\011\043\026\uffbe\035\035\037\032\040\034\044" +
    "\040\054\026\001\002\000\004\026\117\001\002\000\004" +
    "\016\uffe0\001\002\000\014\040\055\041\125\045\062\046" +
    "\131\047\123\001\002\000\012\024\uffb0\033\uffb0\042\uffb0" +
    "\053\uffb0\001\002\000\004\053\146\001\002\000\012\024" +
    "\uffb4\033\uffb4\042\uffb4\053\uffb4\001\002\000\014\024\uffaf" +
    "\032\064\033\uffaf\042\uffaf\053\uffaf\001\002\000\014\040" +
    "\055\041\135\045\062\046\131\047\123\001\002\000\012" +
    "\024\uffb1\033\uffb1\042\uffb1\053\uffb1\001\002\000\012\024" +
    "\uffb3\033\uffb3\042\uffb3\053\uffb3\001\002\000\012\024\uffb2" +
    "\033\uffb2\042\uffb2\053\uffb2\001\002\000\012\024\uffb5\033" +
    "\uffb5\042\uffb5\053\uffb5\001\002\000\006\033\143\042\144" +
    "\001\002\000\006\033\137\042\140\001\002\000\006\033" +
    "\uffb9\042\uffb9\001\002\000\014\040\055\041\061\045\062" +
    "\046\131\047\123\001\002\000\006\033\uffb6\042\uffb6\001" +
    "\002\000\004\041\141\001\002\000\012\024\uffb8\033\uffb8" +
    "\042\uffb8\053\uffb8\001\002\000\006\046\131\047\123\001" +
    "\002\000\006\033\uffb7\042\uffb7\001\002\000\006\046\131" +
    "\047\123\001\002\000\012\024\uffbb\033\uffbb\042\uffbb\053" +
    "\uffbb\001\002\000\006\033\uffba\042\uffba\001\002\000\004" +
    "\025\147\001\002\000\024\006\027\010\045\011\043\026" +
    "\uffbe\035\035\037\032\040\034\044\040\054\026\001\002" +
    "\000\004\026\151\001\002\000\006\012\111\013\112\001" +
    "\002\000\004\016\uffe1\001\002\000\016\017\uffc0\020\uffc0" +
    "\021\uffc0\023\uffc0\026\uffc0\034\uffc0\001\002\000\010\003" +
    "\160\014\161\037\162\001\002\000\016\017\uffc6\020\uffc6" +
    "\021\uffc6\023\uffc6\026\uffc6\034\uffc6\001\002\000\036\006" +
    "\027\010\045\011\043\017\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\026\uffbe\034\uffbe\035\035\037\032\040\034\044\040\054" +
    "\026\001\002\000\016\017\uffc5\020\uffc5\021\uffc5\023\uffc5" +
    "\026\uffc5\034\uffc5\001\002\000\036\006\uffe8\010\uffe8\011" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\026\uffe8\034\uffe8" +
    "\035\uffe8\037\uffe8\040\uffe8\044\uffe8\054\uffe8\001\002\000" +
    "\024\006\027\010\045\011\043\020\uffbe\035\035\037\032" +
    "\040\034\044\040\054\026\001\002\000\004\041\163\001" +
    "\002\000\014\040\164\041\uffc9\045\173\047\172\051\166" +
    "\001\002\000\010\004\uffcc\005\uffcc\042\uffcc\001\002\000" +
    "\006\005\200\042\203\001\002\000\004\041\uffca\001\002" +
    "\000\004\041\176\001\002\000\010\004\uffcf\005\uffcf\042" +
    "\uffcf\001\002\000\010\004\174\005\uffd1\042\uffd1\001\002" +
    "\000\010\004\uffcd\005\uffcd\042\uffcd\001\002\000\010\004" +
    "\uffcb\005\uffcb\042\uffcb\001\002\000\014\040\164\041\uffc9" +
    "\045\173\047\172\051\166\001\002\000\010\004\uffd0\005" +
    "\uffd0\042\uffd0\001\002\000\014\040\164\041\uffc9\045\173" +
    "\047\172\051\166\001\002\000\006\005\200\042\201\001" +
    "\002\000\014\040\164\041\uffc9\045\173\047\172\051\166" +
    "\001\002\000\010\004\uffce\005\uffce\042\uffce\001\002\000" +
    "\010\004\174\005\uffd2\042\uffd2\001\002\000\004\014\204" +
    "\001\002\000\024\006\027\010\045\011\043\020\uffbe\035" +
    "\035\037\032\040\034\044\040\054\026\001\002\000\004" +
    "\020\206\001\002\000\004\043\154\001\002\000\036\006" +
    "\uffea\010\uffea\011\uffea\017\uffea\020\uffea\021\uffea\023\uffea" +
    "\026\uffea\034\uffea\035\uffea\037\uffea\040\uffea\044\uffea\054" +
    "\uffea\001\002\000\004\020\211\001\002\000\036\006\uffe9" +
    "\010\uffe9\011\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9\026" +
    "\uffe9\034\uffe9\035\uffe9\037\uffe9\040\uffe9\044\uffe9\054\uffe9" +
    "\001\002\000\036\006\uffde\010\uffde\011\uffde\017\uffde\020" +
    "\uffde\021\uffde\023\uffde\026\uffde\034\uffde\035\uffde\037\uffde" +
    "\040\uffde\044\uffde\054\uffde\001\002\000\016\040\055\041" +
    "\125\045\062\046\131\047\123\050\215\001\002\000\004" +
    "\042\uffdd\001\002\000\004\042\uffdc\001\002\000\004\042" +
    "\217\001\002\000\004\024\220\001\002\000\036\006\uffdf" +
    "\010\uffdf\011\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\026" +
    "\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\044\uffdf\054\uffdf" +
    "\001\002\000\016\017\uffc3\020\uffc3\021\uffc3\023\uffc3\026" +
    "\uffc3\034\uffc3\001\002\000\016\017\uffc7\020\uffc7\021\uffc7" +
    "\023\uffc7\026\uffc7\034\uffc7\001\002\000\010\024\uffef\030" +
    "\232\033\uffef\001\002\000\036\006\ufff3\010\ufff3\011\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\023\ufff3\026\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\044\ufff3\054\ufff3\001\002\000\006" +
    "\024\227\033\226\001\002\000\004\040\230\001\002\000" +
    "\036\006\ufff4\010\ufff4\011\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\023\ufff4\026\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\044" +
    "\ufff4\054\ufff4\001\002\000\010\024\uffef\030\232\033\uffef" +
    "\001\002\000\006\024\ufff2\033\ufff2\001\002\000\014\040" +
    "\055\041\125\045\062\046\131\047\123\001\002\000\006" +
    "\024\ufff0\033\ufff0\001\002\000\006\024\ufff1\033\ufff1\001" +
    "\002\000\036\006\uffed\010\uffed\011\uffed\017\uffed\020\uffed" +
    "\021\uffed\023\uffed\026\uffed\034\uffed\035\uffed\037\uffed\040" +
    "\uffed\044\uffed\054\uffed\001\002\000\014\040\055\041\125" +
    "\045\062\046\131\047\123\001\002\000\016\040\055\041" +
    "\125\042\uffac\045\062\046\131\047\123\001\002\000\006" +
    "\033\uffaa\042\uffaa\001\002\000\004\042\245\001\002\000" +
    "\006\033\243\042\uffad\001\002\000\014\040\055\041\125" +
    "\045\062\046\131\047\123\001\002\000\006\033\uffab\042" +
    "\uffab\001\002\000\004\024\246\001\002\000\036\006\uffae" +
    "\010\uffae\011\uffae\017\uffae\020\uffae\021\uffae\023\uffae\026" +
    "\uffae\034\uffae\035\uffae\037\uffae\040\uffae\044\uffae\054\uffae" +
    "\001\002\000\004\024\250\001\002\000\036\006\uffee\010" +
    "\uffee\011\uffee\017\uffee\020\uffee\021\uffee\023\uffee\026\uffee" +
    "\034\uffee\035\uffee\037\uffee\040\uffee\044\uffee\054\uffee\001" +
    "\002\000\004\022\256\001\002\000\016\003\254\040\055" +
    "\041\125\045\062\046\131\047\123\001\002\000\004\024" +
    "\255\001\002\000\006\015\uffbc\022\uffbc\001\002\000\006" +
    "\015\uffbd\022\uffbd\001\002\000\004\036\ufffd\001\002\000" +
    "\040\006\uffeb\010\uffeb\011\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\023\uffeb\026\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\043" +
    "\uffeb\044\uffeb\054\uffeb\001\002\000\014\040\164\041\uffc9" +
    "\045\173\047\172\051\166\001\002\000\006\005\200\042" +
    "\262\001\002\000\004\014\263\001\002\000\024\006\027" +
    "\010\045\011\043\017\uffbe\035\035\037\032\040\034\044" +
    "\040\054\026\001\002\000\004\017\265\001\002\000\040" +
    "\006\uffec\010\uffec\011\uffec\017\uffec\020\uffec\021\uffec\023" +
    "\uffec\026\uffec\034\uffec\035\uffec\037\uffec\040\uffec\043\uffec" +
    "\044\uffec\054\uffec\001\002\000\016\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\026\uffc8\034\uffc8\001\002\000\016\017\uffc1" +
    "\020\uffc1\021\uffc1\023\uffc1\026\uffc1\034\uffc1\001\002\000" +
    "\036\006\uffe4\010\uffe4\011\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\023\uffe4\026\uffe4\034\uffe4\035\uffe4\037\uffe4\040\uffe4\044" +
    "\uffe4\054\uffe4\001\002\000\014\040\164\041\uffc9\045\173" +
    "\047\172\051\166\001\002\000\006\005\200\042\273\001" +
    "\002\000\004\014\274\001\002\000\024\006\027\010\045" +
    "\011\043\023\uffbe\035\035\037\032\040\034\044\040\054" +
    "\026\001\002\000\004\023\276\001\002\000\036\006\uffe5" +
    "\010\uffe5\011\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\026" +
    "\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5\044\uffe5\054\uffe5" +
    "\001\002\000\004\024\301\001\002\000\036\006\uffda\010" +
    "\uffda\011\uffda\017\uffda\020\uffda\021\uffda\023\uffda\026\uffda" +
    "\034\uffda\035\uffda\037\uffda\040\uffda\044\uffda\054\uffda\001" +
    "\002\000\036\006\uffdb\010\uffdb\011\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\uffdb\026\uffdb\034\uffdb\035\uffdb\037\uffdb\040" +
    "\uffdb\044\uffdb\054\uffdb\001\002\000\016\017\uffbf\020\uffbf" +
    "\021\uffbf\023\uffbf\026\uffbf\034\uffbf\001\002\000\004\035" +
    "\304\001\002\000\004\040\305\001\002\000\006\033\ufff8" +
    "\042\ufffa\001\002\000\024\006\027\010\045\011\043\034" +
    "\uffbe\035\035\037\032\040\034\044\040\054\026\001\002" +
    "\000\004\034\252\001\002\000\004\015\311\001\002\000" +
    "\004\002\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\002\006\013\003\046\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\017\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\030\005\035\006\040\010" +
    "\045\011\036\012\043\014\027\017\032\043\041\047\024" +
    "\001\001\000\026\004\030\005\035\006\040\010\045\011" +
    "\036\012\043\014\027\017\301\043\041\047\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\030\005" +
    "\035\006\040\010\045\011\036\012\043\014\027\017\266" +
    "\043\041\047\024\001\001\000\026\004\030\005\035\006" +
    "\040\010\045\011\036\012\043\014\027\017\265\043\041" +
    "\047\024\001\001\000\002\001\001\000\004\033\250\001" +
    "\001\000\002\001\001\000\004\022\224\001\001\000\026" +
    "\004\030\005\035\006\040\010\045\011\036\012\043\014" +
    "\027\017\221\043\041\047\024\001\001\000\026\004\030" +
    "\005\035\006\040\010\045\011\036\012\043\014\027\017" +
    "\220\043\041\047\024\001\001\000\002\001\001\000\030" +
    "\004\030\005\035\006\040\007\155\010\045\011\036\012" +
    "\043\014\027\017\154\043\041\047\024\001\001\000\026" +
    "\004\030\005\035\006\040\010\045\011\036\012\043\014" +
    "\027\017\152\043\041\047\024\001\001\000\002\001\001" +
    "\000\026\004\030\005\035\006\040\010\045\011\036\012" +
    "\043\014\027\017\100\043\041\047\024\001\001\000\002" +
    "\001\001\000\026\004\030\005\035\006\040\010\045\011" +
    "\036\012\043\014\027\017\046\043\041\047\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\057\026\056" +
    "\027\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\062\026\056" +
    "\027\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\065\027\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\030\005\035\006" +
    "\040\010\045\011\036\012\043\014\027\017\076\043\041" +
    "\047\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\030\005\035\006\040\010\045\011\036\012\043\014\027" +
    "\017\115\043\041\047\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\123\026\056\027\055\034\120" +
    "\035\127\036\126\037\125\042\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\062\026\056\027\055\035\135\037\133\040" +
    "\131\041\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\062\026\056" +
    "\027\055\037\133\040\131\001\001\000\002\001\001\000" +
    "\004\035\141\001\001\000\002\001\001\000\006\037\133" +
    "\040\131\001\001\000\002\001\001\000\004\037\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\030\005\035\006\040\010\045\011\036\012" +
    "\043\014\027\017\147\043\041\047\024\001\001\000\002" +
    "\001\001\000\004\024\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\030\005\035\006\040\010\045\011\036\012\043\014" +
    "\027\017\156\043\041\047\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\030\005\035\006\040\010" +
    "\045\011\036\012\043\014\027\017\207\043\041\047\024" +
    "\001\001\000\002\001\001\000\012\016\164\030\170\031" +
    "\167\032\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\174\032\166\001\001\000\002\001\001\000\012\016" +
    "\176\030\170\031\167\032\166\001\001\000\002\001\001" +
    "\000\010\030\201\031\167\032\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\030" +
    "\005\035\006\040\010\045\011\036\012\043\014\027\017" +
    "\204\043\041\047\024\001\001\000\002\001\001\000\004" +
    "\007\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\015\123\025\215" +
    "\026\056\027\055\034\120\035\127\036\126\037\125\042" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\230\001\001\000\002\001\001\000\022" +
    "\015\123\026\056\027\055\034\120\035\127\036\126\037" +
    "\125\042\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\123\026\056\027\055\034" +
    "\120\035\127\036\126\037\125\042\246\001\001\000\026" +
    "\015\123\026\056\027\055\034\120\035\127\036\126\037" +
    "\125\042\237\044\240\045\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\123\026" +
    "\056\027\055\034\120\035\127\036\126\037\125\042\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\123\026\056\027\055\034\120\035\127\036" +
    "\126\037\125\042\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\260\030\170\031\167\032\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\030\005" +
    "\035\006\040\010\045\011\036\012\043\014\027\017\263" +
    "\043\041\047\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\271\030\170\031\167\032\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\030\005\035" +
    "\006\040\010\045\011\036\012\043\014\027\017\274\043" +
    "\041\047\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\030\005\035\006\040\010\045\011" +
    "\036\012\043\014\027\017\306\043\041\047\024\001\001" +
    "\000\004\033\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String error = "";
    public Symbol found;
    public Node raiz;
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	//System.out.println("Se encontro: " + found.value);
    }

    public void report_fatal_error(String errorBody, Object info){ 
        error = "Errores no Recuperables";
        found = (Symbol)info;
	System.out.println("Se encontro: " + found.value);
	System.out.println("No se esperaba el Token");
    }

    public void Func_Error(){
        switch(found.sym){
            case sym.TYPE: 
                System.out.println("Error en la declaracion de la funcion");
                break;
            case sym.ID:
                System.out.println("Error de Sintaxis se esperaba: type");
                break;
            case sym.ABREPAR: 
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.CIERRAPAR: 
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.BEGIN: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            case sym.ENDFU: 
                System.out.println("Error de Sintaxis se esperaba: begin");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void If_Error(){
        switch(found.sym){
            case sym.CIERRAPAR:
            case sym.ID:
            case sym.BOOL:
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.BEGIN: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: begin");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void Else_Error(){
        System.out.println("Error en el Else");
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    
    public void Loop_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                System.out.println("Error de Sintaxis se esperaba: loop");
                break;
            case sym.CIERRAPAR:
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.BEGIN: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            case sym.ENDI: 
                System.out.println("Error de Sintaxis se esperaba: begin");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: end loop");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }

    public void For_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                System.out.println("Error de Sintaxis se esperaba: for");
                break;
            case sym.TYPE:
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.ID: 
                System.out.println("Error de Sintaxis se esperaba: type o ,");
                break;
            case sym.HASTA: 
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.COMA: 
                System.out.println("Error de Sintaxis se esperaba: ->");
                break;
            case sym.OPSR: 
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.CIERRAPAR: 
                System.out.println("Error de Sintaxis se esperaba: +");
                break;
            case sym.BEGIN: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            case sym.ENDF: 
                System.out.println("Error de Sintaxis se esperaba: begin");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: end for");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }

    public void Options_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                System.out.println("Error de Sintaxis se esperaba: options");
                break;
            case sym.ID: 
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.COMA: 
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.TYPE: 
                System.out.println("Error de Sintaxis se esperaba: ,");
                break;
            case sym.CIERRAPAR: 
                System.out.println("Error de Sintaxis se esperaba: type");
                break;
            case sym.BEGIN: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            case sym.ENDO: 
                System.out.println("Error de Sintaxis se esperaba: begin");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: end options");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void Print_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                System.out.println("Error de Sintaxis se esperaba: print");
                break;
            case sym.CIERRAPAR:
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.FINLINE: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: ;");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void Read_Error(){
        if (found.sym == sym.FINLINE){
            System.out.println("Error de Sintaxis se esperaba: id");
        }else{
            System.out.println("Error de Sintaxis se esperaba: ;");
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    /*public void Llamado_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.CIERRAPAR:
                System.out.println("Error de Sintaxis se esperaba: (");
                break;
            case sym.FINLINE: 
                System.out.println("Error de Sintaxis se esperaba: )");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: ;");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }*/
    public void Return_Error(){
        switch(found.sym){
            case sym.FINLINE: 
                System.out.println("Error de Sintaxis se esperaba: return");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: ;");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void Asignacion_Error(){
        switch(found.sym){
            case sym.ASIG: 
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.FINLINE:
                System.out.println("Error de Sintaxis se esperaba: =");
            default:
                System.out.println("Error de Sintaxis se esperaba: ;");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void Declaracion_Error(){
        switch(found.sym){
            case sym.ID:
                System.out.println("Error de Sintaxis se esperaba: ','");
                break;
            case sym.COMA:
            case sym.FINLINE:
                System.out.println("Error de Sintaxis se esperaba: id o un valor");
                break;
            case sym.ASIG:
                System.out.println("Error de Sintaxis se esperaba: id");
                break;
            case sym.INT:
                System.out.println("Error de Sintaxis se esperaba: '='");
                break;
            default:
                System.out.println("Error de Sintaxis se esperaba: ;");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }
    public void Main_Error(){
        switch(found.sym){
            case sym.BEGIN: 
                System.out.println("Error de Sintaxis se esperaba: int_main()");
                break;
            default:
                System.out.println("Error en el Main");
                break;
        }
        System.out.println("Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMS1 ::= VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node params = new Node("LISTA PARAMETROS");
                //params.addNode(v);
                RESULT = v;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMS1 ::= PARAMS1 COMA VALORO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node params = new Node("LISTA PARAMETROS");
                params.addNode(p);
                //params.addNode(new Node("COMA", ","));
                params.addNode(v);
                RESULT = params;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS1",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMS ::= PARAMS1 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node params = new Node("PARAMETROS ENVIO");
                //params.addNode(o);
                RESULT = o;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LLAMADO ::= ID ABREPAR PARAMS CIERRAPAR FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Node llamado = new Node("LLAMDA FUNCION");
                llamado.addNode(new Node("ID", ((String) i)));
                //llamado.addNode(new Node("ABREPAR", "("));
                llamado.addNode(o);
                //llamado.addNode(new Node("CIERRAPAR", ")"));
                //llamado.addNode(new Node("FINLINE", ";"));
                RESULT = llamado;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORO ::= OPERACION 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORO ::= VALOR 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALOR ::= VALOR1 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALOR ::= ARREGLO 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALOR ::= MATRIZ 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR1 ::= BOOL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node val = new Node("VALOR");
                Node val = new Node("BOOL", ((String) v));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR1 ::= CHAR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node val = new Node("VALOR");
                Node val = new Node("CHAR", ((String) v));
                RESULT = val;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MATRIZ1 ::= ARREGLO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node mat = new Node("LISTA MATRIX");
                //mat.addNode(v);
                RESULT = v;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MATRIZ1 ::= MATRIZ1 COMA ARREGLO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node mat = new Node("MATRIX");
                mat.addNode(a);
                //mat.addNode(new Node("COMA", ","));
                mat.addNode(v);
                RESULT = mat;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MATRIZ ::= ABREPAR MATRIZ1 CIERRAPAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //Node matriz = new Node("MATRIX");
                //matriz.addNode(new Node("ABREPAR", "("));
                //matriz.addNode(a);
                //matriz.addNode(new Node("CIERRAPAR", ")"));
                RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATRIZ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARREGLO1 ::= VALOR1 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node arr = new Node("LISTA ARRAY");
                //arr.addNode(v);
                RESULT = v;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARREGLO1 ::= ARREGLO1 COMA VALOR1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node arr = new Node("ARRAY");
                arr.addNode(a);
                //arr.addNode(new Node("COMA", ","));
                arr.addNode(v);
                RESULT = arr;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARREGLO ::= ABREPAR ARREGLO1 CIERRAPAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node arreglo = new Node("ARRAY");
                arreglo.addNode(new Node("ABREPAR", "("));
                arreglo.addNode(a);
                arreglo.addNode(new Node("CIERRAPAR", ")"));
                RESULT = arreglo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARREGLO",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RETORNO ::= RETURN error 
            {
              Object RESULT =null;
		 System.out.println("RETORNO");parser.Return_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RETORNO ::= RETURN VALORO FINLINE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node retorno = new Node("RETURN");
            //retorno.addNode(new Node("RETURN", "return"));
            retorno.addNode(v);
            //retorno.addNode(new Node("FINLINE", ";"));
            RESULT = retorno;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CODE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CODE ::= READCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CODE ::= LLAMADO CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CODE ::= PRINTCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CODE ::= OPTIONSCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CODE ::= LOOPCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CODE ::= FORCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CODE ::= IFCOND ELSECOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(e);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CODE ::= IFCOND CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CODE ::= ASIGNACION CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CODE ::= DECLARACION CODE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CODE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COND3 ::= NOT 
            {
              Object RESULT =null;
		
            //Node cond3 = new Node("VALOR OPERACION");
            Node cond3 = new Node("NOT", "!");
            RESULT = cond3;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COND2 ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node cond2 = new Node("INT", ((String) i));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND2 ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            //Node cond2 = new Node("VALOR OPERACION");
            Node cond2 = new Node("ID", ((String) i));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND2 ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    
            //Node cond2 = new Node("VALOR OPERACION");
            Node cond2 = new Node("BOOL", ((String) b));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND2 ::= COND3 ABREPAR CONDICION CIERRAPAR 
            {
              Object RESULT =null;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node cond2 = new Node("VALOR OPERACION");
            cond2.addNode(c3);
            cond2.addNode(new Node("ABREPAR", "("));
            cond2.addNode(c);
            cond2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = cond2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COND1 ::= COND2 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node cond1 = new Node("OPERACION ANDOR");
            //cond1.addNode(c2);
            RESULT = c2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COND1 ::= COND1 ANDOR COND2 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node cond1 = new Node("OPERACION ANDOR");
            Node cond1 = new Node("ANDOR", ((String) a));
            cond1.addNode(c1);
            cond1.addNode(c2);
            RESULT = cond1;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICION ::= COND1 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node condicion = new Node("OPERACION OPREL");
                //condicion.addNode(c1);
                RESULT = c1;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICION ::= CONDICION OPREL COND1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node condicion = new Node("OPERACION OPREL");
                Node condicion = new Node("OPREL", ((String) op));
                condicion.addNode(c);
                condicion.addNode(c1);
                RESULT = condicion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP2 ::= ABREPAR OPERACION CIERRAPAR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node op2 = new Node("VALOR OPERACION");
            op2.addNode(new Node("ABREPAR", "("));
            op2.addNode(o);
            op2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = o;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP2 ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node op2 = new Node("VALOR OPERACION");
            Node op2 = new Node("ID", ((String) i));
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP2 ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node op2 = new Node("VALOR OPERACION");
            Node op2 = new Node("INT", ((String) i));
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP1 ::= OP2 
            {
              Object RESULT =null;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node operacion = new Node("OPERACION MD");
            //operacion.addNode(op2);
            RESULT = op2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP1 ::= OP1 OPMD OP2 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //Node operacion = new Node("OPERACION MD");
            Node operacion = new Node("OPMD", ((String) op));
            operacion.addNode(op1);
            operacion.addNode(op2);
            RESULT = operacion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= OP1 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node operacion = new Node("OPERACION SR");
                //operacion.addNode(op1);
                RESULT = op1;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= OPERACION OPSR OP1 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //Node operacion = new Node("OPERACION SR");
                Node operacion = new Node("OPSR", ((String) op));
                operacion.addNode(o);
                operacion.addNode(op1);
                RESULT = operacion;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // READCOND ::= READ error 
            {
              Object RESULT =null;
		 System.out.println("READ");parser.Read_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READCOND",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // READCOND ::= READ ID FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node r = new Node("READ");
                r.addNode(new Node("STRING", ((String) i)));
                RESULT = r;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("READCOND",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINTER ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                //Node prin = new Node("PRINT CONTENT");
                Node prin = new Node("STRING", ((String) s));
                RESULT = prin;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRINTER ::= VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                //Node prin = new Node("PRINT CONTENT");
                //prin.addNode(v);
                RESULT = v;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRINTCOND ::= PRINT error 
            {
              Object RESULT =null;
		 System.out.println("PRINT");parser.Print_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Node printcond = new Node("PRINT");
                //printcond.addNode(new Node("PRINT", "print"));
                //printcond.addNode(new Node("ABREPAR", "("));
                printcond.addNode(p);
                //printcond.addNode(new Node("CIERRAPAR", ")"));
                //printcond.addNode(new Node("FINLINE", ";"));
                RESULT = printcond;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTCOND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPTT ::= DEFOPT ABRE CODE CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node optt = new Node("BLOQUE DEFAULT OPTION");
            //optt.addNode(new Node("DEFOPT", "opt_def"));
            //optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            //optt.addNode(new Node("CIERRA", "}"));
            RESULT = optt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPTT ::= OPT ABRECOR VALORO CIERRACOR ABRE CODE CIERRA OPTT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node optt = new Node("BLOQUE OPTION");
            //optt.addNode(new Node("OPTION", "opt"));
            //optt.addNode(new Node("ABRECOR", "["));
            optt.addNode(v);
            //optt.addNode(new Node("CIERRACOR", "]"));
            //optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            //optt.addNode(new Node("CIERRA", "}"));
            optt.addNode(o);
            RESULT = optt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPTIONSCOND ::= OPTIONS error 
            {
              Object RESULT =null;
		 System.out.println("OPTIONS");parser.Options_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT ENDO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Node optionscond = new Node("BLOQUE OPTIONS");
                   // optionscond.addNode(new Node("OPTIONS", "options"));
                  //  optionscond.addNode(new Node("ABREPAR", "("));
                    optionscond.addNode(new Node("ID", ((String) i)));
                 //   optionscond.addNode(new Node("COMA", ","));
                    optionscond.addNode(new Node("TYPE", ((String) t)));
                 //   optionscond.addNode(new Node("CIERRAPAR", ")"));
                 //   optionscond.addNode(new Node("BEGIN", "begin"));
                    optionscond.addNode(o);
                 //   optionscond.addNode(new Node("ENDO", "end options"));
                    RESULT = optionscond;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPTIONSCOND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LOOPCOND ::= LOOP error 
            {
              Object RESULT =null;
		 System.out.println("LOOP");parser.Loop_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node loopcond = new Node("BLOQUE LOOP");
                //loopcond.addNode(new Node("LOOP", "loop"));
               // loopcond.addNode(new Node("ABREPAR", "("));
                loopcond.addNode(c);
               // loopcond.addNode(new Node("CIERRAPAR", ")"));
              //  loopcond.addNode(new Node("BEGIN", "begin"));
                loopcond.addNode(code);
               // loopcond.addNode(new Node("ENDL", "end loop"));
                RESULT = loopcond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOOPCOND",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FORCOND ::= FOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("FOR");parser.For_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE ENDF 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node forcond = new Node("BLOQUE FOR");
                //forcond.addNode(new Node("FOR", "for"));
                //forcond.addNode(new Node("ABREPAR", "("));
                forcond.addNode(new Node("TYPE", ((String) t)));
                forcond.addNode(new Node("ID", ((String) i)));
                forcond.addNode(new Node("HASTA", "->"));
                forcond.addNode(o);
                //forcond.addNode(new Node("COMA", ","));
                forcond.addNode(new Node("ID", ((String) id)));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("OPSR", "+"));
               // forcond.addNode(new Node("CIERRAPAR", ")"));
              //  forcond.addNode(new Node("BEGIN", "begin"));
                forcond.addNode(c);
              //  forcond.addNode(new Node("ENDF", "end for"));
                RESULT = forcond;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELSECOND ::= ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ELSE");parser.Else_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELSECOND ::= ELSE BEGIN CODE ENDE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node elsecond = new Node("BLOQUE ELSE");
               // elsecond = new Node("ELSE", "else");
                //elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(c);
               // elsecond.addNode(new Node("ENDE", "end else"));
                RESULT = elsecond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDE ELSECOND 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node elsecond = new Node("BLOQUE ELSE IF");
               // elsecond.addNode(new Node("ELSE", "else"));
               // elsecond.addNode(new Node("IF", "if"));
               // elsecond.addNode(new Node("ABREPAR", "("));
                elsecond.addNode(c);
               // elsecond.addNode(new Node("CIERRAPAR", ")"));
               // elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(code);
                //elsecond.addNode(new Node("ENDE", "end else"));
                elsecond.addNode(e);
                RESULT = elsecond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IFCOND ::= IF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("IF");parser.If_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Node ifcond = new Node("BLOQUE IF");
        //    ifcond.addNode(new Node("IF", "if"));
        //    ifcond.addNode(new Node("ABREPAR", "("));
            ifcond.addNode(c);
        //    ifcond.addNode(new Node("CIERRAPAR", ")"));
        //    ifcond.addNode(new Node("BEGIN", "begin"));
            ifcond.addNode(code);
          //  ifcond.addNode(new Node("ENDI", "end if"));
            RESULT = ifcond;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFCOND",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("ASIGNACION");parser.Asignacion_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= ID ASIG VALORO FINLINE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node asignacion = new Node("ASIGNACION");
                asignacion.addNode(new Node("ID", ((String) i)));
                asignacion.addNode(new Node("ASIG", "="));
                asignacion.addNode(v);
                //asignacion.addNode(new Node("FINLINE", ";"));
                RESULT = asignacion;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECL2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECL2 ::= ASIG VALORO 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl2 = new Node("DECLARACION CON ASIGNACION");
            decl2.addNode(new Node("ASIG", "="));
            decl2.addNode(v);
            RESULT = decl2;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL ::= ID DECL2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECL ::= DECL COMA ID DECL2 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(d);
          //  decl.addNode(new Node("COMA", ","));
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= TYPE error 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");parser.Declaracion_Error();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TYPE DECL FINLINE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Node declaracion = new Node("DECLARACION");
                    declaracion.addNode(new Node("TYPE", ((String) t)));
                    declaracion.addNode(d);
                   // declaracion.addNode(new Node("FINLINE", ";"));
                    RESULT = declaracion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MAINCOND ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("MAIN");parser.Main_Error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MAINCOND ::= FUNCION FUNC MAIN BEGIN CODE RETORNO ENDM 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node maincond = new Node("MAIN");
                maincond.addNode(f);
               // maincond.addNode(new Node("FUNC", "func"));
                //maincond.addNode(new Node("MAIN", "int_main()"));
              //  maincond.addNode(new Node("BEGIN", "begin"));
                maincond.addNode(code);
                maincond.addNode(retorno);
               // maincond.addNode(new Node("ENDM", "end main"));
                RESULT = maincond;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINCOND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTATYPES ::= TYPE ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTATYPES ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(lista);
                //listatypes.addNode(new Node("COMA", ","));
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTATYPES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAPARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAPARAM ::= LISTATYPES COMA TYPE ID 
            {
              Object RESULT =null;
		int listatypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listatypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object listatypes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(listatypes);
                //listaparam.addNode(new Node("COMA", ","));
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTAPARAM ::= TYPE ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCION2 ::= FUNC error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Funcion");parser.Func_Error();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO ENDFU 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int listaparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object listaparam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Node funcion2 = new Node("FUNCION");
                //funcion2.addNode(new Node("FUNC", "func"));
                funcion2.addNode(new Node("TYPE", ((String) t)));
                funcion2.addNode(new Node("ID", ((String) i)));
                //funcion2.addNode(new Node("ABREPAR", "("));
                funcion2.addNode(listaparam);
                //funcion2.addNode(new Node("CIERRAPAR", ")"));
                //funcion2.addNode(new Node("BEGIN", "begin"));
                funcion2.addNode(code);
                funcion2.addNode(retorno);
                //funcion2.addNode(new Node("ENDFU", "end func"));
                RESULT = funcion2;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION2",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION ::= FUNCION FUNCION2 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ff = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Node funcion = new Node("GENERAR FUNCION");
                funcion.addNode(f);
                funcion.addNode(ff);
                RESULT = funcion;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ORIGIN ::= MAINCOND 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.raiz = (Node)m;      
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORIGIN",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ORIGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

