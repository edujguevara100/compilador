/* The following code was generated by JFlex 1.6.1 */

package compilador;
import compilador.sym;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compilador/Lexer.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comment = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 41, 43, 44, 44, 43,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13, 22, 40,  0,  0,  0, 32, 39,  7,  8, 29, 30, 33, 26,  0, 42, 
    38, 38, 38, 38, 38, 38, 38, 38, 38, 38,  0, 23, 31, 28, 27,  0, 
     0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 
    37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,  0,  0,  0,  0,  4, 
     0,  6,  9, 21, 12, 10, 17, 11, 34,  1, 37, 37, 14,  5,  2, 15, 
    16, 37, 18, 19,  3, 20, 37, 37, 36, 35, 37, 24, 32, 25,  0,  0, 
     0,  0,  0,  0,  0, 44,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\1\2\2\1\3\1\4\2\2"+
    "\1\5\6\2\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\12\1\16\1\17\1\20\2\1\1\15"+
    "\1\5\2\21\1\22\1\21\1\23\1\0\16\21\1\13"+
    "\1\24\3\0\1\25\1\26\1\27\10\21\1\30\2\21"+
    "\1\31\3\21\1\20\1\32\1\0\1\20\4\21\1\27"+
    "\1\0\1\33\1\34\1\21\1\0\1\21\1\35\1\21"+
    "\1\0\3\21\1\36\6\0\1\21\1\0\1\37\1\21"+
    "\1\0\2\21\1\0\1\40\6\0\1\21\1\0\1\41"+
    "\13\0\1\42\1\43\6\0\1\27\3\0\1\44\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\132\0\132\0\u0195\0\u01c2\0\132\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\132\0\132\0\132"+
    "\0\u032a\0\u02fd\0\u02fd\0\132\0\132\0\132\0\132\0\u0357"+
    "\0\u0384\0\u03b1\0\u03de\0\u040b\0\264\0\u0438\0\264\0\u0465"+
    "\0\u010e\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0"+
    "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\132\0\132\0\u0735\0\u0762\0\u078f\0\132\0\132\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u09ab\0\264\0\u09d8\0\u0a05\0\u0a32\0\132"+
    "\0\132\0\u0a5f\0\264\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\264"+
    "\0\u0b40\0\264\0\264\0\u0b6d\0\u0b9a\0\u0bc7\0\264\0\u0bf4"+
    "\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\264\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\264\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\132\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\264\0\u1086\0\u10b3\0\u10e0"+
    "\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248"+
    "\0\264\0\132\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356"+
    "\0\132\0\u1383\0\u13b0\0\u13dd\0\132\0\u140a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\5\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\32\1\36\1\37"+
    "\4\5\1\40\1\41\1\42\1\16\1\43\1\16\1\0"+
    "\35\16\1\44\15\16\60\0\1\45\1\46\1\45\1\0"+
    "\2\45\2\0\4\45\1\0\3\45\1\47\4\45\14\0"+
    "\4\45\10\0\3\45\1\0\2\45\2\0\4\45\1\0"+
    "\10\45\14\0\4\45\10\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\4\45\1\50\3\45\14\0\4\45\10\0"+
    "\3\51\1\0\2\51\2\0\15\51\4\0\1\52\7\0"+
    "\5\51\7\0\3\45\1\0\1\45\1\53\2\0\4\45"+
    "\1\0\10\45\14\0\4\45\10\0\3\45\1\0\2\45"+
    "\2\0\4\45\1\0\4\45\1\54\3\45\14\0\4\45"+
    "\10\0\3\45\1\0\2\45\2\0\1\45\1\55\2\45"+
    "\1\0\1\45\1\56\6\45\14\0\4\45\10\0\1\45"+
    "\1\57\1\45\1\0\2\45\2\0\4\45\1\0\1\60"+
    "\7\45\14\0\4\45\10\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\1\45\1\61\6\45\14\0\4\45\10\0"+
    "\3\45\1\0\2\45\2\0\4\45\1\0\2\45\1\62"+
    "\5\45\14\0\4\45\10\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\4\45\1\63\3\45\14\0\4\45\10\0"+
    "\3\45\1\0\1\45\1\64\2\0\4\45\1\0\1\45"+
    "\1\65\4\45\1\66\1\45\14\0\4\45\10\0\3\45"+
    "\1\0\2\45\2\0\1\45\1\67\2\45\1\0\10\45"+
    "\14\0\4\45\10\0\3\45\1\0\2\45\2\0\4\45"+
    "\1\0\10\45\14\0\1\70\3\45\43\0\1\71\53\0"+
    "\1\72\12\0\1\40\54\0\1\40\7\0\3\73\1\0"+
    "\2\73\2\0\15\73\14\0\5\73\7\0\3\74\1\0"+
    "\2\74\2\0\15\74\4\0\1\75\7\0\5\74\2\0"+
    "\1\74\1\0\1\74\36\0\1\76\71\0\1\77\3\0"+
    "\2\45\1\100\1\0\2\45\2\0\4\45\1\0\10\45"+
    "\14\0\4\45\10\0\3\45\1\0\2\45\2\0\4\45"+
    "\1\0\6\45\1\101\1\45\14\0\4\45\55\0\1\51"+
    "\7\0\2\45\1\102\1\0\2\45\2\0\4\45\1\0"+
    "\10\45\14\0\4\45\10\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\4\45\1\103\3\45\14\0\4\45\10\0"+
    "\3\45\1\0\2\45\2\0\2\45\1\104\1\45\1\0"+
    "\10\45\14\0\4\45\10\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\1\45\1\105\6\45\14\0\4\45\10\0"+
    "\3\45\1\0\2\45\2\0\3\45\1\106\1\0\10\45"+
    "\14\0\4\45\10\0\3\45\1\0\2\45\2\0\4\45"+
    "\1\0\5\45\1\107\2\45\14\0\4\45\10\0\3\45"+
    "\1\0\2\45\2\0\4\45\1\0\1\45\1\110\6\45"+
    "\14\0\4\45\10\0\2\45\1\111\1\0\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\4\45\10\0\1\112\2\45"+
    "\1\0\2\45\2\0\4\45\1\0\10\45\14\0\4\45"+
    "\10\0\3\45\1\0\2\45\2\0\4\45\1\0\1\113"+
    "\7\45\14\0\4\45\10\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\4\45\1\114\3\45\14\0\4\45\10\0"+
    "\1\45\1\115\1\45\1\0\2\45\2\0\4\45\1\0"+
    "\10\45\14\0\4\45\10\0\2\45\1\116\1\0\2\45"+
    "\2\0\4\45\1\0\10\45\14\0\4\45\10\0\3\45"+
    "\1\0\1\45\1\117\2\0\4\45\1\0\10\45\14\0"+
    "\4\45\56\0\1\120\6\0\3\74\1\0\2\74\2\0"+
    "\15\74\4\0\1\75\7\0\5\74\1\0\1\121\1\74"+
    "\1\0\1\74\47\0\1\74\7\0\3\45\1\122\2\45"+
    "\2\0\4\45\1\0\10\45\14\0\4\45\10\0\3\45"+
    "\1\0\2\45\2\0\1\45\1\123\2\45\1\0\10\45"+
    "\14\0\4\45\10\0\1\124\2\45\1\0\2\45\2\0"+
    "\4\45\1\0\4\45\1\125\3\45\14\0\4\45\10\0"+
    "\3\45\1\0\1\45\1\126\2\0\4\45\1\0\10\45"+
    "\14\0\4\45\10\0\1\127\2\45\1\0\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\4\45\10\0\3\45\1\0"+
    "\2\45\2\0\4\45\1\0\1\130\7\45\14\0\4\45"+
    "\10\0\3\45\1\0\2\45\2\0\4\45\1\131\10\45"+
    "\14\0\4\45\10\0\3\45\1\0\2\45\2\0\1\45"+
    "\1\132\2\45\1\0\10\45\14\0\4\45\10\0\3\45"+
    "\1\0\2\45\2\0\4\45\1\0\2\45\1\133\5\45"+
    "\14\0\4\45\10\0\1\134\2\45\1\135\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\4\45\10\0\1\45\1\136"+
    "\1\45\1\0\2\45\2\0\4\45\1\0\10\45\14\0"+
    "\4\45\10\0\3\45\1\0\2\45\2\0\4\45\1\0"+
    "\5\45\1\101\2\45\14\0\4\45\10\0\3\45\1\0"+
    "\2\45\2\0\4\45\1\0\7\45\1\137\14\0\4\45"+
    "\10\0\3\45\1\0\2\45\2\0\4\45\1\0\6\45"+
    "\1\140\1\45\14\0\4\45\10\0\3\45\1\0\2\45"+
    "\2\0\4\45\1\0\4\45\1\130\3\45\14\0\4\45"+
    "\14\0\1\141\50\0\3\45\1\0\2\45\2\0\4\45"+
    "\1\0\4\45\1\142\3\45\14\0\4\45\10\0\1\143"+
    "\2\45\1\0\2\45\2\0\4\45\1\0\10\45\14\0"+
    "\4\45\10\0\3\45\1\0\2\45\2\0\4\45\1\0"+
    "\10\45\14\0\1\45\1\144\2\45\10\0\1\45\1\145"+
    "\1\45\1\0\2\45\2\0\4\45\1\0\10\45\14\0"+
    "\4\45\10\0\1\146\3\0\1\147\4\0\1\150\3\0"+
    "\1\151\1\152\1\0\1\153\34\0\3\45\1\0\2\45"+
    "\2\0\4\45\1\0\1\45\1\154\6\45\14\0\4\45"+
    "\23\0\1\155\41\0\2\45\1\156\1\0\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\4\45\10\0\3\45\1\0"+
    "\2\45\2\0\4\45\1\0\4\45\1\157\3\45\14\0"+
    "\4\45\15\0\1\160\47\0\3\45\1\0\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\2\45\1\161\1\45\10\0"+
    "\3\45\1\0\2\45\2\0\4\45\1\0\10\45\14\0"+
    "\2\45\1\162\1\45\10\0\3\45\1\163\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\4\45\30\0\1\164\41\0"+
    "\1\165\64\0\1\166\55\0\1\167\55\0\1\170\53\0"+
    "\1\171\4\0\1\172\31\0\1\45\1\173\1\45\1\0"+
    "\2\45\2\0\4\45\1\0\10\45\14\0\4\45\21\0"+
    "\1\174\43\0\1\45\1\175\1\45\1\0\2\45\2\0"+
    "\4\45\1\0\10\45\14\0\4\45\10\0\1\176\54\0"+
    "\3\45\1\177\2\45\2\0\4\45\1\0\10\45\14\0"+
    "\4\45\10\0\3\45\1\200\2\45\2\0\4\45\1\0"+
    "\10\45\14\0\4\45\10\0\1\201\7\0\1\202\13\0"+
    "\1\203\30\0\1\204\76\0\1\205\50\0\1\206\40\0"+
    "\1\207\73\0\1\164\34\0\1\210\53\0\3\45\1\0"+
    "\2\45\2\0\4\45\1\0\5\45\1\211\2\45\14\0"+
    "\4\45\30\0\1\212\35\0\1\213\63\0\1\202\44\0"+
    "\1\201\23\0\1\203\31\0\1\214\71\0\1\215\77\0"+
    "\1\216\14\0\1\164\64\0\1\164\62\0\1\164\35\0"+
    "\1\217\100\0\1\164\36\0\1\220\50\0\1\221\70\0"+
    "\1\222\43\0\1\223\65\0\1\224\45\0\1\225\62\0"+
    "\1\221\60\0\1\221\34\0\1\226\75\0\1\164\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5175];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\2\11\2\1\1\11\7\1\3\11"+
    "\3\1\4\11\12\1\1\0\16\1\2\11\3\0\2\11"+
    "\20\1\2\11\1\0\6\1\1\0\3\1\1\0\3\1"+
    "\1\0\4\1\6\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\11\6\0\1\1\1\0\1\1\13\0\1\1"+
    "\1\11\6\0\1\11\3\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String error = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error += "No reconoce: " + yytext() + " linea: " + yyline + " columna: "+yycolumn + "\n"; return new Symbol(sym.error, yyline, yycolumn,yytext());
            }
          case 37: break;
          case 2: 
            { error += "No se esperaba la letra: " + yytext() + " linea: " + yyline + " columna: "+yycolumn + "\n"; return new Symbol(sym.error, yyline, yycolumn,yytext());
            }
          case 38: break;
          case 3: 
            { return new Symbol(sym.ABREPAR, yyline, yycolumn,yytext());
            }
          case 39: break;
          case 4: 
            { return new Symbol(sym.CIERRAPAR, yyline, yycolumn,yytext());
            }
          case 40: break;
          case 5: 
            { 
            }
          case 41: break;
          case 6: 
            { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
            }
          case 42: break;
          case 7: 
            { return new Symbol(sym.FINLINE, yyline, yycolumn,yytext());
            }
          case 43: break;
          case 8: 
            { return new Symbol(sym.ABRE, yyline, yycolumn,yytext());
            }
          case 44: break;
          case 9: 
            { return new Symbol(sym.CIERRA, yyline, yycolumn,yytext());
            }
          case 45: break;
          case 10: 
            { return new Symbol(sym.OPSR, yyline, yycolumn,yytext());
            }
          case 46: break;
          case 11: 
            { return new Symbol(sym.OPREL, yyline, yycolumn,yytext());
            }
          case 47: break;
          case 12: 
            { return new Symbol(sym.ASIG, yyline, yycolumn,yytext());
            }
          case 48: break;
          case 13: 
            { return new Symbol(sym.OPMD, yyline, yycolumn,yytext());
            }
          case 49: break;
          case 14: 
            { return new Symbol(sym.ANDOR, yyline, yycolumn,yytext());
            }
          case 50: break;
          case 15: 
            { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            }
          case 51: break;
          case 16: 
            { return new Symbol(sym.VALOR, yyline, yycolumn,yytext());
            }
          case 52: break;
          case 17: 
            { error += "No se esperaba: " + yytext() + " linea: " + yyline + " columna: "+yycolumn + "\n"; return new Symbol(sym.error, yyline, yycolumn,yytext());
            }
          case 53: break;
          case 18: 
            { return new Symbol(sym.IF, yyline, yycolumn,yytext());
            }
          case 54: break;
          case 19: 
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          case 55: break;
          case 20: 
            { return new Symbol(sym.HASTA, yyline, yycolumn,yytext());
            }
          case 56: break;
          case 21: 
            { yybegin(comment);
            }
          case 57: break;
          case 22: 
            { yybegin(YYINITIAL);
            }
          case 58: break;
          case 23: 
            { return new Symbol(sym.TYPE, yyline, yycolumn,yytext());
            }
          case 59: break;
          case 24: 
            { return new Symbol(sym.OPT, yyline, yycolumn,yytext());
            }
          case 60: break;
          case 25: 
            { return new Symbol(sym.FOR, yyline, yycolumn,yytext());
            }
          case 61: break;
          case 26: 
            { return new Symbol(sym.STRING, yyline, yycolumn,yytext());
            }
          case 62: break;
          case 27: 
            { return new Symbol(sym.ELSE, yyline, yycolumn,yytext());
            }
          case 63: break;
          case 28: 
            { return new Symbol(sym.LOOP, yyline, yycolumn,yytext());
            }
          case 64: break;
          case 29: 
            { return new Symbol(sym.FUNC, yyline, yycolumn,yytext());
            }
          case 65: break;
          case 30: 
            { return new Symbol(sym.BEGIN, yyline, yycolumn,yytext());
            }
          case 66: break;
          case 31: 
            { return new Symbol(sym.PRINT, yyline, yycolumn,yytext());
            }
          case 67: break;
          case 32: 
            { return new Symbol(sym.END, yyline, yycolumn,yytext());
            }
          case 68: break;
          case 33: 
            { return new Symbol(sym.RETURN, yyline, yycolumn,yytext());
            }
          case 69: break;
          case 34: 
            { return new Symbol(sym.OPTIONS, yyline, yycolumn,yytext());
            }
          case 70: break;
          case 35: 
            { return new Symbol(sym.DEFOPT, yyline, yycolumn,yytext());
            }
          case 71: break;
          case 36: 
            { return new Symbol(sym.MAIN, yyline, yycolumn,yytext());
            }
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
