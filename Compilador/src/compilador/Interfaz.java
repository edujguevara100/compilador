/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compilador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author edujg
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        panel2.setVisible(false);
        panel3.setVisible(false);
        
        
    }
    public static FileReader fr = null, fr2 = null;
    public static Node root, padre, options_father;
    DefaultMutableTreeNode arbol;
    public static ArrayList<Entry> tabla_simbolos = new ArrayList<Entry>(), parametros = new ArrayList<Entry>();
    public static ArrayList<String> ids, ids2, param;
    public static ArrayList<String> tipos_matrix;
    public static ArrayList<String> ids_params;
    public static int contador_ambito = 0, offset = 0, control_ambito = -1, params_actuales = 0;
    public static String ambito = "";
    public static boolean flag_ambito = false, concat = false;
    public static ArrayList<Cuadruplo> cuads = new ArrayList<Cuadruplo>();
    public static int temporales = 0, cantparam = 0, etiquetas = 0;
    public static ArrayList<String> mensajes = new ArrayList<String>();
    public static String id_options = "";
    public static int stack = 0, par_mem = 8;
    public static ArrayList<DescriptorR> registros = new ArrayList<DescriptorR>();
    public static String func_actual;
    public static ArrayList<Integer> tamanos_params = new ArrayList<Integer>();
    public static String semantico = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        bt_analizar = new javax.swing.JButton();
        bt_arbol = new javax.swing.JButton();
        bt_cuad = new javax.swing.JButton();
        bt_final = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textEditorArea = new javax.swing.JTextArea();
        panel2 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        jtree = new javax.swing.JTree();
        salirArbol = new javax.swing.JButton();
        panel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbCuadruplos = new javax.swing.JTable();
        salirCuad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Seleccionar Archivo:");
        panel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton1.setText("Buscar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchFile(evt);
            }
        });
        panel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, -1));

        bt_analizar.setText("Analizar");
        bt_analizar.setEnabled(false);
        bt_analizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_analizarMouseClicked(evt);
            }
        });
        panel1.add(bt_analizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, -1, -1));

        bt_arbol.setText("Ver Arbol");
        bt_arbol.setEnabled(false);
        bt_arbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_arbolMouseClicked(evt);
            }
        });
        panel1.add(bt_arbol, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        bt_cuad.setText("Cu√°druplos");
        bt_cuad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_cuadMouseClicked(evt);
            }
        });
        panel1.add(bt_cuad, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, -1, -1));

        bt_final.setText("Final");
        bt_final.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_finalMouseClicked(evt);
            }
        });
        panel1.add(bt_final, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, -1, -1));

        textEditorArea.setColumns(20);
        textEditorArea.setRows(5);
        jScrollPane1.setViewportView(textEditorArea);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 550, 400));

        panel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jtree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        scroll.setViewportView(jtree);

        panel2.add(scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 370));

        salirArbol.setText("Regresar");
        salirArbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirArbolMouseClicked(evt);
            }
        });
        panel2.add(salirArbol, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, 80, 30));

        tbCuadruplos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Operador", "Arg1", "Arg2", "Res"
            }
        ));
        jScrollPane2.setViewportView(tbCuadruplos);

        salirCuad.setText("Regresar");
        salirCuad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirCuadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 571, Short.MAX_VALUE)
            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3Layout.createSequentialGroup()
                    .addContainerGap(43, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(44, Short.MAX_VALUE)))
            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel3Layout.createSequentialGroup()
                    .addGap(448, 448, 448)
                    .addComponent(salirCuad, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(33, Short.MAX_VALUE)))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3Layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(121, Short.MAX_VALUE)))
            .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel3Layout.createSequentialGroup()
                    .addGap(322, 322, 322)
                    .addComponent(salirCuad, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(85, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(171, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_analizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_analizarMouseClicked
        if (bt_analizar.isEnabled()) {
            int a = analisis();
            if (a == 1) {
                bt_arbol.setEnabled(true);
                bt_cuad.setEnabled(true);
            }
            bt_analizar.setEnabled(false);
        }
    }//GEN-LAST:event_bt_analizarMouseClicked
    public static int getSize(String t) {
        if (t.equals("int")) {
            return 4;
        } else if (t.equals("bool")) {
            return 4;
        } else if (t.equals("char")) {
            return 1;
        } else if (t.contains("array_")) {
            if (t.subSequence(t.indexOf("_") + 1, t.indexOf("{")).equals("char")) {
                String sz = t.substring(t.indexOf("{") + 1, t.indexOf("}"));
                return Integer.parseInt(sz);
            } else {
                String sz = t.substring(t.indexOf("{") + 1, t.indexOf("}"));
                return Integer.parseInt(sz) * 4;
            }
        } else if (t.contains("matrix_")) {
            if (t.subSequence(t.indexOf("_") + 1, t.indexOf("{")).equals("char")) {
                String sz = t.substring(t.indexOf("{") + 1, t.indexOf("}"));
                String p = sz.substring(0, sz.indexOf(","));
                String s = sz.substring(sz.indexOf(",") + 1);
                return Integer.parseInt(p) * Integer.parseInt(s);
            } else {
                String sz = t.substring(t.indexOf("{") + 1, t.indexOf("}"));
                String p = sz.substring(0, sz.indexOf(","));
                String s = sz.substring(sz.indexOf(",") + 1);
                return Integer.parseInt(p) * Integer.parseInt(s) * 4;
            }
        }
        return 0;
    }

    public static boolean esParam(String v) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (tabla_simbolos.get(i).parametros == 1 || tabla_simbolos.get(i).offset == -1) {
                return true;
            }
        }
        return false;
    }

    public static String tipo_valoro(Node n) {
        if (n.hijos.isEmpty()) {
            if (n.valor.contains("_")) {
                if (existe(n.valor) || esParam(n.valor)) {
                    return get_tipo2(n.valor);
                } else {
                    semantico += "La variable: " + n.valor + " no ha sido declarada." 
                        + " Linea " + n.linea + ":" + n.columna +"\n";
                    //System.out.println("ACA");
                    return "int";
                }
            } else if (n.valor.contains("'")) {
                return "char";
            } else if (n.valor.equals("true") || n.valor.equals("false")) {
                return "bool";
            } else {
                return "int";
            }
        } else {
            if (n.valor.contains("_")) {
                //Funcion o Elemento de Matriz/Arreglo
                if (existe(n.valor)) {
                    String t = get_tipo2(n.valor);
                    if (t.equals("int") || t.equals("bool") || t.equals("char")) {
                        semantico += n.valor + " es del tipo: " + t + ", no es funcion ni arreglo ni matriz."
                                + " Linea " + n.linea + ":" + n.columna +"\n";
                        return t;
                    } else if (!t.contains("->")) {
                        if (t.contains("array")) {
                            if (n.hijos.get(0).nombre.equals("LISTA POSICIONES")) {
                                semantico += "Error, la variable: " + n.valor + " es un array, no una matriz."
                                        + " Linea " + n.linea + ":" + n.columna +"\n";;
                            } else {
                                if (tipo_valoro(n.hijos.get(0)).equals("int")) {
                                    return t.substring(t.indexOf("_") + 1, t.indexOf("{"));
                                } else {
                                    semantico += "Error, los indices del arreglo:" + n.valor + "deben de ser enteros."
                                            + " Linea " + n.linea + ":" + n.columna +"\n";
                                }
                            }
                        } else {
                            if (n.hijos.get(0).nombre.equals("LISTA POSICIONES")) {
                                if (tipo_valoro(n.hijos.get(0).hijos.get(0)).equals("int")
                                        && tipo_valoro(n.hijos.get(0).hijos.get(1)).equals("int")) {
                                    return t.substring(t.indexOf("_") + 1, t.indexOf("{"));
                                } else {
                                    semantico += "Error, los indices del arreglo:" + n.valor + "deben de ser enteros"
                                            + " Linea " + n.linea + ":" + n.columna +"\n";
                                }
                            } else {
                                if (tipo_valoro(n.hijos.get(0)).equals("int")) {
                                    return "array_" + t.substring(t.indexOf("_") + 1);
                                } else {
                                    semantico += "Error, los indices del arreglo:" + n.valor + "deben de ser enteros."
                                            + " Linea " + n.linea + ":" + n.columna +"\n";
                                }
                            }
                        }
                    } else {
                        //revisar parametros con los hijos de n
                        param = new ArrayList<String>();
                        params(n);
                        String tip = t.substring(0, t.indexOf("-"));
                        String tipo[] = tip.split(" x ");
                        tipo[tipo.length - 1] = tipo[tipo.length - 1].replace(" ", "");
                        if (tipo.length != param.size()) {
                            semantico += "Se esperaban: " + tipo.length + " parametros, y se encontraron: " + param.size() + "."
                                    + " Linea " + n.linea + ":" + n.columna +"\n";
                        } else {
                            for (int i = 0; i < param.size(); i++) {
                                if (!param.get(i).equals(tipo[i])) {
                                    semantico += "Se esperaba un: " + tipo[i] + " y se encontro un: " + param.get(i) + "."
                                            + " Linea " + n.linea + ":" + n.columna +"\n";
                                }
                            }
                        }
                        return t.substring(t.indexOf("-> ") + 3);
                    }
                } else {
                    semantico += "La variable: " + n.valor + " no ha sido declarada."
                            + " Linea " + n.linea + ":" + n.columna +"\n";
                    return "int";
                }
            } else if (n.nombre.equals("MATRIX")) {
                String tipo = "";
                tipos_matrix = new ArrayList<String>();
                matriz(n);
                tipo = tipos_matrix.get(0);
                for (int i = 1; i < tipos_matrix.size(); i++) {
                    if (!tipos_matrix.get(i).equals(tipo)) {
                        semantico += "Se esperaba un: " + tipo + " y se encontro un: " + tipos_matrix.get(i) + "."
                                + " Linea " + n.linea + ":" + n.columna +"\n";
                    }
                }
                return "matrix_" + tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{"))
                        + "{" + tipos_matrix.size() + "," + tipo.substring(tipo.indexOf("{") + 1, tipo.indexOf("}")) + "}";
            } else if (n.nombre.equals("ARRAY")) {
                ids2 = new ArrayList<String>();
                array(n);
                String tipo = ids2.get(0);
                for (int i = 1; i < ids2.size(); i++) {
                    if (!ids2.get(i).equals(tipo)) {
                        semantico += "Se esperaba un: " + tipo + " y se encontro un: " + ids2.get(i) + "."
                                + " Linea " + n.linea + ":" + n.columna +"\n";
                    }
                }
                return "array_" + tipo + "{" + ids2.size() + "}";
            } else if (n.valor.equals("+")
                    || n.valor.equals("-")
                    || n.valor.equals("*")
                    || n.valor.equals("/")) {
                comprueba_op(n);
                return "int";
            } else {
                comprueba_op_bool(n);
                return "bool";
            }
        }
        return "int";
    }

    public static void matriz(Node n) {
        for (int i = 0; i < n.hijos.size(); i++) {
            if (n.hijos.get(i).nombre.equals("MATRIX")) {
                matriz(n.hijos.get(i));
            } else {
                ids2 = new ArrayList<String>();
                array(n.hijos.get(i));
                String ti = ids2.get(0);
                for (int j = 1; j < ids2.size(); j++) {
                    if (!ids2.get(j).equals(ti)) {
                        semantico += "Se esperaba un: " + ti + " y se encontro un: " + ids2.get(j) + "."
                                + " Linea " + n.linea + ":" + n.columna +"\n";
                    }
                }
                ti = "array_" + ti + "{" + ids2.size() + "}";
                tipos_matrix.add(ti);
            }
        }
    }

    public static void params(Node n) {
        for (int i = 0; i < n.hijos.size(); i++) {
            if (!n.hijos.get(i).nombre.equals("LISTA PARAMETROS")) {
                param.add(tipo_valoro(n.hijos.get(i)));
            } else {
                params(n.hijos.get(i));
            }
        }
    }

    public static void array(Node n) {
        for (int i = 0; i < n.hijos.size(); i++) {
            if (!n.hijos.get(i).nombre.equals("ARRAY")) {
                ids2.add(tipo_valoro(n.hijos.get(i)));
            } else {
                array(n.hijos.get(i));
            }
        }
    }

    public static void comprueba_op(Node act) {
        for (int i = 0; i < act.hijos.size(); i++) {
            if (act.hijos.get(i).valor.equals("+")
                    || act.hijos.get(i).valor.equals("-")
                    || act.hijos.get(i).valor.equals("*")
                    || act.hijos.get(i).valor.equals("/")) {
                comprueba_op(act.hijos.get(i));
            } else {
                String t = tipo_valoro(act.hijos.get(i));
                if (!t.equals("int")) {
                    semantico += "Error, se esperaba un int y se encontro un:" + t + "\n";
                }
            }
        }
    }

    public static void comprueba_op_bool(Node act) {
        if (act.valor.equals("|")
                || act.valor.equals("&")) {
            String t = tipo_valoro(act.hijos.get(0));
            String t1 = tipo_valoro(act.hijos.get(1));
            if (!t.equals("bool") || !t1.equals("bool")) {
                semantico += "Comparacion Booleana utilizando: " + t + " y " + t1 + ", en vez de bools."
                        + " Linea " + act.linea + ":" + act.columna +"\n";;
            }
        } else if (act.valor.equals("<")
                || act.valor.equals(">")
                || act.valor.equals("<=")
                || act.valor.equals(">=")
                || act.valor.equals("!=")
                || act.valor.equals("==")) {
            String t = tipo_valoro(act.hijos.get(0));
            String t1 = tipo_valoro(act.hijos.get(1));
            if (!t.equals(t1)) {
                semantico += "Comparacion Relacional utilizando: " + t + " y " + t1 + ", no valida entre tipos distintos."
                    + " Linea " + act.linea + ":" + act.columna +"\n";
            }
        } else if (act.nombre.equals("VALOR OP BOOL")) {
            if (act.hijos.size() == 3) {
                Node n = act.hijos.get(1);
                String x = tipo_valoro(n);
                if (!x.equals("bool")) {
                    semantico += "Se esperaba un bool."
                        + " Linea " + n.linea + ":" + n.columna +"\n";
                }
            } else {
                Node n = act.hijos.get(2);
                String x = tipo_valoro(n);
                if (!x.equals("bool")) {
                    semantico += "Se esperaba un bool"
                            + " Linea " + n.linea + ":" + n.columna +"\n";
                }
            }
        }
    }

    public static void llenar_tabla(Node actual) {
        if (actual.nombre.equals("BLOQUE IF")
                || actual.nombre.equals("BLOQUE ELSE IF")
                || actual.nombre.equals("BLOQUE ELSE")
                || actual.nombre.equals("BLOQUE OPTIONS")
                || actual.nombre.equals("BLOQUE LOOP")
                || actual.nombre.equals("BLOQUE FOR")) {
            ambito += "," + contador_ambito;
            contador_ambito++;
            control_ambito++;
        }
        if (actual.nombre.equals("DECLARACION")) {
            //OPERACIONES EN CONDICIONES (imposible)
            //OFFSET
            String tipo = "";
            ids = new ArrayList<String>();
            tipo = actual.hijos.get(0).valor;
            agregar_ids(actual.hijos.get(1));
            for (int j = 0; j < ids.size(); j++) {
                agregar(new Entry(ids.get(j), tipo, ambito, offset));
            }
            ids = new ArrayList<String>();
            tipos_asig(actual.hijos.get(1), tipo);
        } else if (actual.nombre.equals("FUNCION")) {
            String tipo_retorno = "";
            String id_funcion = "";
            String dominio = "void";
            ids = new ArrayList<String>();
            ids_params = new ArrayList<String>();
            tipo_retorno = actual.hijos.get(0).valor;
            id_funcion = actual.hijos.get(1).valor;
            if (actual.hijos.get(2).nombre.equals("LISTA PARAMETROS")) {
                agregar_params(actual.hijos.get(2));
                dominio = "";
                for (int i = 0; i < ids.size(); i++) {
                    if (i < 4) {
                        agregar(new Entry(ids_params.get(i), ids.get(i), id_funcion, -1));
                    } else {
                        if (i == 4) {
                            offset = 0;
                        }
                        Entry p = new Entry(ids_params.get(i), ids.get(i), id_funcion, offset);
                        p.parametros = -1;
                        agregar(p);
                        //offset += getSize(ids.get(i));
                    }
                    if (i + 1 < ids.size()) {
                        dominio += ids.get(i) + " x ";
                    } else {
                        dominio += ids.get(i);
                    }
                }
            }
            dominio += " -> " + tipo_retorno;
            Entry func = new Entry(id_funcion, dominio, "", -2);
            func.parametros = ids.size();
            agregar(func);
            ids = new ArrayList<String>();
        } else if (actual.nombre.equals("BLOQUE FOR")) {
            if (actual.hijos.get(0).valor.equals("int")) {
                agregar(new Entry(actual.hijos.get(1).valor, actual.hijos.get(0).valor, ambito, offset));
            }
            if (!tipo_valoro(actual.hijos.get(3)).equals("int")) {
                semantico += "Error en el for, se esperaba un int como limite superior\n";
            }
            Node declarado = actual.hijos.get(1);
            Node manjedorDeFlujo = actual.hijos.get(4);
            if (!declarado.valor.equals(manjedorDeFlujo.valor)) {
                semantico += "Error, la variable declarada en el for debe ser la misma que se utiliza para manejar su flujo."
                        + " Linea " + manjedorDeFlujo.linea + ":" + manjedorDeFlujo.columna +"\n";
            }
        } else if (actual.nombre.equals("BLOQUE OPTIONS")) {
            //FALTA VALORO PARA LAS OPT INDIVIDUALES
            if (actual.hijos.get(1).valor.equals("int") || actual.hijos.get(1).valor.equals("char")) {
                if (existe(actual.hijos.get(0).valor)) {
                    String t = get_tipo2(actual.hijos.get(0).valor);
                    if (!t.equals(actual.hijos.get(1).valor)) {
                        semantico += "La variable: " + actual.hijos.get(0).valor + ", no es del tipo: " + actual.hijos.get(1).valor + "\n";
                    } else {
                        if (!actual.hijos.get(2).nombre.equals("BLOQUE DEFAULT OPTION")) {
                            ids = new ArrayList<String>();
                            options(actual.hijos.get(2));
                            String toption = ids.get(0);
                            for (int i = 1; i < ids.size(); i++) {
                                if (!toption.equals(ids.get(i))) {
                                    semantico += "Los tipos de las opciones no son congruentes\n";
                                }
                            }
                            if (!actual.hijos.get(1).valor.equals(toption)) {
                                semantico += "El BLOQUE OPTIONS esperaba casos del tipo: " + actual.hijos.get(1) + " y se encontro con casos de tipo: " + toption + "\n";
                            }
                            ids = new ArrayList<String>();
                        }
                    }
                } else {
                    semantico += "La variable: " + actual.hijos.get(0).valor + " no ha sido declarada\n";
                }
            } else {
                semantico += "Error en el bloque options, se esperaba un int o un char para los tipos de casos y se econtro: " + actual.hijos.get(1) + "\n";
            }

        } else if (actual.nombre.equals("READ")) {
            if (!existe(actual.hijos.get(0).valor)) {
                semantico += "La variable: " + actual.hijos.get(0).valor + ", no ha sido declarada\n";
            }
        } else if (actual.nombre.equals("LLAMADA FUNCION")) {
            if (existe(actual.hijos.get(0).valor)) {
                //Comprobar tipos
                String t = get_tipo2(actual.hijos.get(0).valor);
                param = new ArrayList<String>();
                if (actual.hijos.size() == 2) {
                    if (actual.hijos.get(1).hijos.size() > 0) {
                        params(actual.hijos.get(1));
                    } else {
                        param.add(tipo_valoro(actual.hijos.get(1)));
                    }
                }
                String tip = t.substring(0, t.indexOf("-"));
                String tipo[] = tip.split(" x ");
                tipo[tipo.length - 1] = tipo[tipo.length - 1].replace(" ", "");
                if (tipo.length != param.size()) {
                    semantico += "Se esperaban: " + tipo.length + " parametros, y se encontraron: " + param.size() + "\n";
                } else {
                    for (int i = 0; i < param.size(); i++) {
                        if (!param.get(i).equals(tipo[i])) {
                            semantico += "Se esperaba un: " + tipo[i] + " y se encontro un: " + param.get(i) + "\n";
                        }
                    }
                }
                //return t.substring(t.indexOf("-> ") + 3);

            } else {
                Node func = actual.hijos.get(0);
                semantico += "La funcion: " + func.valor + " no existe."
                        + " Linea " + func.linea + ":" + func.columna +"\n";
            }
        } else if (actual.nombre.equals("ASIGNACION")) {
            if (existe(actual.hijos.get(0).valor)) {
                if (actual.hijos.size() == 3) {
                    String te = get_tipo2(actual.hijos.get(0).valor);
                    String to = tipo_valoro(actual.hijos.get(2));
                    if (!to.equals(te)) {
                        semantico += "Error de tipo, se esperaba: " + te + " y se encontro: " + to + "\n";
                    }
                } else {
                    //Ver M si tiene uno o dos hijos
                    String ttt = get_tipo2(actual.hijos.get(0).valor);
                    if (ttt.contains("array") || ttt.contains("matrix")) {
                        if (actual.hijos.get(1).hijos.size() == 1) {
                            String te = tipo_valoro(actual.hijos.get(1).hijos.get(0));
                            if (!te.equals("int")) {
                                semantico += "Error, el indice de: " + actual.hijos.get(0).valor + " debe ser entero\n";
                            } else {
                                String to = tipo_valoro(actual.hijos.get(3));
                                String tipo = get_tipo2(actual.hijos.get(0).valor);
                                if (tipo.contains("matrix")) {
                                    tipo = "array_" + tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{") + 1)
                                            + tipo.substring(tipo.indexOf(",") + 1);
                                } else {
                                    tipo = tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{"));
                                }
                                if (!tipo.equals(to)) {
                                    semantico += "Error, se esperaba un: " + tipo + " y se encontro: " + to + "\n";
                                }
                            }
                        }
                        if (actual.hijos.get(1).hijos.size() == 2) {
                            String tipo = get_tipo2(actual.hijos.get(0).valor);
                            if (tipo.contains("matrix")) {
                                String te = tipo_valoro(actual.hijos.get(1).hijos.get(0));
                                String to = tipo_valoro(actual.hijos.get(1).hijos.get(1));
                                if (!te.equals("int") || !to.equals("int")) {
                                    semantico += "Error, los indices de: " + actual.hijos.get(0).valor + " deben ser entero\n";
                                } else {
                                    String ta = tipo_valoro(actual.hijos.get(3));
                                    tipo = tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{"));
                                    if (!tipo.equals(ta)) {
                                        semantico += "Error, se esperaba un: " + tipo + " y se encontro: " + ta + "\n";
                                    }
                                }
                            } else {
                                semantico += "Error, la variable:" + actual.hijos.get(0).valor + " no es una matriz\n";
                            }
                        }
                    } else {
                        semantico += "Error, la variable: " + actual.hijos.get(0).valor + ", no es de tipo array ni matrix";
                    }
                }
            } else {
                semantico += "La variable: " + actual.hijos.get(0).valor + ", no ha sido declarada\n";
            }
        } else if (actual.nombre.equals("BLOQUE IF")) {
            String t = tipo_valoro(actual.hijos.get(0));

            if (!t.equals("bool")) {
                semantico += "Error de tipo, se esperaba un bool, y se encontro un: " + t + "\n";
            }
        } else if (actual.nombre.equals("BLOQUE ELSE IF")) {
            String t = tipo_valoro(actual.hijos.get(0));

            if (!t.equals("bool")) {
                semantico += "Error de tipo, se esperaba un bool, y se encontro un: " + t + "\n";
            }
        } else if (actual.nombre.equals("BLOQUE LOOP")) {
            String t = tipo_valoro(actual.hijos.get(0));

            if (!t.equals("bool")) {
                semantico += "Error de tipo, se esperaba un bool, y se encontro un: " + t + "\n";
            }
        }
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (actual.nombre.equals("FUNCION")) {
                ambito = actual.hijos.get(1).valor;
                //offset = 0;
            } else if (actual.nombre.equals("MAIN")) {
                if (actual.hijos.get(i).nombre.equals("CODE")) {
                    ambito = "main";
                    offset = 0;
                }
            }
            if (!actual.hijos.get(i).hijos.isEmpty()) {
                llenar_tabla(actual.hijos.get(i));
            }
        }
        if (control_ambito >= 0
                && (actual.nombre.equals("BLOQUE IF")
                || actual.nombre.equals("BLOQUE ELSE IF")
                || actual.nombre.equals("BLOQUE ELSE")
                || actual.nombre.equals("BLOQUE OPTIONS")
                || actual.nombre.equals("BLOQUE LOOP")
                || actual.nombre.equals("BLOQUE FOR"))) {
            ambito = ambito.substring(0, ambito.lastIndexOf(","));
            control_ambito--;
        }
    }

    public static void options(Node n) {
        ids.add(tipo_valoro(n.hijos.get(0)));
        for (int i = 1; i < n.hijos.size(); i++) {
            if (n.hijos.get(i).nombre.equals("BLOQUE OPTION")) {
                options(n.hijos.get(i));
            }
        }
    }

    /*public static String get_tipo(String s) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (s.equals(tabla_simbolos.get(i).id)) {
                 
                    return tabla_simbolos.get(i).tipo;
                
            }
        }
        return "";
    }*/
    public static String get_tipo2(String s) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (s.equals(tabla_simbolos.get(i).id)) {
                return tabla_simbolos.get(i).tipo;
            }
        }
        return "";
    }

    public static boolean existe(String s) {
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (s.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static void agregar(Entry e) {
        boolean esta = false;
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (e.id.equals(tabla_simbolos.get(i).id)) {
                if (ambito.contains(tabla_simbolos.get(i).ambito)) {
                    esta = true;
                    break;
                }
            }
        }
        if (esta) {
            semantico += "La variable: " + e.id + " ya fue declarada\n";
        } else {
            tabla_simbolos.add(e);
            offset += getSize(e.tipo);
        }
    }

    public static void agregar_params(Node actual) {
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (actual.hijos.get(i).nombre.equals("TYPE")) {
                ids.add(actual.hijos.get(i).valor);
                //agregar(new Entry(actual.hijos.get(i+1).valor, actual.hijos.get(i).valor, ""));
            } else if (actual.hijos.get(i).nombre.equals("ID")) {
                ids_params.add(actual.hijos.get(i).valor);
            } else if (actual.hijos.get(i).nombre.equals("PARAMETROS TIPADOS")) {
                agregar_params(actual.hijos.get(i));
            }
        }
    }

    public static void agregar_ids(Node actual) {
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (!actual.hijos.get(i).valor.equals("<non-terminal>")) {
                boolean esta = false;
                for (int j = 0; j < tabla_simbolos.size(); j++) {
                    if (actual.hijos.get(i).valor.equals(tabla_simbolos.get(j).id)) {
                        if (ambito.contains(tabla_simbolos.get(j).ambito)) {
                            esta = true;
                            break;
                        }
                    }
                }
                if (esta) {
                    Node id = actual.hijos.get(i);
                    semantico += "Error, la variable " + id.valor + " ya esta declarada."
                            + " Linea " + id.linea + ":" + id.columna +"\n";
                } else {
                    ids.add(actual.hijos.get(i).valor);
                }

            } else if (actual.hijos.get(i).nombre.equals("LISTA DE VARIABLES")) {
                agregar_ids(actual.hijos.get(i));
            }
        }
    }

    public static void tipos_asig(Node actual, String tipo) {
        for (int i = 0; i < actual.hijos.size(); i++) {
            if (!actual.hijos.get(i).valor.equals("<non-terminal>")) {
                boolean esta = false;
                for (int j = 0; j < tabla_simbolos.size(); j++) {
                    if (actual.hijos.get(i).valor.equals(tabla_simbolos.get(j).id)) {
                        esta = true;
                        break;
                    }
                }
                if (esta) {
                    ids.add(actual.hijos.get(i).valor);
                }
            } else if (actual.hijos.get(i).nombre.equals("LISTA DE VARIABLES")) {
                tipos_asig(actual.hijos.get(i), tipo);
            } else {
                //DECLARACION CON ASIGNACION
                String t = tipo_valoro(actual.hijos.get(i).hijos.get(1));
                if (!t.equals(tipo)) {
                    semantico += "Error, la variable: " + ids.get(ids.size() - 1) + " es del tipo " + tipo + " y se le esta asignando: " + t + "\n";
                }
            }
        }
    }

    public static int analisis() {
        try {
            // TODO add your handling code here:
            AnalizadorLexico lexico = new AnalizadorLexico(fr);
            String result = "";
            String erroreslex = "";
            ArrayList<Token> tokens = new ArrayList<Token>();
            while (true) {
                Symbol tok = lexico.next_token();
                if (tok.sym == sym.EOF) {
                    //System.out.println("Analisis Lexico");
                    if (!lexico.error.equals("")) {
                        //System.out.println(lexico.error);
                        erroreslex = lexico.error;
                    } else {
                        //System.out.println("No se encontraron errores lexicos");
                    }
                    break;
                } else {
                    if (tok.sym != sym.error) {
                        tokens.add(new Token(tok.value.toString(), tok.sym));
                    }
                }
            }
            if (!lexico.error.equals("")) {
                File file = new File("C:/Users/edujg/Desktop/Eduardo/Compilador/src/compilador/correcion.txt");
                FileWriter f = new FileWriter("C:/Users/edujg/Desktop/Eduardo/Compilador/src/compilador/correccion.txt");
                for (int i = 0; i < tokens.size(); i++) {
                    result += tokens.get(i).valor + " ";
                }
                f.write(result);
                f.close();
                fr2 = new FileReader("C:/Users/edujg/Desktop/Eduardo/Compilador/src/compilador/correccion.txt");
            }
            lexico = new AnalizadorLexico(fr2);
            //System.out.println("");
            //System.out.println("Analisis Sintactico");
            parser parser = new parser(lexico);
            parser.parse();
            if (parser.errorNR.equals("")) {
                if (!parser.error.equals("") && !erroreslex.equals("")) {
                    String errores = "An√°lisis L√©xico:\n\n" + erroreslex + "\n\nAn√°lisis Sint√°ctico:\n\n" + parser.error + "\n";
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                    //System.out.println(parser.error);
                } else if (!erroreslex.equals("")) {
                    String errores = "An√°lisis L√©xico:\n\n" + erroreslex + "\n\nAn√°lisis Sint√°ctico:\n\nNo hay errores sint√°cticos";
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                } else if (!parser.error.equals("")) {
                    String errores = "An√°lisis L√©xico:\n\nNo hay errores l√©xicos" + "\n\nAn√°lisis Sint√°ctico:\n\n" + parser.error + "\n";
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                } else {
                    String errores = "An√°lisis L√©xico:\n\nNo hay errores l√©xicos" + "\n\nAn√°lisis Sint√°ctico:\n\nNo hay errores sint√°cticos";
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.INFORMATION_MESSAGE);
                }
                root = parser.raiz;
                llenar_tabla(root);
                JOptionPane.showMessageDialog(null, "An√°lisis Sem√°ntico:\n" + semantico, "An√°lisis de Codigo", JOptionPane.INFORMATION_MESSAGE);
                for (int i = 0; i < tabla_simbolos.size(); i++) {
                    System.out.println("ID: " + tabla_simbolos.get(i).id
                            + ", TIPO: " + tabla_simbolos.get(i).tipo
                            + ", AMBITO: " + tabla_simbolos.get(i).ambito
                            + ", OFFSET: " + tabla_simbolos.get(i).offset
                            + ", PARAMETROS: " + tabla_simbolos.get(i).parametros);
                }
                return 1;
            } else {
                if (!parser.error.equals("") && !erroreslex.equals("")) {
                    String errores = "An√°lisis L√©xico:\n\n" + erroreslex + "\n\nAn√°lisis Sint√°ctico:\n\n" + parser.error + "\n" + parser.errorNR;
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                    //System.out.println(parser.error);
                } else if (!lexico.error.equals("")) {
                    String errores = "An√°lisis L√©xico:\n\n" + erroreslex + "\n\nAn√°lisis Sint√°ctico:\n\nNo hay errores sint√°cticos" + parser.errorNR;
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                } else if (!parser.error.equals("")) {
                    String errores = "An√°lisis L√©xico:\n\nNo hay errores l√©xicos" + "\n\nAn√°lisis Sint√°ctico:\n\n" + parser.error + "\n" + parser.errorNR;
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                } else {
                    String errores = "An√°lisis L√©xico:\n\nNo hay errores l√©xicos" + "\n\nAn√°lisis Sint√°ctico:\n\n" + parser.errorNR;
                    JOptionPane.showMessageDialog(null, errores, "An√°lisis de Codigo", JOptionPane.ERROR_MESSAGE);
                }
            }
            return 2;
        } catch (Exception ex) {
            //System.out.println(ex.toString());
        }
        return 2;
    }

    private void searchFile(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchFile
        // TODO add your handling code here:
        try {
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            if (abre != null) {
                fr2 = new FileReader(abre);
                Scanner textReader = new Scanner(fr2);
                textEditorArea.setText("");
                while ( textReader.hasNextLine() ) {
                    String line = textReader.nextLine();
                    this.textEditorArea.append(line + "\n");
                }

                fr2.close();
                fr = new FileReader(abre);
                fr2 = new FileReader(abre);
                bt_analizar.setEnabled(true);

            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_searchFile

    private void bt_arbolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_arbolMouseClicked
        // TODO add your handling code here:
        if (bt_arbol.isEnabled()) {
            panel1.setVisible(false);
            arbol = new DefaultMutableTreeNode(root);
            DefaultTreeModel modelo = (DefaultTreeModel) jtree.getModel();
            llenar(root, arbol);
            modelo.setRoot(arbol);
            jtree.setModel(modelo);
            panel2.setVisible(true);
        }
    }//GEN-LAST:event_bt_arbolMouseClicked

    private void bt_cuadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_cuadMouseClicked
        // TODO add your handling code here:
        //BACKPATCHING O PROPAGACION
        padre = root;
        cuadruplos(root);
        DefaultTableModel model = (DefaultTableModel) tbCuadruplos.getModel();
        for (int i = 0; i < cuads.size(); i++) {
            System.out.println(cuads.get(i));
            model.addRow(new Object[]{cuads.get(i).op, cuads.get(i).op1, cuads.get(i).op2, cuads.get(i).res});

        }
        panel1.setVisible(false);
        panel3.setVisible(true);
    }//GEN-LAST:event_bt_cuadMouseClicked

    private void bt_finalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_finalMouseClicked
        // TODO add your handling code here:
        for (int i = 0; i < 10; i++) {
            String s = "$t" + i;
            registros.add(new DescriptorR(s));
        }
        for (int i = 0; i < 8; i++) {
            String s = "$s" + i;
            registros.add(new DescriptorR(s));
        }
        for (int i = 0; i < 2; i++) {
            String s = "$v" + i;
            registros.add(new DescriptorR(s));
        }
        for (int i = 0; i < 4; i++) {
            String s = "$a" + i;
            registros.add(new DescriptorR(s));
        }
        registros.add(new DescriptorR("$zero"));
        registros.add(new DescriptorR("$sp"));
        registros.add(new DescriptorR("$fp"));
        registros.add(new DescriptorR("$ra"));
        String txt = "    .data\n";
        for (int i = 0; i < mensajes.size(); i++) {
            txt += "msg" + i + ":    .asciiz " + mensajes.get(i) + "\n";
        }
        txt += "\n";
        txt += "    .text\n    .globl main\n";
        for (int i = 0; i < cuads.size(); i++) {
            if (cuads.get(i).op.equals("F_ETIQ")) {
                func_actual = cuads.get(i).op1;
                txt += cuads.get(i).op1 + ":\n    sw $fp, -4($sp)\n    sw $ra, -8($sp)\n";
                stack = 8;
                parametros = new ArrayList<Entry>();
                ArrayList<Entry> variables = new ArrayList<Entry>();
                for (int j = 0; j < tabla_simbolos.size(); j++) {
                    if (tabla_simbolos.get(j).offset == -1 && tabla_simbolos.get(j).ambito.equals(cuads.get(i).op1)) {
                        parametros.add(tabla_simbolos.get(j));
                    } else if (tabla_simbolos.get(j).ambito.contains(cuads.get(i).op1)) {
                        if (tabla_simbolos.get(j).parametros == -1) {
                            parametros.add(tabla_simbolos.get(j));
                        }
                        variables.add(tabla_simbolos.get(j));
                    }
                }
                int cant_param = parametros.size();
                for (int j = 0; j < parametros.size(); j++) {
                    if (j <= 3) {
                        int pos = stack + getSize(parametros.get(j).tipo);
                        if (getSize(parametros.get(j).tipo) == 4) {
                            txt += "    sw $s" + j + ", -" + pos + "($sp)\n";
                        } else {
                            txt += "    sb $s" + j + ", -" + pos + "($sp)\n";
                        }
                        stack = pos;
                    } else {
                        //mas de 4 parametros
                    }
                }
                txt += "    move $fp, $sp\n";
                for (int j = 0; j < parametros.size(); j++) {
                    if (j <= 3) {
                        txt += "    move $s" + j + ", $a" + j + "\n";
                        for (int k = 0; k < tabla_simbolos.size(); k++) {
                            if (tabla_simbolos.get(k).id.equals(parametros.get(j).id)) {
                                tabla_simbolos.get(k).descriptor = "$s" + j;
                            }
                        }
                        String s = "$s" + j;
                        for (int k = 0; k < registros.size(); k++) {
                            if (registros.get(k).equals(s)) {
                                registros.get(k).valor = parametros.get(j).id;
                            }
                        }
                    }
                }
                int stack_size = 0;
                for (int j = 0; j < variables.size(); j++) {
                    stack_size += getSize(variables.get(j).tipo);
                }
                int sp = stack + stack_size;
                txt += "    sub $sp, $sp, " + sp + "\n";
            } else if (cuads.get(i).op.equals("+")) {
                txt += op(cuads.get(i));
            } else if (cuads.get(i).op.equals("-")) {
                txt += op(cuads.get(i));
            } else if (cuads.get(i).op.equals("*")) {
                txt += op(cuads.get(i));
            } else if (cuads.get(i).op.equals("/")) {
                txt += op(cuads.get(i));
            } else if (cuads.get(i).op.equals("GOTO")) {
                txt += "    b " + cuads.get(i).op1 + "\n";
            } else if (cuads.get(i).op.equals("ETIQ")) {
                txt += cuads.get(i).op1 + ":\n";
            } else if (cuads.get(i).op.equals("print")) {
                if (cuads.get(i).op2.equals("string")) {
                    txt += "    li $v0, 4\n    la $a0, msg" + cuads.get(i).op1 + "\n    syscall\n";
                } else {
                    //ints, bools, chars, temporales
                    if (cuads.get(i).op1.contains("_")
                            || (!cuads.get(i).op1.equals("true") && cuads.get(i).op1.contains("t") && !cuads.get(i).op1.contains("'"))) {
                        //_id, temporal
                        if (cuads.get(i).op2.equals("int")) {
                            if (cuads.get(i).op1.contains("_")) {
                                String var = "-";
                                int pos = stack + 4;
                                for (int j = 0; j < tabla_simbolos.size(); j++) {
                                    if (tabla_simbolos.get(j).id.equals(cuads.get(i).op1)) {
                                        if (tabla_simbolos.get(j).descriptor.equals("")) {
                                            pos = pos + tabla_simbolos.get(j).offset;
                                            var += pos + "($fp)";
                                            txt += "    li $v0, 1\n    lw $a0, " + var + "\n    syscall\n";
                                            break;
                                        } else {
                                            txt += "    li $v0, 1\n    move $a0, " + tabla_simbolos.get(j).descriptor + "\n    syscall\n";
                                            break;
                                        }
                                    }
                                }
                            } else {
                                for (int j = 0; j < registros.size(); j++) {
                                    if (registros.get(j).valor.equals(cuads.get(i).op1)) {
                                        txt += "    li $v0, 1\n    move $a0, " + registros.get(j).registro + "\n    syscall\n";
                                    }
                                }
                            }
                        } else if (cuads.get(i).op2.equals("bool")) {
                            //puedo usar comparacion con $zero para false el resto es true
                            if (cuads.get(i).op1.contains("_")) {
                                String var = "-";
                                int pos = stack + 4;
                                for (int j = 0; j < tabla_simbolos.size(); j++) {
                                    if (tabla_simbolos.get(j).id.equals(cuads.get(i).op1)) {
                                        if (tabla_simbolos.get(j).descriptor.equals("")) {
                                            pos = pos + tabla_simbolos.get(j).offset;
                                            var += pos + "($fp)";
                                            txt += "    li $v0, 1\n    lw $a0, " + var + "\n    syscall\n";
                                            break;
                                        } else {
                                            txt += "    li $v0, 1\n    move $a0, " + tabla_simbolos.get(j).descriptor + "\n    syscall\n";
                                            break;
                                        }
                                    }
                                }
                            } else {
                                for (int j = 0; j < registros.size(); j++) {
                                    if (registros.get(j).valor.equals(cuads.get(i).op1)) {
                                        txt += "    li $v0, 1\n    move $a0, " + registros.get(j).registro + "\n    syscall\n";
                                    }
                                }
                            }
                        } else {
                            //char
                            if (cuads.get(i).op1.contains("_")) {
                                String var = "-";
                                int pos = stack + 1;
                                for (int j = 0; j < tabla_simbolos.size(); j++) {
                                    if (tabla_simbolos.get(j).id.equals(cuads.get(i).op1)) {
                                        if (tabla_simbolos.get(j).descriptor.equals("")) {
                                            pos = pos + tabla_simbolos.get(j).offset;
                                            var += pos + "($fp)";
                                            txt += "    li $v0, 11\n    lb $a0, " + var + "\n    syscall\n";
                                            break;
                                        } else {
                                            txt += "    li $v0, 11\n    move $a0, " + tabla_simbolos.get(j).descriptor + "\n    syscall\n";
                                            break;
                                        }
                                    }
                                }
                            } else {
                                for (int j = 0; j < registros.size(); j++) {
                                    if (registros.get(j).valor.equals(cuads.get(i).op1)) {
                                        txt += "    li $v0, 11\n    move $a0, " + registros.get(j).registro + "\n    syscall\n";
                                    }
                                }
                            }
                        }
                    } else if (cuads.get(i).op2.equals("int")) {
                        //int
                        txt += "    li $v0, 1\n    li $a0, " + cuads.get(i).op1 + "\n    syscall\n";
                    } else if (cuads.get(i).op2.equals("char")) {
                        txt += "    li $v0, 11\n    addi $a0, $zero, " + cuads.get(i).op1 + "\n    syscall\n";
                    } else if (cuads.get(i).op2.equals("bool")) {
                        String val = "";
                        if (cuads.get(i).op1.equals("true")) {
                            val = "1";
                        } else {
                            val = "0";
                        }
                        txt += "    li $v0, 1\n    li $a0, " + val + "\n    syscall\n";
                    }
                }
            } else if (cuads.get(i).op.equals("read")) {
                String pos = "-";
                int off = 0;
                for (int j = 0; j < tabla_simbolos.size(); j++) {
                    if (tabla_simbolos.get(j).id.equals(cuads.get(i).op1)) {
                        off = tabla_simbolos.get(j).offset;
                        break;
                    }
                }
                if (cuads.get(i).op2.equals("char")) {
                    int sz = 1;
                    int p = stack + sz + off;
                    pos += p + "($fp)";
                    txt += "    li $v0, 12\n    syscall\n    sb $v0, " + pos + "\n";
                } else {
                    int sz = 4;
                    int p = stack + sz + off;
                    pos += p + "($fp)";
                    txt += "    li $v0, 5\n    syscall\n    sw $v0, " + pos + "\n";
                }
            } else if (cuads.get(i).op.equals("RET")) {
                //cargar en $v0 lo que se retorna
                txt += retorno(cuads.get(i));
                txt += "    move $sp, $fp\n    lw $fp, -4($sp)\n    lw $ra, -8($sp)\n";
                //restablecer params
                stack = 8;
                for (int j = 0; j < parametros.size(); j++) {
                    if (j <= 3) {
                        int pos = stack + getSize(parametros.get(j).tipo);
                        if (getSize(parametros.get(j).tipo) == 4) {
                            txt += "    lw $s" + j + ", -" + pos + "($sp)\n";
                        } else {
                            txt += "    lb $s" + j + ", -" + pos + "($sp)\n";
                        }
                        stack = pos;
                    }
                }
                //retornar jr $ra
                txt += "    jr $ra\n";
            } else if (cuads.get(i).op.equals("E_ETIQ")) {
                //txt += retorno(cuads.get(i));
                txt += "    move $sp, $fp\n    lw $fp, -4($sp)\n    lw $ra, -8($sp)\n";
                //restablecer params
                stack = 8;
                for (int j = 0; j < parametros.size(); j++) {
                    if (j <= 3) {
                        int pos = stack + getSize(parametros.get(j).tipo);
                        if (getSize(parametros.get(j).tipo) == 4) {
                            txt += "    lw $s" + j + ", -" + pos + "($sp)\n";
                        } else {
                            txt += "    lb $s" + j + ", -" + pos + "($sp)\n";
                        }
                        stack = pos;
                    }
                }
                //retornar jr $ra
                txt += "    jr $ra\n";
                txt += cuads.get(i).op1 + ":\n";
                for (int j = 0; j < 10; j++) {
                    registros.get(j).valor = "";
                }
                for (int j = 0; j < tabla_simbolos.size(); j++) {
                    tabla_simbolos.get(j).descriptor = "";
                }
            } else if (cuads.get(i).op.equals("M_ETIQ")) {
                txt += "main:\n    move $fp, $sp\n";
                stack = 0;
            } else if (cuads.get(i).op.equals("P_ETIQ")) {
                txt += "    li $v0, 10\n    syscall\n";
            } else if (cuads.get(i).op.equals("=")) {
                txt += asigSencilla(cuads.get(i));
            } else if (cuads.get(i).op.equals("[]=")) {
                //store
                txt += storeAsig(cuads.get(i));
            } else if (cuads.get(i).op.equals("=[]")) {
                //load
                txt += loadAsig(cuads.get(i));
            } else if (cuads.get(i).op.equals("call")) {
                //Revisar si hay temporales vivos!!!!!!
                txt += "    jal " + cuads.get(i).op1 + "\n";
                params_actuales = 0;
                par_mem = 8;
            } else if (cuads.get(i).op.equals("param")) {
                //Revisar donde estan los parametros y montarlos en las $a
                txt += finalParam(cuads.get(i));
            } else if (cuads.get(i).op.equals("if ==")) {
                //revisar si estan montados en registros
                txt += genIf(cuads.get(i));
            } else if (cuads.get(i).op.equals("if >=")) {
                //revisar si estan montados en registros
                txt += genIf(cuads.get(i));
            } else if (cuads.get(i).op.equals("if <=")) {
                //revisar si estan montados en registros
                txt += genIf(cuads.get(i));
            } else if (cuads.get(i).op.equals("if !=")) {
                //revisar si estan montados en registros
                txt += genIf(cuads.get(i));
            } else if (cuads.get(i).op.equals("if >")) {
                //revisar si estan montados en registros
                txt += genIf(cuads.get(i));
            } else if (cuads.get(i).op.equals("if <")) {
                //revisar si estan montados en registros
                txt += genIf(cuads.get(i));
            }
        }
        saveToFile(txt);
    }//GEN-LAST:event_bt_finalMouseClicked

    private void salirCuadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirCuadMouseClicked
        // TODO add your handling code here:
        panel3.setVisible(false);
        panel1.setVisible(true);
    }//GEN-LAST:event_salirCuadMouseClicked

    private void salirArbolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirArbolMouseClicked
        // TODO add your handling code here:
        panel2.setVisible(false);
        panel1.setVisible(true);
    }//GEN-LAST:event_salirArbolMouseClicked
    
    public void saveToFile(String text) {
        System.out.println(text);
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar ASM");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter asmFile = new FileWriter(fileChooser.getSelectedFile());
                asmFile.write(text);
                asmFile.close();
            } catch (IOException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//        fileChooser.setDialogTitle("Specify a file to save");¬†¬†¬†
//        ¬†
//        int userSelection = fileChooser.showSaveDialog(parentFrame);
//        ¬†
//        if (userSelection == JFileChooser.APPROVE_OPTION) {
//        ¬†¬†¬†¬†File fileToSave = fileChooser.getSelectedFile();
//        ¬†¬†¬†¬†System.out.println("Save as file: " + fileToSave.getAbsolutePath());
//        }
    }
    
    public static String loadAsig(Cuadruplo c) {
        String txt = "";

        return txt;
    }

    public static String storeAsig(Cuadruplo c) {
        String txt = "";
        //cargar op2 y buscar la posicion
        /*boolean esta = false, liberar1 = false;
        String r = "";
        for (int j = 0; j < tabla_simbolos.size(); j++) {
            if (tabla_simbolos.get(j).id.equals(c.op2)) {
                esta = true;
                if (tabla_simbolos.get(j).descriptor.equals("")) {
                    //load
                    int sz = getSize(tabla_simbolos.get(j).tipo.substring(tabla_simbolos.get(j).tipo.indexOf("_") + 1, tabla_simbolos.get(j).tipo.indexOf("{")));
                    int pos = stack + tabla_simbolos.get(j).offset + sz;
                    String sgtreg = nextTemp(c.op2);
                    if (sz == 4) {
                        txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    } else {
                        txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    }
                    tabla_simbolos.get(j).descriptor = sgtreg;
                    liberar1 = true;
                    r = sgtreg;
                } else {
                    r = tabla_simbolos.get(j).descriptor;
                }
                break;
            }
        }
        if (!esta) {
            for (int j = 0; j < registros.size(); j++) {
                if (registros.get(j).valor.equals(c.op2)) {
                    r = registros.get(j).registro;
                    liberar1 = true;
                    esta = true;
                }
            }
        }
        if (!esta) {
            //No es ni temporal ni variable
            r = nextTemp(c.op2);
            txt += "    li " + r + ", " + c.op2 + "\n";
            liberar1 = true;
        }*/
        return txt;
    }

    public static String asigSencilla(Cuadruplo c) {
        String txt = "";
        if (c.op1.equals("RET")) {
            //asignar el retorno a un temporal
            String sgte = nextTemp(c.res);
            txt += "    move " + sgte + ", $v0\n";
        } else {
            //guardar en memoria la asignacion y liberar temporales
            boolean esta = false, liberar1 = false;
            String r = "";
            for (int j = 0; j < tabla_simbolos.size(); j++) {
                if (tabla_simbolos.get(j).id.equals(c.op1)) {
                    esta = true;
                    if (tabla_simbolos.get(j).descriptor.equals("")) {
                        //load
                        int sz = getSize(tabla_simbolos.get(j).tipo);
                        int pos = stack + tabla_simbolos.get(j).offset + sz;
                        String sgtreg = nextTemp(c.op1);
                        if (sz == 4) {
                            txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                        } else {
                            txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                        }
                        tabla_simbolos.get(j).descriptor = sgtreg;
                        liberar1 = true;
                        r = sgtreg;
                    } else {
                        r = tabla_simbolos.get(j).descriptor;
                    }
                    break;
                }
            }
            if (!esta) {
                for (int j = 0; j < registros.size(); j++) {
                    if (registros.get(j).valor.equals(c.op1)) {
                        r = registros.get(j).registro;
                        liberar1 = true;
                        esta = true;
                    }
                }
            }
            if (!esta) {
                //No es ni temporal ni variable
                r = nextTemp(c.op1);
                if (!c.op1.contains("'")) {
                    if (c.op1.equals("true")) {
                        txt += "    li " + r + ", 1\n";
                    } else if (c.op1.equals("false")) {
                        txt += "    li " + r + ", 0\n";
                    } else {
                        //numero
                        txt += "    li " + r + ", " + c.op1 + "\n";
                    }
                } else {
                    //char
                    txt += "    addi " + r + ", $zero, " + c.op1 + "\n";
                }

                liberar1 = true;
            }
            //ya tengo el valor a asignar en un registro
            //guardar el valor de ese registro en la ubicacion de memoria de la variable si no estaba asignado
            for (int j = 0; j < tabla_simbolos.size(); j++) {
                if (tabla_simbolos.get(j).id.equals(c.res)) {
                    if (tabla_simbolos.get(j).descriptor.equals("")) {
                        //store
                        int sz = getSize(tabla_simbolos.get(j).tipo);
                        int pos = stack + tabla_simbolos.get(j).offset + sz;
                        if (sz == 4) {
                            txt += "    sw " + r + ", " + "-" + pos + "($fp)\n";
                        } else {
                            txt += "    sb " + r + ", " + "-" + pos + "($fp)\n";
                        }
                        if (liberar1) {
                            free(r);
                        }
                    } else {
                        //ya estaba en un registro la variable a asignar
                        //esto quiere decir que es un parametro
                        //r = tabla_simbolos.get(j).descriptor;
                        txt += "    move " + tabla_simbolos.get(j).descriptor + ", " + r + "\n";
                    }
                    break;
                }
            }
        }
        return txt;
    }

    public static String finalParam(Cuadruplo c) {
        String txt = "";
        if (params_actuales <= 3) {
            //montarlos en a$
            //Buscar donde esta
            boolean esta = false, liberar1 = false, liberar2 = false;
            String r = "";
            for (int j = 0; j < tabla_simbolos.size(); j++) {
                if (tabla_simbolos.get(j).id.equals(c.op1)) {
                    esta = true;
                    if (tabla_simbolos.get(j).descriptor.equals("")) {
                        //load
                        int sz = getSize(tabla_simbolos.get(j).tipo);
                        int pos = stack + tabla_simbolos.get(j).offset + sz;
                        String sgtreg = "$a" + params_actuales;
                        if (sz == 4) {
                            txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                        } else {
                            txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                        }
                        tabla_simbolos.get(j).descriptor = sgtreg;
                        liberar1 = true;
                        r = sgtreg;
                    } else {
                        txt += "    move $a" + params_actuales + ", " + tabla_simbolos.get(j).descriptor + "\n";
                    }
                    break;
                }
            }
            if (!esta) {
                for (int j = 0; j < registros.size(); j++) {
                    if (registros.get(j).valor.equals(c.op1)) {
                        txt += "    move $a" + params_actuales + ", " + registros.get(j).registro + "\n";
                        liberar1 = true;
                        esta = true;
                    }
                }
            }
            if (!esta) {
                //No es ni temporal ni variable
                r = "$a" + params_actuales;
                if (!c.op1.contains("'")) {
                    if (c.op1.equals("true")) {
                        txt += "    li " + r + ", 1\n";
                    } else if (c.op1.equals("false")) {
                        txt += "    li " + r + ", 0\n";
                    } else {
                        //numero
                        txt += "    li " + r + ", " + c.op1 + "\n";
                    }
                } else {
                    //char
                    txt += "    addi " + r + ", $zero, " + c.op1 + "\n";
                }
                liberar1 = true;
            }
            if (liberar1) {
                free(r);
            }
        } else {
            //montarlos en memoria, lo que llevan los otros de puntero + mi offset del $sp
            boolean esta = false, liberar1 = false;
            String r = "";
            for (int j = 0; j < tabla_simbolos.size(); j++) {
                if (tabla_simbolos.get(j).id.equals(c.op1)) {
                    esta = true;
                    if (tabla_simbolos.get(j).descriptor.equals("")) {
                        //load
                        int sz = getSize(tabla_simbolos.get(j).tipo);
                        int pos = stack + tabla_simbolos.get(j).offset + sz;
                        String sgtreg = nextTemp(c.op1);
                        if (sz == 4) {
                            txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                        } else {
                            txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                        }
                        tabla_simbolos.get(j).descriptor = sgtreg;
                        liberar1 = true;
                        r = sgtreg;
                    } else {
                        r = tabla_simbolos.get(j).descriptor;
                    }
                    break;
                }
            }
            if (!esta) {
                for (int j = 0; j < registros.size(); j++) {
                    if (registros.get(j).valor.equals(c.op1)) {
                        r = registros.get(j).registro;
                        liberar1 = true;
                        esta = true;
                    }
                }
            }
            if (!esta) {
                //No es ni temporal ni variable
                r = nextTemp(c.op1);
                if (!c.op1.contains("'")) {
                    if (c.op1.equals("true")) {
                        txt += "    li " + r + ", 1\n";
                    } else if (c.op1.equals("false")) {
                        txt += "    li " + r + ", 0\n";
                    } else {
                        //numero
                        txt += "    li " + r + ", " + c.op1 + "\n";
                    }
                } else {
                    //char
                    txt += "    addi " + r + ", $zero, " + c.op1 + "\n";
                }
                liberar1 = true;
            }
            //ya esta en un registro lo que hay que guardar
            if (Integer.parseInt(c.op2) == 1) {
                String pos = "";
                int place = par_mem + 1;
                pos += place + "($sp)";
                pos = "0($sp)";
                //txt += "    li $t8, " + place + "\n";
                txt += "    add $t9, $sp, $zero\n";
                txt += "    addi $sp, $sp, -" + place + "\n";
                txt += "    sb " + r + ", " + pos + "\n";
                txt += "    move $sp, $t9\n";
            } else {
                String pos = "";
                int place = par_mem + 4;
                pos += place + "($sp)";
                pos = "0($sp)";
                //txt += "    li $t8, " + place + "\n";
                txt += "    add $t9, $sp, $zero\n";
                txt += "    addi $sp, $sp, -" + place + "\n";
                txt += "    sw " + r + ", " + pos + "\n";
                txt += "    move $sp, $t9\n";
            }
            if (liberar1) {
                free(r);
            }
        }
        params_actuales += 1;
        par_mem += Integer.parseInt(c.op2);
        return txt;
    }

    public static String genIf(Cuadruplo c) {
        String txt = "";
        //revisar si estan montados, sino montarlos
        boolean esta = false, liberar1 = false, liberar2 = false;
        String r = "";
        for (int j = 0; j < tabla_simbolos.size(); j++) {
            if (tabla_simbolos.get(j).id.equals(c.op1)) {
                esta = true;
                if (tabla_simbolos.get(j).descriptor.equals("")) {
                    //load
                    int sz = getSize(tabla_simbolos.get(j).tipo);
                    int pos = stack + tabla_simbolos.get(j).offset + sz;
                    String sgtreg = nextTemp(c.op1);
                    if (sz == 4) {
                        txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    } else {
                        txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    }
                    tabla_simbolos.get(j).descriptor = sgtreg;
                    liberar1 = true;
                    r = sgtreg;
                } else {
                    r = tabla_simbolos.get(j).descriptor;
                }
                break;
            }
        }
        if (!esta) {
            for (int j = 0; j < registros.size(); j++) {
                if (registros.get(j).valor.equals(c.op1)) {
                    r = registros.get(j).registro;
                    liberar1 = true;
                    esta = true;
                }
            }
        }
        if (!esta) {
            //No es ni temporal ni variable
            r = nextTemp(c.op1);
            if (!c.op1.contains("'")) {
                if (c.op1.equals("true")) {
                    txt += "    li " + r + ", 1\n";
                } else if (c.op1.equals("false")) {
                    txt += "    li " + r + ", 0\n";
                } else {
                    //numero
                    txt += "    li " + r + ", " + c.op1 + "\n";
                }
            } else {
                //char
                txt += "    addi " + r + ", $zero, " + c.op1 + "\n";
            }

            liberar1 = true;
        }
        String r2 = "";
        esta = false;
        for (int j = 0; j < tabla_simbolos.size(); j++) {
            if (tabla_simbolos.get(j).id.equals(c.op2)) {
                esta = true;
                if (tabla_simbolos.get(j).descriptor.equals("")) {
                    //load
                    int sz = getSize(tabla_simbolos.get(j).tipo);
                    int pos = stack + tabla_simbolos.get(j).offset + sz;
                    String sgtreg = nextTemp(c.op2);
                    if (sz == 4) {
                        txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    } else {
                        txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    }
                    //tabla_simbolos.get(j).descriptor = sgtreg;
                    liberar2 = true;
                    r2 = sgtreg;
                } else {
                    r2 = tabla_simbolos.get(j).descriptor;
                }
                break;
            }
        }
        if (!esta) {
            for (int j = 0; j < registros.size(); j++) {
                if (registros.get(j).valor.equals(c.op2)) {
                    r2 = registros.get(j).registro;
                    liberar2 = true;
                    esta = true;
                }
            }
        }
        if (!esta) {
            //No es ni temporal ni variable
            r2 = nextTemp(c.op2);
            if (!c.op2.contains("'")) {
                if (c.op2.equals("true")) {
                    txt += "    li " + r2 + ", 1\n";
                } else if (c.op2.equals("false")) {
                    txt += "    li " + r2 + ", 0\n";
                } else {
                    //numero
                    txt += "    li " + r2 + ", " + c.op2 + "\n";
                }
            } else {
                //char
                txt += "    addi " + r2 + ", $zero, " + c.op2 + "\n";
            }
        }
        //ya estan montados hacer la comparacion y liberar
        if (c.op.equals("if ==")) {
            txt += "    beq " + r + ", " + r2 + ", " + c.res + "\n";
        } else if (c.op.equals("if !=")) {
            txt += "    bne " + r + ", " + r2 + ", " + c.res + "\n";
        } else if (c.op.equals("if >=")) {
            txt += "    bge " + r + ", " + r2 + ", " + c.res + "\n";
        } else if (c.op.equals("if <=")) {
            txt += "    ble " + r + ", " + r2 + ", " + c.res + "\n";
        } else if (c.op.equals("if >")) {
            txt += "    bgt " + r + ", " + r2 + ", " + c.res + "\n";
        } else {
            //if <
            txt += "    blt " + r + ", " + r2 + ", " + c.res + "\n";
        }
        if (liberar1) {
            free(r);
        }
        if (liberar2) {
            free(r2);
        }
        return txt;
    }

    public static String retorno(Cuadruplo c) {
        String txt = "";
        boolean esta = false;
        //Lo que retorno esta en tabla de simbolos
        if (c.op1.contains("_")) {
            for (int i = 0; i < tabla_simbolos.size(); i++) {
                if (c.op1.equals(tabla_simbolos.get(i).id)) {
                    if (tabla_simbolos.get(i).descriptor.equals("")) {
                        int sz = getSize(tabla_simbolos.get(i).tipo);
                        int pos = stack + sz + tabla_simbolos.get(i).offset;
                        if (sz == 4) {
                            txt += "    lw $v0, -" + pos + "($fp)\n";
                        } else {
                            txt += "    lb $v0, -" + pos + "($fp)\n";
                        }
                    } else {
                        txt += "    move $v0, " + tabla_simbolos.get(i).descriptor + "\n";
                    }
                    esta = true;
                }
            }
        }
        if (!esta) {
            //Es un temporal
            for (int i = 0; i < registros.size(); i++) {
                if (registros.get(i).valor.equals(c.op1)) {
                    txt += "    move $v0, " + registros.get(i).registro + "\n";
                    esta = true;
                }
            }
        }
        if (!esta) {
            //Es un valor
            if (c.op1.equals("true")) {
                txt += "    li $v0, 1\n";
            } else if (c.op1.equals("false")) {
                txt += "    li $v0, 0\n";
            } else if (c.op1.contains("'")) {
                txt += "    addi $v0, $zero, " + c.op1 + "\n";
            } else {
                //Es un numero
                txt += "    li $v0, " + c.op1 + "\n";
            }
        }
        return txt;
    }

    public static String op(Cuadruplo c) {
        String txt = "";
        boolean esta = false, liberar1 = false, liberar2 = false;
        String r = "";
        for (int j = 0; j < tabla_simbolos.size(); j++) {
            if (tabla_simbolos.get(j).id.equals(c.op1)) {
                esta = true;
                if (tabla_simbolos.get(j).descriptor.equals("")) {
                    //load
                    int sz = getSize(tabla_simbolos.get(j).tipo);
                    int pos = stack + tabla_simbolos.get(j).offset + sz;
                    String sgtreg = nextTemp(c.op1);
                    if (sz == 4) {
                        txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    } else {
                        txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    }
                    tabla_simbolos.get(j).descriptor = sgtreg;
                    liberar1 = true;
                    r = sgtreg;
                } else {
                    r = tabla_simbolos.get(j).descriptor;
                }
                break;
            }
        }
        if (!esta) {
            for (int j = 0; j < registros.size(); j++) {
                if (registros.get(j).valor.equals(c.op1)) {
                    r = registros.get(j).registro;
                    liberar1 = true;
                    esta = true;
                }
            }
        }
        if (!esta) {
            //No es ni temporal ni variable
            r = nextTemp(c.op1);
            //txt += "    li " + r + ", " + c.op1 + "\n";
            liberar1 = true;
            if (!esta) {
                //Es un valor
                if (c.op1.equals("true")) {
                    txt += "    li " + r + ", 1\n";
                } else if (c.op1.equals("false")) {
                    txt += "    li " + r + ", 0\n";
                } else if (c.op1.contains("'")) {
                    txt += "    addi " + r + ", $zero, " + c.op1 + "\n";
                } else {
                    //Es un numero
                    txt += "    li " + r + ", " + c.op1 + "\n";
                }
            }
        }
        String r2 = "";
        esta = false;
        for (int j = 0; j < tabla_simbolos.size(); j++) {
            if (tabla_simbolos.get(j).id.equals(c.op2)) {
                esta = true;
                if (tabla_simbolos.get(j).descriptor.equals("")) {
                    //load
                    int sz = getSize(tabla_simbolos.get(j).tipo);
                    int pos = stack + tabla_simbolos.get(j).offset + sz;
                    String sgtreg = nextTemp(c.op2);
                    if (sz == 4) {
                        txt += "    lw " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    } else {
                        txt += "    lb " + sgtreg + ", " + "-" + pos + "($fp)\n";
                    }
                    //tabla_simbolos.get(j).descriptor = sgtreg;
                    liberar2 = true;
                    r2 = sgtreg;
                } else {
                    r2 = tabla_simbolos.get(j).descriptor;
                }
                break;
            }
        }
        if (!esta) {
            for (int j = 0; j < registros.size(); j++) {
                if (registros.get(j).valor.equals(c.op2)) {
                    r2 = registros.get(j).registro;
                    liberar2 = true;
                    esta = true;
                }
            }
        }
        if (!esta) {
            //No es ni temporal ni variable
            r2 = nextTemp(c.op2);
            //txt += "    li " + r2 + ", " + c.op2 + "\n";
            liberar2 = true;
            if (!esta) {
                //Es un valor
                if (c.op2.equals("true")) {
                    txt += "    li " + r2 + ", 1\n";
                } else if (c.op2.equals("false")) {
                    txt += "    li " + r2 + ", 0\n";
                } else if (c.op2.contains("'")) {
                    txt += "    addi " + r2 + ", $zero, " + c.op2 + "\n";
                } else {
                    //Es un numero
                    txt += "    li " + r2 + ", " + c.op2 + "\n";
                }
            }
        }
        //ya estan en registros los opeandos, falta operar y asignar
        //se guarda en un temporal nuevo
        String t = nextTemp(c.res);
        if (c.op.equals("+")) {
            txt += "    add " + t + ", " + r + ", " + r2 + "\n";
            if (liberar1) {
                free(r);
            }
            if (liberar2) {
                free(r2);
            }
        } else if (c.op.equals("-")) {
            txt += "    sub " + t + ", " + r + ", " + r2 + "\n";
            if (liberar1) {
                free(r);
            }
            if (liberar2) {
                free(r2);
            }
        } else if (c.op.equals("*")) {
            txt += "    mul " + t + ", " + r + ", " + r2 + "\n";
            if (liberar1) {
                free(r);
            }
            if (liberar2) {
                free(r2);
            }
        } else if (c.op.equals("/")) {
            txt += "    div " + t + ", " + r + ", " + r2 + "\n";
            if (liberar1) {
                free(r);
            }
            if (liberar2) {
                free(r2);
            }
        }
        return txt;
    }

    public static void free(String r) {
        for (int i = 0; i < registros.size(); i++) {
            if (registros.get(i).registro.equals(r)) {
                registros.get(i).valor = "";
            }
        }
        for (int i = 0; i < tabla_simbolos.size(); i++) {
            if (tabla_simbolos.get(i).descriptor.equals(r)) {
                tabla_simbolos.get(i).descriptor = "";
            }
        }
    }

    public static String nextTemp(String v) {
        String r = "";
        for (int i = 0; i < 10; i++) {
            if (registros.get(i).valor.equals("")) {
                registros.get(i).valor = v;
                r = registros.get(i).registro;
                break;
            }
        }
        return r;
    }

    public static String Disp() {
        String reg = "";
        for (int i = 10; i < 18; i++) {
            if (registros.get(i).valor.equals("")) {
                reg = registros.get(i).registro;
                break;
            }
        }
        return reg;
    }

    public static void cuadruplos(Node root) {
        boolean skip = false;
        boolean main = false;
        boolean code_block = false;
        boolean falta = false;
        boolean func = false;
        if (root.nombre.equals("CODE")) {
            if (root.hijos.get(0).nombre.equals("BLOQUE IF")
                    || root.hijos.get(0).nombre.equals("BLOQUE FOR")
                    || root.hijos.get(0).nombre.equals("BLOQUE LOOP")
                    || root.hijos.get(0).nombre.equals("BLOQUE OPTIONS")) {
                code_block = true;
                root.siguiente = etiqnueva();
                root.hijos.get(0).siguiente = root.siguiente;
            }
            if (root.hijos.size() > 1) {
                if (root.hijos.get(1).nombre.equals("BLOQUE ELSE")) {
                    code_block = true;
                    //String siguiente = etiqnueva();
                    root.hijos.get(1).siguiente = root.hijos.get(0).siguiente;
                }
            }
        }
        if (root.nombre.equals("ASIGNACION")) {
            if (root.hijos.size() == 3) {
                genCodOP(root.hijos.get(2));
                cuads.add(new Cuadruplo("=", root.hijos.get(2).lugar, "", root.hijos.get(0).valor));
            } else {
                //M
                if (root.hijos.get(1).nombre.equals("ASIG ARRAY")) {
                    String type = get_tipo2(root.hijos.get(0).valor);
                    if (type.contains("matrix")) {
                        //Caso no cubierto
                    } else if (type.contains("array")) {
                        String t = tempnuevo();
                        genCodOP(root.hijos.get(1).hijos.get(0));
                        String tip = type.substring(type.indexOf("_") + 1, type.indexOf("{"));
                        int tam = getSize(tip);
                        String sz = "" + tam;
                        cuads.add(new Cuadruplo("*", root.hijos.get(1).hijos.get(0).lugar, sz, t));
                        genCodOP(root.hijos.get(3));
                        cuads.add(new Cuadruplo("[]=", root.hijos.get(0).valor, t, root.hijos.get(3).lugar));
                    }
                } else {
                    String t = tempnuevo();
                    genCodOP(root.hijos.get(1).hijos.get(0));
                    String tipo = get_tipo2(root.hijos.get(0).valor);
                    String col = tipo.substring(tipo.indexOf("{") + 3, tipo.indexOf("}"));
                    cuads.add(new Cuadruplo("*", root.hijos.get(1).hijos.get(0).lugar, col, t));
                    String t1 = tempnuevo();
                    genCodOP(root.hijos.get(1).hijos.get(1));
                    cuads.add(new Cuadruplo("+", t, root.hijos.get(1).hijos.get(1).lugar, t1));
                    String t2 = tempnuevo();
                    String tip = tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{"));
                    int tam = getSize(tip);
                    String sz = "" + tam;
                    cuads.add(new Cuadruplo("*", t1, sz, t2));
                    genCodOP(root.hijos.get(3));
                    cuads.add(new Cuadruplo("[]=", root.hijos.get(0).valor, t2, root.hijos.get(3).lugar));
                }
            }
        } else if (root.nombre.equals("DECLARACION")) {
            genCodDASIG(root.hijos.get(1));
        } else if (root.nombre.equals("BLOQUE IF")) {
            skip = true;
            if (root.hijos.size() > 1) {
                System.out.println("");
                if (padre.hijos.size() == 1) {
                    root.hijos.get(0).verdadera = etiqnueva();
                    root.hijos.get(0).falsa = root.siguiente;
                    genCodBOOL(root.hijos.get(0));
                    cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(1).siguiente = root.siguiente;
                    cuadruplos(root.hijos.get(1));
                } else if (padre.hijos.size() == 2 && padre.hijos.get(1).nombre.equals("CODE")) {
                    //solo if
                    root.hijos.get(0).verdadera = etiqnueva();
                    root.hijos.get(0).falsa = root.siguiente;
                    genCodBOOL(root.hijos.get(0));
                    cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(1).siguiente = root.siguiente;
                    cuadruplos(root.hijos.get(1));
                } else {
                    //if con else o else if
                    root.hijos.get(0).verdadera = etiqnueva();
                    root.hijos.get(0).falsa = etiqnueva();
                    genCodBOOL(root.hijos.get(0));
                    cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(1).siguiente = root.siguiente;
                    padre.hijos.get(1).siguiente = padre.siguiente;
                    cuadruplos(root.hijos.get(1));
                    cuads.add(new Cuadruplo("GOTO", root.siguiente, "", ""));
                    cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).falsa, "", ""));
                    //f.hijos.get(1).siguiente = root.siguiente;
                    //cuadruplos(f.hijos.get(1));
                }
            }
        } else if (root.nombre.equals("BLOQUE LOOP")) {
            skip = true;
            root.comienzo = etiqnueva();
            cuads.add(new Cuadruplo("ETIQ", root.comienzo, "", ""));
            root.hijos.get(0).verdadera = etiqnueva();
            root.hijos.get(0).falsa = root.siguiente;
            genCodBOOL(root.hijos.get(0));
            cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
            root.hijos.get(1).siguiente = root.comienzo;
            cuadruplos(root.hijos.get(1));
            cuads.add(new Cuadruplo("GOTO", root.comienzo, "", ""));
        } else if (root.nombre.equals("BLOQUE FOR")) {
            skip = true;
            cuads.add(new Cuadruplo("=", "0", "", root.hijos.get(1).valor));
            root.comienzo = etiqnueva();
            cuads.add(new Cuadruplo("ETIQ", root.comienzo, "", ""));
            genCodOP(root.hijos.get(3));
            String verdadera = etiqnueva();
            cuads.add(new Cuadruplo("if <=", root.hijos.get(1).valor, root.hijos.get(3).lugar, verdadera));
            cuads.add(new Cuadruplo("GOTO", root.siguiente, "", ""));
            root.asig = etiqnueva();
            root.hijos.get(7).siguiente = root.asig;
            cuads.add(new Cuadruplo("ETIQ", verdadera, "", ""));
            cuadruplos(root.hijos.get(7));
            cuads.add(new Cuadruplo("ETIQ", root.asig, "", ""));
            String temp = tempnuevo();
            cuads.add(new Cuadruplo("+", root.hijos.get(1).valor, "1", temp));
            cuads.add(new Cuadruplo("=", temp, "", root.hijos.get(1).valor));
            cuads.add(new Cuadruplo("GOTO", root.comienzo, "", ""));
        } else if (root.nombre.equals("PRINT")) {
            if (root.hijos.get(0).nombre.equals("STRING")) {
                String m = mensaje(root.hijos.get(0).valor);
                cuads.add(new Cuadruplo("print", m, "string", ""));
            } else {
                genCodOP(root.hijos.get(0));
                cuads.add(new Cuadruplo("print", root.hijos.get(0).lugar, tipo_valoro(root.hijos.get(0)), ""));
            }
        } else if (root.nombre.equals("READ")) {
            cuads.add(new Cuadruplo("read", root.hijos.get(0).valor, get_tipo2(root.hijos.get(0).valor), ""));
        } else if (root.nombre.equals("RETURN")) {
            genCodOP(root.hijos.get(0));
            cuads.add(new Cuadruplo("RET", root.hijos.get(0).lugar, "", ""));
        } else if (root.nombre.equals("BLOQUE OPTIONS")) {
            skip = true;
            id_options = root.hijos.get(0).valor;
            options_father = root;
            options_father.comienzo = etiqnueva();
            root.hijos.get(2).siguiente = root.siguiente;
            optionsblock(root.hijos.get(2));
        } else if (root.nombre.equals("MAIN")) {
            main = true;
        } else if (root.nombre.equals("FUNCION")) {
            func = true;
            cuads.add(new Cuadruplo("F_ETIQ", root.hijos.get(1).valor, "", ""));
        } else if (root.nombre.equals("LLAMADA FUNCION")) {
            skip = true;
            if (root.hijos.size() == 1) {
                cuads.add(new Cuadruplo("call", root.hijos.get(0).valor, "0", ""));
                //root.lugar = tempnuevo();
                //cuads.add(new Cuadruplo("=", "RET", "", root.lugar));
            } else if (root.hijos.size() == 2) {
                cantparam = 1;
                genCodOP(root.hijos.get(1));
                String t = tipo_valoro(root.hijos.get(1));
                int sz = getSize(t);
                String val = sz + "";
                cuads.add(new Cuadruplo("param", root.hijos.get(1).lugar, val, ""));
                cuads.add(new Cuadruplo("call", root.hijos.get(0).valor, "1", ""));
            } else {
                cantparam = 0;
                params2(root.hijos.get(1), root.hijos.get(0).valor);
                String cant = "" + cantparam;
                cuads.add(new Cuadruplo("call", root.hijos.get(0).valor, cant, ""));
                //root.lugar = tempnuevo();
                //cuads.add(new Cuadruplo("=", "RET", "", root.lugar));
            }
        }
        for (int i = 0; i < root.hijos.size(); i++) {
            if (root.nombre.equals("CODE")) {
                for (int j = 0; j < root.hijos.size(); j++) {
                    if (root.hijos.get(j).nombre.equals("BLOQUE IF")) {
                        padre = root;
                        break;
                    }
                }
            }
            if (code_block) {
                if (i == root.hijos.size() - 1 && !root.hijos.get(i).nombre.equals("CODE")) {
                    falta = true;
                }
                if (root.hijos.get(i).nombre.equals("CODE")) {
                    cuads.add(new Cuadruplo("ETIQ", root.siguiente, "", ""));
                    falta = false;
                }
            } else {
                if (root.hijos.get(i).nombre.equals("CODE")) {
                    root.hijos.get(i).siguiente = root.siguiente;
                }
            }
            if (main && root.hijos.get(i).nombre.equals("CODE")) {
                cuads.add(new Cuadruplo("M_ETIQ", "main", "", ""));
            }
            if (!skip) {
                cuadruplos(root.hijos.get(i));
            }
        }
        if (func) {
            cuads.add(new Cuadruplo("E_ETIQ", "fin" + root.hijos.get(1).valor, "", ""));
        }
        if (falta) {
            cuads.add(new Cuadruplo("ETIQ", root.siguiente, "", ""));
        }
        if (main) {
            cuads.add(new Cuadruplo("P_ETIQ", "fin_main", "", ""));
        }
    }

    public static void optionsblock(Node opt) {
        if (opt.nombre.equals("BLOQUE OPTION")) {
            cuads.add(new Cuadruplo("ETIQ", options_father.comienzo, "", ""));
            opt.verdadera = etiqnueva();
            genCodOP(opt.hijos.get(0));
            cuads.add(new Cuadruplo("if ==", id_options, opt.hijos.get(0).lugar, opt.verdadera));
            opt.comienzo = etiqnueva();
            cuads.add(new Cuadruplo("GOTO", opt.comienzo, "", ""));
            opt.hijos.get(1).siguiente = opt.siguiente;
            cuads.add(new Cuadruplo("ETIQ", opt.verdadera, "", ""));
            cuadruplos(opt.hijos.get(1));
            cuads.add(new Cuadruplo("GOTO", opt.siguiente, "", ""));
            options_father = opt;
            opt.hijos.get(2).siguiente = opt.siguiente;
            optionsblock(opt.hijos.get(2));
        } else {
            cuads.add(new Cuadruplo("ETIQ", options_father.comienzo, "", ""));
            opt.hijos.get(0).siguiente = opt.siguiente;
            cuadruplos(opt.hijos.get(0));
            //bloque default options
        }
    }

    public static String mensaje(String str) {
        int pos = -1;
        if (mensajes.contains(str)) {
            pos = mensajes.indexOf(str);
        } else {
            mensajes.add(str);
            pos = mensajes.size() - 1;
        }
        return "" + pos;
    }

    public static void genCodBOOL(Node root) {
        if (root.nombre.equals("VALOR OP BOOL")) {
            if (root.hijos.size() == 4) {
                root.hijos.get(2).verdadera = root.falsa;
                root.hijos.get(2).falsa = root.verdadera;
                genCodBOOL(root.hijos.get(2));
            } else {
                root.hijos.get(1).verdadera = root.verdadera;
                root.hijos.get(1).falsa = root.falsa;
                genCodBOOL(root.hijos.get(2));
            }
        }
        for (int i = 0; i < root.hijos.size(); i++) {
            if (root.nombre.equals("AND")) {
                if (i == 0) {
                    root.hijos.get(i).verdadera = etiqnueva();
                    root.hijos.get(i).falsa = root.falsa;
                } else if (i == 1) {
                    cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).verdadera, "", ""));
                    root.hijos.get(i).verdadera = root.verdadera;
                    root.hijos.get(i).falsa = root.falsa;
                }
            } else if (root.nombre.equals("OR")) {
                if (i == 0) {
                    root.hijos.get(i).verdadera = root.verdadera;
                    root.hijos.get(i).falsa = etiqnueva();
                } else if (i == 1) {
                    cuads.add(new Cuadruplo("ETIQ", root.hijos.get(0).falsa, "", ""));
                    root.hijos.get(i).verdadera = root.verdadera;
                    root.hijos.get(i).falsa = root.falsa;
                }
            }
            if (!root.nombre.equals("OPREL")) {
                genCodBOOL(root.hijos.get(i));
            }
        }
        if (root.nombre.equals("BOOL")) {
            String salto = "";
            if (root.valor.contains("true")) {
                salto = root.verdadera;
            } else {
                salto = root.falsa;
            }
            cuads.add(new Cuadruplo("GOTO", salto, "", ""));
        } else if (root.nombre.equals("OPREL")) {
            genCodOP(root.hijos.get(0));
            genCodOP(root.hijos.get(1));
            String val = "if " + root.valor;
            cuads.add(new Cuadruplo(val, root.hijos.get(0).lugar, root.hijos.get(1).lugar, root.verdadera));
            cuads.add(new Cuadruplo("GOTO", root.falsa, "", ""));
        } else if (root.nombre.equals("ID")) {
            genCodOP(root);
            cuads.add(new Cuadruplo("if ==", root.lugar, "true", root.verdadera));
            cuads.add(new Cuadruplo("GOTO", root.falsa, "", ""));
        }
    }

    public static void genCodDASIG(Node root) {
        for (int i = 0; i < root.hijos.size(); i++) {
            if (root.hijos.get(i).nombre.equals("LISTA DE VARIABLES")) {
                genCodDASIG(root.hijos.get(i));
            }
            if (root.hijos.get(i).nombre.equals("DECLARACION CON ASIGNACION")) {
                genCodOP(root.hijos.get(i).hijos.get(1));
                cuads.add(new Cuadruplo("=", root.hijos.get(i).hijos.get(1).lugar, "", root.hijos.get(i - 1).valor));
            }
        }
    }

    public static void genCodOP(Node root) {
        for (int i = 0; i < root.hijos.size(); i++) {
            genCodOP(root.hijos.get(i));
        }
        boolean funcion = false;
        if (root.nombre.equals("ID")) {
            String type = get_tipo2(root.valor);
            if (type.contains("->")) {
                funcion = true;
            }
        }
        if (root.nombre.equals("INT") || root.nombre.equals("ID") && root.hijos.size() == 0
                && !funcion || root.nombre.equals("CHAR") || root.nombre.equals("BOOL")) {
            root.lugar = root.valor;
        } else if (root.valor.equals("*")) {
            root.lugar = tempnuevo();
            cuads.add(new Cuadruplo("*", root.hijos.get(0).lugar, root.hijos.get(1).lugar, root.lugar));
        } else if (root.valor.equals("/")) {
            root.lugar = tempnuevo();
            cuads.add(new Cuadruplo("/", root.hijos.get(0).lugar, root.hijos.get(1).lugar, root.lugar));
        } else if (root.valor.equals("+")) {
            root.lugar = tempnuevo();
            cuads.add(new Cuadruplo("+", root.hijos.get(0).lugar, root.hijos.get(1).lugar, root.lugar));
        } else if (root.valor.equals("-")) {
            root.lugar = tempnuevo();
            cuads.add(new Cuadruplo("-", root.hijos.get(0).lugar, root.hijos.get(1).lugar, root.lugar));
        } else if (root.nombre.equals("ID")) {
            String tipo = get_tipo2(root.valor);
            if (tipo.contains("array")) {
                String t = tempnuevo();
                String tip = tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{"));
                int tam = getSize(tip);
                String sz = "" + tam;
                cuads.add(new Cuadruplo("*", root.hijos.get(0).lugar, sz, t));
                root.lugar = tempnuevo();
                cuads.add(new Cuadruplo("=[]", root.valor, t, root.lugar));
            } else if (tipo.contains("matrix")) {
                if (!root.hijos.get(0).nombre.equals("LISTA POSICIONES")) {
                    //NO FUE CUBIERTAA ASIGNAR UN ARRAY ENTERO DE UN SOLO A UNA MATRIZ
                } else {
                    String t = tempnuevo();
                    String col = tipo.substring(tipo.indexOf("{") + 3, tipo.indexOf("}"));
                    cuads.add(new Cuadruplo("*", root.hijos.get(0).hijos.get(0).lugar, col, t));
                    String t1 = tempnuevo();
                    cuads.add(new Cuadruplo("+", t, root.hijos.get(0).hijos.get(1).lugar, t1));
                    String t2 = tempnuevo();
                    String tip = tipo.substring(tipo.indexOf("_") + 1, tipo.indexOf("{"));
                    int tam = getSize(tip);
                    String sz = "" + tam;
                    cuads.add(new Cuadruplo("*", t1, sz, t2));
                    root.lugar = tempnuevo();
                    cuads.add(new Cuadruplo("=[]", root.valor, t2, root.lugar));
                }
            } else {
                //FUNCION
                if (root.hijos.size() == 0) {
                    cuads.add(new Cuadruplo("call", root.valor, "0", ""));
                    root.lugar = tempnuevo();
                    cuads.add(new Cuadruplo("=", "RET", "", root.lugar));
                } else {
                    cantparam = 0;
                    params2(root, root.valor);
                    String cant = "" + cantparam;
                    cuads.add(new Cuadruplo("call", root.valor, cant, ""));
                    root.lugar = tempnuevo();
                    cuads.add(new Cuadruplo("=", "RET", "", root.lugar));
                }
            }
        }
    }

    public static void params2(Node n, String f) {
        for (int i = 0; i < n.hijos.size(); i++) {
            if (!n.hijos.get(i).nombre.equals("LISTA PARAMETROS")) {
                genCodOP(n.hijos.get(i));
                int s = getSize(tipo_valoro(n.hijos.get(i)));
                String si = "" + s;
                cuads.add(new Cuadruplo("param", n.hijos.get(i).lugar, si, ""));
                cantparam += 1;
            } else {
                params2(n.hijos.get(i), f);
            }
        }
    }

    public static String tempnuevo() {
        String r = "t" + temporales;
        temporales = temporales + 1;
        return r;
    }

    public static String etiqnueva() {
        String r = "etiq" + etiquetas;
        etiquetas = etiquetas + 1;
        return r;
    }

    public static void llenar(Node root, DefaultMutableTreeNode current) {
        for (int i = 0; i < root.hijos.size(); i++) {
            current.add(new DefaultMutableTreeNode(root.hijos.get(i)));
            if (!root.hijos.get(i).hijos.isEmpty()) {
                llenar(root.hijos.get(i), (DefaultMutableTreeNode) current.getChildAt(i));
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                generateLexer();
                new Interfaz().setVisible(true);
            }
        });
    }

    public static void generateLexer() {
        String[] param = new String[3];
        param[0] = "-d";
        param[1] = "src/compilador";
        param[2] = "src/compilador/Lexer.flex";
        String[] param2 = {"-destdir", "src/compilador/", "-parser", "parser", "src/compilador/Cup.cup"};
        try {
            jflex.Main.generate(param);
            System.out.println("Funciono1");
            java_cup.Main.main(param2);
            System.out.println("Funciono2");
        } catch (Exception e) {
            System.out.println("No funciono");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_analizar;
    private javax.swing.JButton bt_arbol;
    private javax.swing.JButton bt_cuad;
    private javax.swing.JButton bt_final;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jtree;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panel3;
    private javax.swing.JButton salirArbol;
    private javax.swing.JButton salirCuad;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tbCuadruplos;
    private javax.swing.JTextArea textEditorArea;
    // End of variables declaration//GEN-END:variables
}
