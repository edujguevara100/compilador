package compilador;
import java_cup.runtime.Symbol;

parser code 
{:
    public String error = "";
    public void report_error(String msj, Object o){
      StringBuffer errorHead = new StringBuffer("Error Sintactico");
      if(o instanceof java_cup.runtime.Symbol){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) o);
        if (s.left >= 0) {
          errorHead.append(" en la linea: "+(s.right+1));
          if (s.right >= 0){
            errorHead.append(", columna: "+(s.left+1));
          }
        }
        errorHead.append(" en el token: "+(s.value));
        errorHead.append(" -> "+msj);
      }
    System.out.println(errorHead);
    }
    
    public void syntax_error(Symbol cur_token){
        System.out.printf("Error en linea:%d, columna:%d, se encontro el token:%s \n",
        cur_token.right+1,
        cur_token.left+1,
        cur_token.value);
    }
:}; 

terminal ANDOR, OPREL, LOOP, MAIN, FOR, OPTIONS, OPT, DEFOPT, BEGIN, 
    ENDM, ENDO, ENDI, ENDE, ENDF, ENDFU, ENDL, FINLINE, ABRE, CIERRA, HASTA, ASIG, OPMD, OPSR, COMA, RETURN, 
    TYPE, FUNC, IF, ID, ABREPAR, CIERRAPAR, ELSE, PRINT, VALOR, STRING, NOT;

non terminal FUNCION, FUNCION2, DECLARACION, ASIGNACION, IFCOND, ELSECOND, FORCOND,
    LOOPCOND, OPTIONSCOND, MAINCOND, PRINTCOND, OPERACION, CONDICION, 
    CODE, LISTAPARAM, LISTATYPES, DECL, DECL2, OPTT, PRINTER, OP1, 
    OP2, COND1, COND2, COND3, RETORNO, FUNCION1;

start with MAINCOND;

FUNCION1 ::= FUNCION | ;
FUNCION ::=  FUNCION1 FUNCION2;
FUNCION2 ::= FUNC TYPE ID ABREPAR LISTAPARAM CIERRAPAR BEGIN CODE RETORNO ENDFU
             | FUNC error {: System.out.println("Error en la declaracion de la funcion"); :};

LISTAPARAM ::= TYPE ID | LISTATYPES COMA TYPE ID | ;

LISTATYPES ::= LISTATYPES COMA TYPE ID | TYPE ID;

MAINCOND ::= FUNCION1 FUNC MAIN BEGIN CODE RETORNO ENDM
             | error {: System.out.println("Error en la declaracion del MAIN"); :};

DECLARACION ::= TYPE DECL FINLINE
                | TYPE DECL error {: System.out.println("Error en la declaracion"); :};

DECL ::= DECL COMA ID DECL2 | ID DECL2;
DECL2 ::= ASIG OPERACION | ;

ASIGNACION ::= ID ASIG OPERACION FINLINE
               | ID ASIG OPERACION error {: System.out.println("Error en la asignacion"); :};

IFCOND ::= IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDI
           | IF error {: System.out.println("Error en el IF"); :};

ELSECOND ::= ELSE IF ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDE ELSECOND
             | ELSE BEGIN CODE ENDE
             | ELSE error {: System.out.println("Error en el ELSE"); :};

FORCOND ::= FOR ABREPAR TYPE ID HASTA OPERACION COMA ID OPSR OPSR CIERRAPAR BEGIN CODE ENDF
            | FOR error {: System.out.println("Error en el FOR"); :};

LOOPCOND ::= LOOP ABREPAR CONDICION CIERRAPAR BEGIN CODE ENDL
             | LOOP error {: System.out.println("Error en el LOOP"); :};

OPTIONSCOND ::= OPTIONS ABREPAR ID COMA TYPE CIERRAPAR BEGIN OPTT ENDO
                | OPTIONS error {: System.out.println("Error en OPTIONS"); :};

OPTT ::= OPT ABREPAR VALOR CIERRAPAR ABRE CODE CIERRA OPTT | DEFOPT ABRE CODE CIERRA
         | OPT error {: System.out.println("Error en OPT"); :};

PRINTCOND ::= PRINT ABREPAR PRINTER CIERRAPAR FINLINE
              | PRINT error {: System.out.println("Error en el PRINT"); :};

PRINTER ::= OPERACION | STRING;

OPERACION ::= OPERACION OPSR OP1 | OP1;
OP1 ::= OP1 OPMD OP2 | OP2;
OP2 ::= VALOR | ID | ABREPAR OPERACION CIERRAPAR;

CONDICION ::= CONDICION OPREL COND1 | COND1;
COND1 ::= COND1 ANDOR COND2 | COND2;
COND2 ::= COND3 ABREPAR CONDICION CIERRAPAR | VALOR | ID;
COND3 ::= NOT | ; 

CODE ::= DECLARACION CODE | ASIGNACION CODE | IFCOND CODE | IFCOND ELSECOND CODE
         | FORCOND CODE | LOOPCOND CODE | OPTIONSCOND CODE | PRINTCOND CODE;


RETORNO ::= RETURN OPERACION FINLINE
            | RETURN error {: System.out.println("Error en el RETURN"); :};


