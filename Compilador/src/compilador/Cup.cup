package compilador;
import java_cup.runtime.*;

parser code 
{:
    public String error = "";
    public Node raiz;
    public void syntax_error(Symbol s){
        error += "Error de sintaxis no se esperaba: "+ s.value +", en la linea: "+(s.left+1)+", columna: "+(s.right+1)+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("El programa contiene errores sintacticos no puede seguir");
    }
:}; 

terminal ANDOR, OPREL, LOOP, MAIN, FOR, OPTIONS, OPT, DEFOPT, BEGIN, 
    ENDM, ENDO, ENDI, ENDE, ENDF, ENDFU, ENDL, FINLINE, ABRE, CIERRA, HASTA, ASIG, OPMD, OPSR, 
    COMA, RETURN, TYPE, FUNC, IF, ID, ABREPAR, CIERRAPAR, ELSE, PRINT, INT, CHAR, BOOL, STRING, 
    NOT, ABRECOR, CIERRACOR;

non terminal FUNCION, FUNCION2, DECLARACION, ASIGNACION, IFCOND, ELSECOND, FORCOND,
    LOOPCOND, OPTIONSCOND, MAINCOND, PRINTCOND, OPERACION, CONDICION, 
    CODE, LISTAPARAM, LISTATYPES, DECL, DECL2, OPTT, PRINTER, OP1, 
    OP2, COND1, COND2, COND3, RETORNO, VALOR, ARREGLO, MATRIZ, VALOR1,
    ARREGLO1, MATRIZ1, VALORO, LLAMADO, PARAMS, PARAMS1, ORIGIN;

precedence left OPMD;
precedence left OPSR;
start with ORIGIN;

ORIGIN ::= MAINCOND:m
           {:
                parser.raiz = (Node)m;      
           :};

FUNCION ::=  FUNCION:f FUNCION2:ff
             {:
                Node funcion = new Node("GENERAR FUNCION");
                funcion.addNode(f);
                funcion.addNode(ff);
                RESULT = funcion;
             :}
             | ;

FUNCION2 ::= FUNC TYPE:t ID:i ABREPAR LISTAPARAM:listaparam CIERRAPAR BEGIN CODE:code RETORNO:retorno ENDFU
             {:
                Node funcion2 = new Node("FUNCION");
                funcion2.addNode(new Node("FUNC", "func"));
                funcion2.addNode(new Node("TYPE", ((String) t)));
                funcion2.addNode(new Node("ID", ((String) i)));
                funcion2.addNode(new Node("ABREPAR", "("));
                funcion2.addNode(listaparam);
                funcion2.addNode(new Node("CIERRAPAR", ")"));
                funcion2.addNode(new Node("BEGIN", "begin"));
                funcion2.addNode(code);
                funcion2.addNode(retorno);
                funcion2.addNode(new Node("ENDFU", "end func"));
                RESULT = funcion2;
             :};

LISTAPARAM ::= TYPE:t ID:i
               {:
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               :}
               | LISTATYPES:listatypes COMA TYPE:t ID:i 
               {:
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(listatypes);
                listaparam.addNode(new Node("COMA", ","));
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               :}
               | ;

LISTATYPES ::= LISTATYPES:lista COMA TYPE:t ID:i
               {:
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(lista);
                listatypes.addNode(new Node("COMA", ","));
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               :}
               | TYPE:t ID:i
               {:
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               :};

MAINCOND ::= FUNCION:f FUNC MAIN BEGIN CODE:code RETORNO:retorno ENDM
             {:
                Node maincond = new Node("MAIN");
                maincond.addNode(f);
                maincond.addNode(new Node("FUNC", "func"));
                maincond.addNode(new Node("MAIN", "int_main()"));
                maincond.addNode(new Node("BEGIN", "begin"));
                maincond.addNode(code);
                maincond.addNode(retorno);
                maincond.addNode(new Node("ENDM", "end main"));
                RESULT = maincond;
             :};

DECLARACION ::= TYPE:t DECL:d FINLINE
                {:
                    Node declaracion = new Node("DECLARACION");
                    declaracion.addNode(new Node("TYPE", ((String) t)));
                    declaracion.addNode(d);
                    declaracion.addNode(new Node("FINLINE", ";"));
                    RESULT = declaracion;
                :};

DECL ::= DECL:d COMA ID:i DECL2:dd
         {:
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(d);
            decl.addNode(new Node("COMA", ","));
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         :}
         | ID:i DECL2:dd
         {:
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         :};

DECL2 ::= ASIG VALORO:v
          {:
            Node decl2 = new Node("DECLARACION CON ASIGNACION");
            decl2.addNode(new Node("ASIG", "="));
            decl2.addNode(v);
            RESULT = decl2;
          :}
          |  ;


ASIGNACION ::= ID:i ASIG VALORO:v FINLINE
               {:
                Node asignacion = new Node("ASIGNACION");
                asignacion.addNode(new Node("ID", ((String) i)));
                asignacion.addNode(new Node("ASIG", "="));
                asignacion.addNode(v);
                asignacion.addNode(new Node("FINLINE", ";"));
                RESULT = asignacion;
               :};

IFCOND ::= IF ABREPAR CONDICION:c CIERRAPAR BEGIN CODE:code ENDI
           {:
            Node ifcond = new Node("BLOQUE IF");
            ifcond.addNode(new Node("IF", "if"));
            ifcond.addNode(new Node("ABREPAR", "("));
            ifcond.addNode(c);
            ifcond.addNode(new Node("CIERRAPAR", ")"));
            ifcond.addNode(new Node("BEGIN", "begin"));
            ifcond.addNode(code);
            ifcond.addNode(new Node("ENDI", "end if"));
            RESULT = ifcond;
           :};

ELSECOND ::= ELSE IF ABREPAR CONDICION:c CIERRAPAR BEGIN CODE:code ENDE ELSECOND:e
             {:
                Node elsecond = new Node("BLOQUE ELSE IF");
                elsecond.addNode(new Node("ELSE", "else"));
                elsecond.addNode(new Node("IF", "if"));
                elsecond.addNode(new Node("ABREPAR", "("));
                elsecond.addNode(c);
                elsecond.addNode(new Node("CIERRAPAR", ")"));
                elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(code);
                elsecond.addNode(new Node("ENDE", "end else"));
                elsecond.addNode(e);
                RESULT = elsecond;
             :}
             | ELSE BEGIN CODE:c ENDE
             {:
                Node elsecond = new Node("BLOQUE ELSE");
                elsecond = new Node("ELSE", "else");
                elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(c);
                elsecond.addNode(new Node("ENDE", "end else"));
                RESULT = elsecond;
             :};

FORCOND ::= FOR ABREPAR TYPE:t ID:i HASTA OPERACION:o COMA ID:id OPSR OPSR CIERRAPAR BEGIN CODE:c ENDF
            {:
                Node forcond = new Node("BLOQUE FOR");
                forcond.addNode(new Node("FOR", "for"));
                forcond.addNode(new Node("ABREPAR", "("));
                forcond.addNode(new Node("TYPE", ((String) t)));
                forcond.addNode(new Node("ID", ((String) i)));
                forcond.addNode(new Node("HASTA", "->"));
                forcond.addNode(o);
                forcond.addNode(new Node("COMA", ","));
                forcond.addNode(new Node("ID", ((String) id)));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("CIERRAPAR", ")"));
                forcond.addNode(new Node("BEGIN", "begin"));
                forcond.addNode(c);
                forcond.addNode(new Node("ENDF", "end for"));
                RESULT = forcond;
            :};

LOOPCOND ::= LOOP ABREPAR CONDICION:c CIERRAPAR BEGIN CODE:code ENDL
             {:
                Node loopcond = new Node("BLOQUE LOOP");
                loopcond.addNode(new Node("LOOP", "loop"));
                loopcond.addNode(new Node("ABREPAR", "("));
                loopcond.addNode(c);
                loopcond.addNode(new Node("CIERRAPAR", ")"));
                loopcond.addNode(new Node("BEGIN", "begin"));
                loopcond.addNode(code);
                loopcond.addNode(new Node("ENDL", "end loop"));
                RESULT = loopcond;
             :};

OPTIONSCOND ::= OPTIONS ABREPAR ID:i COMA TYPE:t CIERRAPAR BEGIN OPTT:o ENDO
                {:
                    Node optionscond = new Node("BLOQUE OPTIONS");
                    optionscond.addNode(new Node("OPTIONS", "options"));
                    optionscond.addNode(new Node("ABREPAR", "("));
                    optionscond.addNode(new Node("ID", ((String) i)));
                    optionscond.addNode(new Node("COMA", ","));
                    optionscond.addNode(new Node("TYPE", ((String) t)));
                    optionscond.addNode(new Node("CIERRAPAR", ")"));
                    optionscond.addNode(new Node("BEGIN", "begin"));
                    optionscond.addNode(o);
                    optionscond.addNode(new Node("ENDO", "end options"));
                    RESULT = optionscond;
                :};

OPTT ::= OPT ABRECOR VALORO:v CIERRACOR ABRE CODE:c CIERRA OPTT:o
         {:
            Node optt = new Node("BLOQUE OPTION");
            optt.addNode(new Node("OPTION", "opt"));
            optt.addNode(new Node("ABRECOR", "["));
            optt.addNode(v);
            optt.addNode(new Node("CIERRACOR", "]"));
            optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            optt.addNode(new Node("CIERRA", "}"));
            optt.addNode(o);
            RESULT = optt;
         :}
         | DEFOPT ABRE CODE:c CIERRA
         {:
            Node optt = new Node("BLOQUE DEFAULT OPTION");
            optt.addNode(new Node("DEFOPT", "opt_def"));
            optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            optt.addNode(new Node("CIERRA", "}"));
            RESULT = optt;
         :};
         

PRINTCOND ::= PRINT ABREPAR PRINTER:p CIERRAPAR FINLINE
              {:
                Node printcond = new Node("PRINT");
                printcond.addNode(new Node("PRINT", "print"));
                printcond.addNode(new Node("ABREPAR", "("));
                printcond.addNode(p);
                printcond.addNode(new Node("CIERRAPAR", ")"));
                printcond.addNode(new Node("FINLINE", ";"));
                RESULT = printcond;
              :};

PRINTER ::= VALORO:v
            {:  
                Node prin = new Node("PRINT CONTENT");
                prin.addNode(v);
                RESULT = prin;
            :}
            | STRING:s
            {:  
                Node prin = new Node("PRINT CONTENT");
                prin.addNode(new Node("STRING", ((String) s)));
                RESULT = prin;
            :};

OPERACION ::= OPERACION:o OPSR:op OP1:op1 
              {:
                Node operacion = new Node("OPERACION SR");
                operacion.addNode(o);
                operacion.addNode(new Node("OPSR", ((String) op)));
                operacion.addNode(op1);
                RESULT = operacion;
              :}
              | OP1:op1
              {:
                Node operacion = new Node("OPERACION SR");
                operacion.addNode(op1);
                RESULT = operacion;
              :};

OP1 ::= OP1:op1 OPMD:op OP2:op2
        {:
            Node operacion = new Node("OPERACION MD");
            operacion.addNode(op1);
            operacion.addNode(new Node("OPSR", ((String) op)));
            operacion.addNode(op2);
            RESULT = operacion;
        :}
        | OP2:op2
        {:
            Node operacion = new Node("OPERACION MD");
            operacion.addNode(op2);
            RESULT = operacion;
        :};

OP2 ::= INT:i
        {:
            Node op2 = new Node("VALOR OPERACION");
            op2.addNode(new Node("INT", ((String) i)));
            RESULT = op2;
        :}
        | ID:i
        {:
            Node op2 = new Node("VALOR OPERACION");
            op2.addNode(new Node("ID", ((String) i)));
            RESULT = op2;
        :}
        | ABREPAR OPERACION:o CIERRAPAR
        {:
            Node op2 = new Node("VALOR OPERACION");
            op2.addNode(new Node("ABREPAR", "("));
            op2.addNode(o);
            op2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = op2;
        :};

CONDICION ::= CONDICION:c OPREL:op COND1:c1
              {:
                Node condicion = new Node("OPERACION OPREL");
                condicion.addNode(c);
                condicion.addNode(new Node("OPREL", ((String) op)));
                condicion.addNode(c1);
                RESULT = condicion;
              :}
              | COND1:c1
              {:
                Node condicion = new Node("OPERACION OPREL");
                condicion.addNode(c1);
                RESULT = condicion;
              :};

COND1 ::= COND1:c1 ANDOR:a COND2:c2
          {:
            Node cond1 = new Node("OPERACION ANDOR");
            cond1.addNode(c1);
            cond1.addNode(new Node("ANDOR", ((String) a)));
            cond1.addNode(c2);
            RESULT = cond1;
          :}
          | COND2:c2
          {:
            Node cond1 = new Node("OPERACION ANDOR");
            cond1.addNode(c2);
            RESULT = cond1;
          :};

COND2 ::= COND3:c3 ABREPAR CONDICION:c CIERRAPAR 
          {:
            Node cond2 = new Node("VALOR OPERACION");
            cond2.addNode(c3);
            cond2.addNode(new Node("ABREPAR", "("));
            cond2.addNode(c);
            cond2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = cond2;
          :}
          | BOOL:b
          {:    
            Node cond2 = new Node("VALOR OPERACION");
            cond2.addNode(new Node("BOOL", ((String) b)));
            RESULT = cond2;
          :}
          | ID:i
          {:    
            Node cond2 = new Node("VALOR OPERACION");
            cond2.addNode(new Node("ID", ((String) i)));
            RESULT = cond2;
          :};

COND3 ::= NOT
          {:
            Node cond3 = new Node("VALOR OPERACION");
            cond3.addNode(new Node("NOT", "!"));
            RESULT = cond3;
          :}
          | ; 

CODE ::= DECLARACION:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | ASIGNACION:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | IFCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | IFCOND:o ELSECOND:e CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(e);
            code.addNode(c);
            RESULT = code;
         :}
         | FORCOND:o CODE:c 
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | LOOPCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | OPTIONSCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | PRINTCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | LLAMADO:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | ;

RETORNO ::= RETURN VALORO:v FINLINE
            {:
            Node retorno = new Node("RETURN");
            retorno.addNode(new Node("RETURN", "return"));
            retorno.addNode(v);
            retorno.addNode(new Node("FINLINE", ";"));
            RESULT = retorno;
         :};

ARREGLO ::= ABREPAR ARREGLO1:a CIERRAPAR
            {:
                Node arreglo = new Node("ARRAY");
                arreglo.addNode(new Node("ABREPAR", "("));
                arreglo.addNode(a);
                arreglo.addNode(new Node("CIERRAPAR", ")"));
                RESULT = arreglo;
            :};

ARREGLO1 ::= ARREGLO1:a COMA VALOR1:v 
             {:
                Node arr = new Node("LISTA ARRAY");
                arr.addNode(a);
                arr.addNode(new Node("COMA", ","));
                arr.addNode(v);
                RESULT = arr;
             :}
             | VALOR1:v
             {:
                Node arr = new Node("LISTA ARRAY");
                arr.addNode(v);
                RESULT = arr;
             :};

MATRIZ ::= ABREPAR MATRIZ1:a CIERRAPAR
           {:
                Node matriz = new Node("MATRIX");
                matriz.addNode(new Node("ABREPAR", "("));
                matriz.addNode(a);
                matriz.addNode(new Node("CIERRAPAR", ")"));
                RESULT = matriz;
            :};

MATRIZ1 ::= MATRIZ1:a COMA ARREGLO:v
            {:
                Node mat = new Node("LISTA MATRIX");
                mat.addNode(a);
                mat.addNode(new Node("COMA", ","));
                mat.addNode(v);
                RESULT = mat;
             :}
            | ARREGLO:v
            {:
                Node mat = new Node("LISTA MATRIX");
                mat.addNode(v);
                RESULT = mat;
             :};

VALOR1 ::= CHAR:v
           {:
                Node val = new Node("VALOR");
                val.addNode(new Node("CHAR", ((String) v)));
                RESULT = val;
           :}
           | BOOL:v
           {:
                Node val = new Node("VALOR");
                val.addNode(new Node("BOOL", ((String) v)));
                RESULT = val;
           :};

VALOR ::= MATRIZ:m
          {:
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          :}
          | ARREGLO:m
          {:
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          :}
          | VALOR1:m
          {:
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          :};

VALORO ::= VALOR:m
           {:
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          :}
           | OPERACION:m
           {:
                Node valor = new Node("VALOR");
                valor.addNode(m);
                RESULT = valor;
          :};


LLAMADO ::= ID:i ABREPAR PARAMS:o CIERRAPAR FINLINE
            {:
                Node llamado = new Node("LLAMDA FUNCION");
                llamado.addNode(new Node("ID", ((String) i)));
                llamado.addNode(new Node("ABREPAR", "("));
                llamado.addNode(o);
                llamado.addNode(new Node("CIERRAPAR", ")"));
                llamado.addNode(new Node("FINLINE", ";"));
                RESULT = llamado;
            :};

PARAMS ::= PARAMS1:o
           {:
                Node params = new Node("PARAMETROS ENVIO");
                params.addNode(o);
                RESULT = params;
           :}
           | ;

PARAMS1 ::= PARAMS1:p COMA VALORO:v
            {:
                Node params = new Node("LISTA PARAMETROS");
                params.addNode(p);
                params.addNode(new Node("COMA", ","));
                params.addNode(v);
                RESULT = params;
            :}
            | VALORO:v
            {:
                Node params = new Node("LISTA PARAMETROS");
                params.addNode(v);
                RESULT = params;
            :};