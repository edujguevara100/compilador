package compilador;
import java_cup.runtime.*;


parser code 
{:
    public static String error = "";
    public String errorNR = "";
    public Symbol found;
    public Node raiz;
    public void report_error(String errorBody, Object info){
        found = (Symbol)info;
	//System.out.println("Se encontro: " + found.value);
    }

    public void report_fatal_error(String errorBody, Object info){ 
        errorNR = "Hay Errores no Recuperables\n";
        //found = (Symbol)info;
	//System.out.println("Linea: " + found.left + " columna: "+ found.right);
	//System.out.println("No se esperaba el Token");
    }

    public void Func_Error(){
        switch(found.sym){
            case sym.TYPE: 
                parser.error += "Error en la declaracion de la funcion\n";
                break;
            case sym.ID:
                parser.error += "Error de Sintaxis se esperaba: type\n";
                break;
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.CIERRAPAR: 
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDFU: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void If_Error(){
        switch(found.sym){
            case sym.CIERRAPAR:
            case sym.ID:
            case sym.BOOL:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: begin o end if\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Else_Error(){
        parser.error += "Error en el Else\n";
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    
    public void Loop_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: loop\n";
                break;
            case sym.CIERRAPAR:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDI: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: end loop\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }

    public void For_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: for\n";
                break;
            case sym.TYPE:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.ID: 
                parser.error += "Error de Sintaxis se esperaba: type o ,\n";
                break;
            case sym.HASTA: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.COMA: 
                parser.error += "Error de Sintaxis se esperaba: ->\n";
                break;
            case sym.OPSR: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.CIERRAPAR: 
                parser.error += "Error de Sintaxis se esperaba: +\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDF: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: end for\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }

    public void Options_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: options\n";
                break;
            case sym.ID: 
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.COMA: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.TYPE: 
                parser.error += "Error de Sintaxis se esperaba: ,\n";
                break;
            case sym.CIERRAPAR: 
                parser.error += "Error de Sintaxis se esperaba: type\n";
                break;
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            case sym.ENDO: 
                parser.error += "Error de Sintaxis se esperaba: begin\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: end options\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Print_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: print\n";
                break;
            case sym.CIERRAPAR:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.FINLINE: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ; o (\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Read_Error(){
        if (found.sym == sym.FINLINE){
            parser.error += "Error de Sintaxis se esperaba: id\n";
        }else{
            parser.error += "Error de Sintaxis se esperaba: ;\n";
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    /*public void Llamado_Error(){
        switch(found.sym){
            case sym.ABREPAR: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.CIERRAPAR:
                parser.error += "Error de Sintaxis se esperaba: (\n";
                break;
            case sym.FINLINE: 
                parser.error += "Error de Sintaxis se esperaba: )\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }*/
    public void Return_Error(){
        switch(found.sym){
            case sym.FINLINE: 
                parser.error += "Error de Sintaxis se esperaba: return\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Asignacion_Error(){
        switch(found.sym){
            case sym.ASIG: 
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.FINLINE:
                parser.error += "Error de Sintaxis se esperaba: =\n";
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Declaracion_Error(){
        switch(found.sym){
            case sym.ID:
                parser.error += "Error de Sintaxis se esperaba: ','\n";
                break;
            case sym.COMA:
            case sym.FINLINE:
                parser.error += "Error de Sintaxis se esperaba: id o un valor\n";
                break;
            case sym.ASIG:
                parser.error += "Error de Sintaxis se esperaba: id\n";
                break;
            case sym.INT:
                parser.error += "Error de Sintaxis se esperaba: '='\n";
                break;
            default:
                parser.error += "Error de Sintaxis se esperaba: ;\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
    public void Main_Error(){
        switch(found.sym){
            case sym.BEGIN: 
                parser.error += "Error de Sintaxis se esperaba: int_main()\n";
                break;
            default:
                parser.error += "Error en el Main\n";
                break;
        }
        parser.error += "Se encontro: "+found.value.toString()+" en la linea: "+found.left+" columna: "+found.right+"\n";
    }
:}; 

terminal AND, OR, OPREL, LOOP, MAIN, FOR, OPTIONS, OPT, DEFOPT, BEGIN, 
    ENDM, ENDO, ENDI, ENDE, ENDF, ENDFU, ENDL, FINLINE, ABRE, CIERRA, HASTA, ASIG, OPMD, OPSR, 
    COMA, RETURN, TYPE, FUNC, IF, ID, ABREPAR, CIERRAPAR, ELSE, PRINT, INT, CHAR, BOOL, STRING, 
    NOT, ABRECOR, CIERRACOR, READ;

non terminal FUNCION, FUNCION2, DECLARACION, ASIGNACION, IFCOND, ELSECOND, FORCOND,
    LOOPCOND, OPTIONSCOND, MAINCOND, PRINTCOND, OPERACION, CONDICION, 
    CODE, LISTAPARAM, LISTATYPES, DECL, DECL2, OPTT, PRINTER, OP1, 
    OP2, COND1, COND2, COND3, COND4, RETORNO, VALOR, ARREGLO, MATRIZ, VALOR1,
    ARREGLO1, MATRIZ1, VALORO, LLAMADO, PARAMS, PARAMS1, ORIGIN, READCOND, ACCEDERM, LISTIN, SIZE;

precedence left OPMD;
precedence left OPSR;
start with ORIGIN;

ORIGIN ::= MAINCOND:m
           {:
                parser.raiz = (Node)m;      
           :};

FUNCION ::=  FUNCION:f FUNCION2:ff
             {:
                Node funcion = new Node("GENERAR FUNCION");
                funcion.addNode(f);
                funcion.addNode(ff);
                RESULT = funcion;
             :}
             | ;

FUNCION2 ::= FUNC TYPE:t ID:i ABREPAR LISTAPARAM:listaparam CIERRAPAR BEGIN CODE:code RETORNO:r ENDFU
             {:
                Node funcion2 = new Node("FUNCION");
                //funcion2.addNode(new Node("FUNC", "func"));
                funcion2.addNode(new Node("TYPE", ((String) t)));
                funcion2.addNode(new Node("ID", ((String) i)));
                //funcion2.addNode(new Node("ABREPAR", "("));
                funcion2.addNode(listaparam);
                //funcion2.addNode(new Node("CIERRAPAR", ")"));
                //funcion2.addNode(new Node("BEGIN", "begin"));
                funcion2.addNode(code);
                funcion2.addNode(r);
                //funcion2.addNode(new Node("ENDFU", "end func"));
                RESULT = funcion2;
             :}
             | FUNC error:e {: parser.error += "FUNCION\n";parser.Func_Error();:};

LISTAPARAM ::= TYPE:t ID:i
               {:
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               :}
               | LISTATYPES:listatypes COMA TYPE:t ID:i 
               {:
                Node listaparam = new Node("LISTA PARAMETROS");
                listaparam.addNode(listatypes);
                //listaparam.addNode(new Node("COMA", ","));
                listaparam.addNode(new Node("TYPE", ((String) t)));
                listaparam.addNode(new Node("ID", ((String) i)));
                RESULT = listaparam;
               :}
               | ;

LISTATYPES ::= LISTATYPES:lista COMA TYPE:t ID:i
               {:
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(lista);
                //listatypes.addNode(new Node("COMA", ","));
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               :}
               | TYPE:t ID:i
               {:
                Node listatypes = new Node("PARAMETROS TIPADOS");
                listatypes.addNode(new Node("TYPE", ((String) t)));
                listatypes.addNode(new Node("ID", ((String) i)));
                RESULT = listatypes;
               :};

MAINCOND ::= FUNCION:f FUNC MAIN BEGIN CODE:code RETORNO:retorno ENDM
             {:
                Node maincond = new Node("MAIN");
                maincond.addNode(f);
               // maincond.addNode(new Node("FUNC", "func"));
                //maincond.addNode(new Node("MAIN", "int_main()"));
              //  maincond.addNode(new Node("BEGIN", "begin"));
                maincond.addNode(code);
                maincond.addNode(retorno);
               // maincond.addNode(new Node("ENDM", "end main"));
                RESULT = maincond;
             :} | error:e {: parser.error += "MAIN\n";parser.Main_Error(); :};

DECLARACION ::= TYPE:t SIZE:s DECL:d FINLINE
                {:
                    Node declaracion = new Node("DECLARACION");
                    declaracion.addNode(new Node("TYPE", ((String) t)));
                    declaracion.addNode(d);
                    declaracion.addNode(s);
                   // declaracion.addNode(new Node("FINLINE", ";"));
                    RESULT = declaracion;
                :} | TYPE error{:parser.error += "DECLARACION\n";parser.Declaracion_Error();:};

SIZE ::= ABRE INT:i CIERRA 
        {: 
            RESULT = new Node("INT", ((String) i)); 
        :}
        | ABRE INT:i COMA INT:j CIERRA 
        {: 
            Node size = new Node("SIZE");
            size.addNode(new Node("INT", ((String) i)));
            size.addNode(new Node("INT", ((String) j)));
            RESULT = size;
        :}
        | ;


DECL ::= DECL:d COMA ID:i DECL2:dd
         {:
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(d);
          //  decl.addNode(new Node("COMA", ","));
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         :}
         | ID:i DECL2:dd
         {:
            Node decl = new Node("LISTA DE VARIABLES");
            decl.addNode(new Node("ID", ((String) i)));
            decl.addNode(dd);
            RESULT = decl;
         :};

DECL2 ::= ASIG VALORO:v
          {:
            Node decl2 = new Node("DECLARACION CON ASIGNACION");
            decl2.addNode(new Node("ASIG", "="));
            decl2.addNode(v);
            RESULT = decl2;
          :}
          |  ;


ASIGNACION ::= ID:i ASIG VALORO:v FINLINE
               {:
                Node asignacion = new Node("ASIGNACION");
                asignacion.addNode(new Node("ID", ((String) i)));
                asignacion.addNode(new Node("ASIG", "="));
                asignacion.addNode(v);
                //asignacion.addNode(new Node("FINLINE", ";"));
                RESULT = asignacion;
               :} | ID error:e {: parser.error += "ASIGNACION\n";parser.Asignacion_Error(); :};

IFCOND ::= IF ABREPAR CONDICION:c CIERRAPAR BEGIN CODE:code ENDI
           {:
            Node ifcond = new Node("BLOQUE IF");
        //    ifcond.addNode(new Node("IF", "if"));
        //    ifcond.addNode(new Node("ABREPAR", "("));
            ifcond.addNode(c);
        //    ifcond.addNode(new Node("CIERRAPAR", ")"));
        //    ifcond.addNode(new Node("BEGIN", "begin"));
            ifcond.addNode(code);
          //  ifcond.addNode(new Node("ENDI", "end if"));
            RESULT = ifcond;
           :} | IF error:e {: parser.error+="IF\n";parser.If_Error(); :};

ELSECOND ::= ELSE IF ABREPAR CONDICION:c CIERRAPAR BEGIN CODE:code ENDE ELSECOND:e
             {:
                Node elsecond = new Node("BLOQUE ELSE IF");
               // elsecond.addNode(new Node("ELSE", "else"));
               // elsecond.addNode(new Node("IF", "if"));
               // elsecond.addNode(new Node("ABREPAR", "("));
                elsecond.addNode(c);
               // elsecond.addNode(new Node("CIERRAPAR", ")"));
               // elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(code);
                //elsecond.addNode(new Node("ENDE", "end else"));
                elsecond.addNode(e);
                RESULT = elsecond;
             :}
             | ELSE BEGIN CODE:c ENDE
             {:
                Node elsecond = new Node("BLOQUE ELSE");
               // elsecond = new Node("ELSE", "else");
                //elsecond.addNode(new Node("BEGIN", "begin"));
                elsecond.addNode(c);
               // elsecond.addNode(new Node("ENDE", "end else"));
                RESULT = elsecond;
             :} | ELSE error:e {: parser.error+="ELSE\n";parser.Else_Error(); :};

FORCOND ::= FOR ABREPAR TYPE:t ID:i HASTA OPERACION:o COMA ID:id OPSR OPSR CIERRAPAR BEGIN CODE:c ENDF
            {:
                Node forcond = new Node("BLOQUE FOR");
                //forcond.addNode(new Node("FOR", "for"));
                //forcond.addNode(new Node("ABREPAR", "("));
                forcond.addNode(new Node("TYPE", ((String) t)));
                forcond.addNode(new Node("ID", ((String) i)));
                forcond.addNode(new Node("HASTA", "->"));
                forcond.addNode(o);
                //forcond.addNode(new Node("COMA", ","));
                forcond.addNode(new Node("ID", ((String) id)));
                forcond.addNode(new Node("OPSR", "+"));
                forcond.addNode(new Node("OPSR", "+"));
               // forcond.addNode(new Node("CIERRAPAR", ")"));
              //  forcond.addNode(new Node("BEGIN", "begin"));
                forcond.addNode(c);
              //  forcond.addNode(new Node("ENDF", "end for"));
                RESULT = forcond;
            :} | FOR error:e {: parser.error+="FOR\n";parser.For_Error(); :};

LOOPCOND ::= LOOP ABREPAR CONDICION:c CIERRAPAR BEGIN CODE:code ENDL
             {:
                Node loopcond = new Node("BLOQUE LOOP");
                //loopcond.addNode(new Node("LOOP", "loop"));
               // loopcond.addNode(new Node("ABREPAR", "("));
                loopcond.addNode(c);
               // loopcond.addNode(new Node("CIERRAPAR", ")"));
              //  loopcond.addNode(new Node("BEGIN", "begin"));
                loopcond.addNode(code);
               // loopcond.addNode(new Node("ENDL", "end loop"));
                RESULT = loopcond;
             :}| LOOP error {: parser.error+="LOOP\n";parser.Loop_Error(); :};

OPTIONSCOND ::= OPTIONS ABREPAR ID:i COMA TYPE:t CIERRAPAR BEGIN OPTT:o ENDO
                {:
                    Node optionscond = new Node("BLOQUE OPTIONS");
                   // optionscond.addNode(new Node("OPTIONS", "options"));
                  //  optionscond.addNode(new Node("ABREPAR", "("));
                    optionscond.addNode(new Node("ID", ((String) i)));
                 //   optionscond.addNode(new Node("COMA", ","));
                    optionscond.addNode(new Node("TYPE", ((String) t)));
                 //   optionscond.addNode(new Node("CIERRAPAR", ")"));
                 //   optionscond.addNode(new Node("BEGIN", "begin"));
                    optionscond.addNode(o);
                 //   optionscond.addNode(new Node("ENDO", "end options"));
                    RESULT = optionscond;
                :} | OPTIONS error {: parser.error+="OPTIONS\n";parser.Options_Error(); :};

OPTT ::= OPT ABRECOR VALORO:v CIERRACOR ABRE CODE:c CIERRA OPTT:o
         {:
            Node optt = new Node("BLOQUE OPTION");
            //optt.addNode(new Node("OPTION", "opt"));
            //optt.addNode(new Node("ABRECOR", "["));
            optt.addNode(v);
            //optt.addNode(new Node("CIERRACOR", "]"));
            //optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            //optt.addNode(new Node("CIERRA", "}"));
            optt.addNode(o);
            RESULT = optt;
         :}
         | DEFOPT ABRE CODE:c CIERRA
         {:
            Node optt = new Node("BLOQUE DEFAULT OPTION");
            //optt.addNode(new Node("DEFOPT", "opt_def"));
            //optt.addNode(new Node("ABRE", "{"));
            optt.addNode(c);
            //optt.addNode(new Node("CIERRA", "}"));
            RESULT = optt;
         :};
         

PRINTCOND ::= PRINT ABREPAR PRINTER:p CIERRAPAR FINLINE
              {:
                Node printcond = new Node("PRINT");
                //printcond.addNode(new Node("PRINT", "print"));
                //printcond.addNode(new Node("ABREPAR", "("));
                printcond.addNode(p);
                //printcond.addNode(new Node("CIERRAPAR", ")"));
                //printcond.addNode(new Node("FINLINE", ";"));
                RESULT = printcond;
              :} | PRINT error{: parser.error+="PRINT\n";parser.Print_Error(); :};

PRINTER ::= VALORO:v
            {:  
                //Node prin = new Node("PRINT CONTENT");
                //prin.addNode(v);
                RESULT = v;
            :}
            | STRING:s
            {:  
                //Node prin = new Node("PRINT CONTENT");
                Node prin = new Node("STRING", ((String) s));
                RESULT = prin;
            :};

READCOND ::= READ ID:i FINLINE
              {:
                Node r = new Node("READ");
                r.addNode(new Node("STRING", ((String) i)));
                RESULT = r;
              :} 
              | READ error{: parser.error+="READ\n";parser.Read_Error(); :};

OPERACION ::= OPERACION:o OPSR:op OP1:op1 
              {:
                //Node operacion = new Node("OPERACION SR");
                Node operacion = new Node("OPSR", ((String) op));
                operacion.addNode(o);
                operacion.addNode(op1);
                RESULT = operacion;
              :}
              | OP1:op1
              {:
                //Node operacion = new Node("OPERACION SR");
                //operacion.addNode(op1);
                RESULT = op1;
              :};

OP1 ::= OP1:op1 OPMD:op OP2:op2
        {:
            //Node operacion = new Node("OPERACION MD");
            Node operacion = new Node("OPMD", ((String) op));
            operacion.addNode(op1);
            operacion.addNode(op2);
            RESULT = operacion;
        :}
        | OP2:op2
        {:
            //Node operacion = new Node("OPERACION MD");
            //operacion.addNode(op2);
            RESULT = op2;
        :};

OP2 ::= INT:i
        {:
            //Node op2 = new Node("VALOR OPERACION");
            Node op2 = new Node("INT", ((String) i));
            RESULT = op2;
        :}
        | ID:i ACCEDERM:m
        {:
            //Node op2 = new Node("VALOR OPERACION");
            Node op2 = new Node("ID", ((String) i));
            op2.addNode(m);
            RESULT = op2;
        :}
        | ABREPAR OPERACION:o CIERRAPAR
        {:
            Node op2 = new Node("VALOR OPERACION");
            op2.addNode(new Node("ABREPAR", "("));
            op2.addNode(o);
            op2.addNode(new Node("CIERRAPAR", ")"));
            RESULT = o;
        :};

CONDICION ::= CONDICION:c OPREL:op COND1:c1 
              {:
                //Node condicion = new Node("OPERACION OPREL");
                Node condicion = new Node("OPREL", ((String) op));
                condicion.addNode(c);
                condicion.addNode(c1);
                RESULT = condicion;
              :}
              | COND1:c1
              {:
                //Node condicion = new Node("OPERACION OPREL");
                //condicion.addNode(c1);
                RESULT = c1;
              :};

COND1 ::= COND1:c1 OR:a COND2:c2
          {:
            //Node cond1 = new Node("OPERACION OR");
            Node cond1 = new Node("OR", ((String) a));
            cond1.addNode(c1);
            cond1.addNode(c2);
            RESULT = cond1;
          :}
          | COND2:c2
          {:
            //Node cond1 = new Node("OPERACION ANDOR");
            //cond1.addNode(c2);
            RESULT = c2;
          :};

COND2 ::= COND2:c1 AND:a COND3:c2 
          {:
            Node cond2 = new Node("AND", ((String) a));
            cond2.addNode(c1);
            cond2.addNode(c2);
            RESULT = cond2;
          :}
          | COND3:c
          {:
            RESULT = c;
          :};

COND3 ::= COND4:c4 ABREPAR CONDICION:c CIERRAPAR
          {:
            Node cond3 = new Node("VALOR OP BOOL");
            cond3.addNode(c4);
            cond3.addNode(new Node("ABREPAR", "("));
            cond3.addNode(c);
            cond3.addNode(new Node("CIERRAPAR", ")"));
            RESULT = cond3;
          :}
          | BOOL:b
          {:    
            //Node cond2 = new Node("VALOR OP BOOL");
            RESULT = new Node("BOOL", ((String) b));
          :}
          | ID:i ACCEDERM:m
          {:
            //Node op2 = new Node("VALOR OPERACION");
            Node cond3 = new Node("ID", ((String) i));
            cond3.addNode(m);
            RESULT = cond3;
          :}
          | INT:i
          {:
            RESULT = new Node("INT", ((String) i));
          :};

COND4 ::= NOT
          {:
            //Node cond3 = new Node("VALOR OPERACION");
            RESULT = new Node("NOT", "!");
          :}
          | ; 

RETORNO ::= RETURN VALORO:v FINLINE
            {:
            Node retorno = new Node("RETURN");
            //retorno.addNode(new Node("RETURN", "return"));
            retorno.addNode(v);
            //retorno.addNode(new Node("FINLINE", ";"));
            RESULT = retorno;
            :} | RETURN error {: parser.error+="RETORNO\n";parser.Return_Error(); :};


CODE ::= DECLARACION:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | ASIGNACION:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | IFCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | IFCOND:o ELSECOND:e CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(e);
            code.addNode(c);
            RESULT = code;
         :}
         | FORCOND:o CODE:c 
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | LOOPCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | OPTIONSCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | PRINTCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | LLAMADO:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | READCOND:o CODE:c
         {:
            Node code = new Node("CODE");
            code.addNode(o);
            code.addNode(c);
            RESULT = code;
         :}
         | ;

ARREGLO ::= ABRE ARREGLO1:a CIERRA
            {:
                Node arreglo = new Node("ARRAY");
                //arreglo.addNode(new Node("ABRE", "{"));
                arreglo.addNode(a);
                //arreglo.addNode(new Node("CIERRA", "}"));
                RESULT = arreglo;
            :};

ARREGLO1 ::= ARREGLO1:a COMA VALOR1:v 
             {:
                Node arr = new Node("ARRAY");
                arr.addNode(a);
                //arr.addNode(new Node("COMA", ","));
                arr.addNode(v);
                RESULT = arr;
             :}
             | VALOR1:v
             {:
                //Node arr = new Node("LISTA ARRAY");
                //arr.addNode(v);
                RESULT = v;
             :};

MATRIZ ::= ABRE MATRIZ1:a CIERRA
           {:
                //Node matriz = new Node("MATRIX");
                //matriz.addNode(new Node("ABREPAR", "{"));
                //matriz.addNode(a);
                //matriz.addNode(new Node("CIERRAPAR", "}"));
                RESULT = a;
            :};

MATRIZ1 ::= MATRIZ1:a COMA ARREGLO:v
            {:
                Node mat = new Node("MATRIX");
                mat.addNode(a);
                //mat.addNode(new Node("COMA", ","));
                mat.addNode(v);
                RESULT = mat;
             :}
            | ARREGLO:v
            {:
                Node mat = new Node("MATRIX");
                //Node mat = new Node("LISTA MATRIX");
                mat.addNode(v);
                RESULT = mat;
             :};

VALOR1 ::= CHAR:v
           {:
                //Node val = new Node("VALOR");
                Node val = new Node("CHAR", ((String) v));
                RESULT = val;
           :}
           | BOOL:v
           {:
                //Node val = new Node("VALOR");
                Node val = new Node("BOOL", ((String) v));
                RESULT = val;
           :}
           | INT:v
           {:
            RESULT = new Node("INT", ((String) v));
           :};

VALOR ::= MATRIZ:m
          {:
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          :}
          | ARREGLO:m
          {:
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          :}
          | CHAR:v
           {:
                //Node val = new Node("VALOR");
                Node val = new Node("CHAR", ((String) v));
                RESULT = val;
           :}
           | BOOL:v
           {:
                //Node val = new Node("VALOR");
                Node val = new Node("BOOL", ((String) v));
                RESULT = val;
           :};

VALORO ::= VALOR:m
           {:
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          :}
           | OPERACION:m
           {:
                //Node valor = new Node("VALOR");
                //valor.addNode(m);
                RESULT = m;
          :};


LLAMADO ::= ID:i ABREPAR PARAMS:o CIERRAPAR FINLINE
            {:
                Node llamado = new Node("LLAMADA FUNCION");
                llamado.addNode(new Node("ID", ((String) i)));
                //llamado.addNode(new Node("ABREPAR", "("));
                llamado.addNode(o);
                //llamado.addNode(new Node("CIERRAPAR", ")"));
                //llamado.addNode(new Node("FINLINE", ";"));
                RESULT = llamado;
            :};

PARAMS ::= PARAMS1:o
           {:
                //Node params = new Node("PARAMETROS ENVIO");
                //params.addNode(o);
                RESULT = o;
           :}
           | ;

PARAMS1 ::= PARAMS1:p COMA VALORO:v
            {:
                Node params = new Node("LISTA PARAMETROS");
                params.addNode(p);
                //params.addNode(new Node("COMA", ","));
                params.addNode(v);
                RESULT = params;
            :}
            | VALORO:v
            {:
                //Node params = new Node("LISTA PARAMETROS");
                //params.addNode(v);
                RESULT = v;
            :};

ACCEDERM ::= ABRECOR LISTIN:l CIERRACOR
             {:
                RESULT = l;
             :}
             | ABREPAR PARAMS:o CIERRAPAR
             {:
                RESULT = o;
            :}
             | ;
LISTIN ::= VALORO:l COMA VALORO:v
           {:
                Node listin = new Node("LISTA POSICIONES");
                listin.addNode(l);
                //params.addNode(new Node("COMA", ","));
                listin.addNode(v);
                RESULT = listin;
           :}
           | VALORO:v
            {:
                //Node params = new Node("LISTA PARAMETROS");
                //params.addNode(v);
                RESULT = v;
            :};